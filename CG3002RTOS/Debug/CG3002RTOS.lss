
CG3002RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800200  00005dd8  00005e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f3b  008002de  008002de  00005f4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005f4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000808  00000000  00000000  00005fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f584  00000000  00000000  000067ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c64  00000000  00000000  00015d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000519c  00000000  00000000  00018996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001c88  00000000  00000000  0001db34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003b7d  00000000  00000000  0001f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008de5  00000000  00000000  00023339  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000830  00000000  00000000  0002c11e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c2       	rjmp	.+1256   	; 0x4ea <__ctors_end>
       2:	00 00       	nop
       4:	a3 c2       	rjmp	.+1350   	; 0x54c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c2       	rjmp	.+1346   	; 0x54c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c2       	rjmp	.+1342   	; 0x54c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c2       	rjmp	.+1338   	; 0x54c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c2       	rjmp	.+1334   	; 0x54c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c2       	rjmp	.+1330   	; 0x54c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c2       	rjmp	.+1326   	; 0x54c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c2       	rjmp	.+1322   	; 0x54c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c2       	rjmp	.+1318   	; 0x54c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c2       	rjmp	.+1314   	; 0x54c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c2       	rjmp	.+1310   	; 0x54c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c2       	rjmp	.+1306   	; 0x54c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__vector_13>
      38:	89 c2       	rjmp	.+1298   	; 0x54c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c2       	rjmp	.+1294   	; 0x54c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c2       	rjmp	.+1286   	; 0x54c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c2       	rjmp	.+1282   	; 0x54c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c2       	rjmp	.+1278   	; 0x54c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_21>
      58:	79 c2       	rjmp	.+1266   	; 0x54c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <__vector_23>
      60:	75 c2       	rjmp	.+1258   	; 0x54c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__vector_25>
      68:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__vector_26>
      6c:	6f c2       	rjmp	.+1246   	; 0x54c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c2       	rjmp	.+1242   	; 0x54c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c2       	rjmp	.+1238   	; 0x54c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c2       	rjmp	.+1234   	; 0x54c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c2       	rjmp	.+1230   	; 0x54c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c2       	rjmp	.+1226   	; 0x54c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c2       	rjmp	.+1222   	; 0x54c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c2       	rjmp	.+1218   	; 0x54c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c2       	rjmp	.+1214   	; 0x54c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__vector_36>
      94:	0c 94 91 25 	jmp	0x4b22	; 0x4b22 <__vector_37>
      98:	59 c2       	rjmp	.+1202   	; 0x54c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__vector_39>
      a0:	55 c2       	rjmp	.+1194   	; 0x54c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c2       	rjmp	.+1190   	; 0x54c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c2       	rjmp	.+1186   	; 0x54c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c2       	rjmp	.+1182   	; 0x54c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c2       	rjmp	.+1178   	; 0x54c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c2       	rjmp	.+1174   	; 0x54c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c2       	rjmp	.+1170   	; 0x54c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c2       	rjmp	.+1166   	; 0x54c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c2       	rjmp	.+1162   	; 0x54c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c2       	rjmp	.+1158   	; 0x54c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c2       	rjmp	.+1154   	; 0x54c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3f c2       	rjmp	.+1150   	; 0x54c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	0c 94 d0 25 	jmp	0x4ba0	; 0x4ba0 <__vector_52>
      d4:	3b c2       	rjmp	.+1142   	; 0x54c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	39 c2       	rjmp	.+1138   	; 0x54c <__bad_interrupt>
      da:	00 00       	nop
      dc:	0c 94 0f 26 	jmp	0x4c1e	; 0x4c1e <__vector_55>
      e0:	35 c2       	rjmp	.+1130   	; 0x54c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	90 1e       	adc	r9, r16
      e6:	93 1e       	adc	r9, r19
      e8:	93 1e       	adc	r9, r19
      ea:	93 1e       	adc	r9, r19
      ec:	93 1e       	adc	r9, r19
      ee:	93 1e       	adc	r9, r19
      f0:	93 1e       	adc	r9, r19
      f2:	93 1e       	adc	r9, r19
      f4:	aa 1d       	adc	r26, r10
      f6:	93 1e       	adc	r9, r19
      f8:	93 1e       	adc	r9, r19
      fa:	93 1e       	adc	r9, r19
      fc:	93 1e       	adc	r9, r19
      fe:	93 1e       	adc	r9, r19
     100:	93 1e       	adc	r9, r19
     102:	93 1e       	adc	r9, r19
     104:	aa 1d       	adc	r26, r10
     106:	93 1e       	adc	r9, r19
     108:	93 1e       	adc	r9, r19
     10a:	93 1e       	adc	r9, r19
     10c:	93 1e       	adc	r9, r19
     10e:	93 1e       	adc	r9, r19
     110:	93 1e       	adc	r9, r19
     112:	93 1e       	adc	r9, r19
     114:	b2 1d       	adc	r27, r2
     116:	93 1e       	adc	r9, r19
     118:	93 1e       	adc	r9, r19
     11a:	93 1e       	adc	r9, r19
     11c:	93 1e       	adc	r9, r19
     11e:	93 1e       	adc	r9, r19
     120:	93 1e       	adc	r9, r19
     122:	93 1e       	adc	r9, r19
     124:	d7 1d       	adc	r29, r7
     126:	93 1e       	adc	r9, r19
     128:	93 1e       	adc	r9, r19
     12a:	93 1e       	adc	r9, r19
     12c:	93 1e       	adc	r9, r19
     12e:	93 1e       	adc	r9, r19
     130:	93 1e       	adc	r9, r19
     132:	93 1e       	adc	r9, r19
     134:	b2 1d       	adc	r27, r2
     136:	93 1e       	adc	r9, r19
     138:	93 1e       	adc	r9, r19
     13a:	93 1e       	adc	r9, r19
     13c:	93 1e       	adc	r9, r19
     13e:	93 1e       	adc	r9, r19
     140:	93 1e       	adc	r9, r19
     142:	93 1e       	adc	r9, r19
     144:	dc 1d       	adc	r29, r12
     146:	93 1e       	adc	r9, r19
     148:	93 1e       	adc	r9, r19
     14a:	93 1e       	adc	r9, r19
     14c:	93 1e       	adc	r9, r19
     14e:	93 1e       	adc	r9, r19
     150:	93 1e       	adc	r9, r19
     152:	93 1e       	adc	r9, r19
     154:	e1 1d       	adc	r30, r1
     156:	93 1e       	adc	r9, r19
     158:	93 1e       	adc	r9, r19
     15a:	93 1e       	adc	r9, r19
     15c:	93 1e       	adc	r9, r19
     15e:	93 1e       	adc	r9, r19
     160:	93 1e       	adc	r9, r19
     162:	93 1e       	adc	r9, r19
     164:	f2 1d       	adc	r31, r2
     166:	93 1e       	adc	r9, r19
     168:	93 1e       	adc	r9, r19
     16a:	93 1e       	adc	r9, r19
     16c:	93 1e       	adc	r9, r19
     16e:	93 1e       	adc	r9, r19
     170:	93 1e       	adc	r9, r19
     172:	93 1e       	adc	r9, r19
     174:	1b 1e       	adc	r1, r27
     176:	93 1e       	adc	r9, r19
     178:	93 1e       	adc	r9, r19
     17a:	93 1e       	adc	r9, r19
     17c:	93 1e       	adc	r9, r19
     17e:	93 1e       	adc	r9, r19
     180:	93 1e       	adc	r9, r19
     182:	93 1e       	adc	r9, r19
     184:	e6 1d       	adc	r30, r6
     186:	93 1e       	adc	r9, r19
     188:	93 1e       	adc	r9, r19
     18a:	93 1e       	adc	r9, r19
     18c:	93 1e       	adc	r9, r19
     18e:	93 1e       	adc	r9, r19
     190:	93 1e       	adc	r9, r19
     192:	93 1e       	adc	r9, r19
     194:	00 1e       	adc	r0, r16
     196:	93 1e       	adc	r9, r19
     198:	93 1e       	adc	r9, r19
     19a:	93 1e       	adc	r9, r19
     19c:	93 1e       	adc	r9, r19
     19e:	93 1e       	adc	r9, r19
     1a0:	93 1e       	adc	r9, r19
     1a2:	93 1e       	adc	r9, r19
     1a4:	1d 1e       	adc	r1, r29
     1a6:	93 1e       	adc	r9, r19
     1a8:	93 1e       	adc	r9, r19
     1aa:	93 1e       	adc	r9, r19
     1ac:	93 1e       	adc	r9, r19
     1ae:	93 1e       	adc	r9, r19
     1b0:	93 1e       	adc	r9, r19
     1b2:	93 1e       	adc	r9, r19
     1b4:	1d 1e       	adc	r1, r29
     1b6:	93 1e       	adc	r9, r19
     1b8:	93 1e       	adc	r9, r19
     1ba:	93 1e       	adc	r9, r19
     1bc:	93 1e       	adc	r9, r19
     1be:	93 1e       	adc	r9, r19
     1c0:	93 1e       	adc	r9, r19
     1c2:	93 1e       	adc	r9, r19
     1c4:	1d 1e       	adc	r1, r29
     1c6:	93 1e       	adc	r9, r19
     1c8:	93 1e       	adc	r9, r19
     1ca:	93 1e       	adc	r9, r19
     1cc:	93 1e       	adc	r9, r19
     1ce:	93 1e       	adc	r9, r19
     1d0:	93 1e       	adc	r9, r19
     1d2:	93 1e       	adc	r9, r19
     1d4:	1d 1e       	adc	r1, r29
     1d6:	93 1e       	adc	r9, r19
     1d8:	93 1e       	adc	r9, r19
     1da:	93 1e       	adc	r9, r19
     1dc:	93 1e       	adc	r9, r19
     1de:	93 1e       	adc	r9, r19
     1e0:	93 1e       	adc	r9, r19
     1e2:	93 1e       	adc	r9, r19
     1e4:	26 1e       	adc	r2, r22
     1e6:	93 1e       	adc	r9, r19
     1e8:	93 1e       	adc	r9, r19
     1ea:	93 1e       	adc	r9, r19
     1ec:	93 1e       	adc	r9, r19
     1ee:	93 1e       	adc	r9, r19
     1f0:	93 1e       	adc	r9, r19
     1f2:	93 1e       	adc	r9, r19
     1f4:	57 1e       	adc	r5, r23
     1f6:	93 1e       	adc	r9, r19
     1f8:	93 1e       	adc	r9, r19
     1fa:	93 1e       	adc	r9, r19
     1fc:	93 1e       	adc	r9, r19
     1fe:	93 1e       	adc	r9, r19
     200:	93 1e       	adc	r9, r19
     202:	93 1e       	adc	r9, r19
     204:	26 1e       	adc	r2, r22
     206:	93 1e       	adc	r9, r19
     208:	93 1e       	adc	r9, r19
     20a:	93 1e       	adc	r9, r19
     20c:	93 1e       	adc	r9, r19
     20e:	93 1e       	adc	r9, r19
     210:	93 1e       	adc	r9, r19
     212:	93 1e       	adc	r9, r19
     214:	57 1e       	adc	r5, r23
     216:	93 1e       	adc	r9, r19
     218:	93 1e       	adc	r9, r19
     21a:	93 1e       	adc	r9, r19
     21c:	93 1e       	adc	r9, r19
     21e:	93 1e       	adc	r9, r19
     220:	93 1e       	adc	r9, r19
     222:	93 1e       	adc	r9, r19
     224:	3e 1e       	adc	r3, r30
     226:	93 1e       	adc	r9, r19
     228:	93 1e       	adc	r9, r19
     22a:	93 1e       	adc	r9, r19
     22c:	93 1e       	adc	r9, r19
     22e:	93 1e       	adc	r9, r19
     230:	93 1e       	adc	r9, r19
     232:	93 1e       	adc	r9, r19
     234:	5b 1e       	adc	r5, r27
     236:	93 1e       	adc	r9, r19
     238:	93 1e       	adc	r9, r19
     23a:	93 1e       	adc	r9, r19
     23c:	93 1e       	adc	r9, r19
     23e:	93 1e       	adc	r9, r19
     240:	93 1e       	adc	r9, r19
     242:	93 1e       	adc	r9, r19
     244:	5b 1e       	adc	r5, r27
     246:	93 1e       	adc	r9, r19
     248:	93 1e       	adc	r9, r19
     24a:	93 1e       	adc	r9, r19
     24c:	93 1e       	adc	r9, r19
     24e:	93 1e       	adc	r9, r19
     250:	93 1e       	adc	r9, r19
     252:	93 1e       	adc	r9, r19
     254:	70 1e       	adc	r7, r16
     256:	93 1e       	adc	r9, r19
     258:	93 1e       	adc	r9, r19
     25a:	93 1e       	adc	r9, r19
     25c:	93 1e       	adc	r9, r19
     25e:	93 1e       	adc	r9, r19
     260:	93 1e       	adc	r9, r19
     262:	93 1e       	adc	r9, r19
     264:	8a 1e       	adc	r8, r26
     266:	93 1e       	adc	r9, r19
     268:	93 1e       	adc	r9, r19
     26a:	93 1e       	adc	r9, r19
     26c:	93 1e       	adc	r9, r19
     26e:	93 1e       	adc	r9, r19
     270:	93 1e       	adc	r9, r19
     272:	93 1e       	adc	r9, r19
     274:	8a 1e       	adc	r8, r26
     276:	03 6e       	ori	r16, 0xE3	; 227
     278:	db 36       	cpi	r29, 0x6B	; 107
     27a:	3d 9a       	sbi	0x07, 5	; 7
     27c:	99 99       	sbic	0x13, 1	; 19
     27e:	99 3d       	cpi	r25, 0xD9	; 217
     280:	ab aa       	std	Y+51, r10	; 0x33
     282:	aa 2a       	or	r10, r26
     284:	3e 00       	.word	0x003e	; ????
     286:	00 00       	nop
     288:	80 3f       	cpi	r24, 0xF0	; 240
     28a:	08 4a       	sbci	r16, 0xA8	; 168
     28c:	d7 3b       	cpi	r29, 0xB7	; 183
     28e:	3b ce       	rjmp	.-906    	; 0xffffff06 <__eeprom_end+0xff7eff06>
     290:	01 6e       	ori	r16, 0xE1	; 225
     292:	84 bc       	out	0x24, r8	; 36
     294:	bf fd       	.word	0xfdbf	; ????
     296:	c1 2f       	mov	r28, r17
     298:	3d 6c       	ori	r19, 0xCD	; 205
     29a:	74 31       	cpi	r23, 0x14	; 20
     29c:	9a bd       	out	0x2a, r25	; 42
     29e:	56 83       	std	Z+6, r21	; 0x06
     2a0:	3d da       	rcall	.-2950   	; 0xfffff71c <__eeprom_end+0xff7ef71c>
     2a2:	3d 00       	.word	0x003d	; ????
     2a4:	c7 7f       	andi	r28, 0xF7	; 247
     2a6:	11 be       	out	0x31, r1	; 49
     2a8:	d9 e4       	ldi	r29, 0x49	; 73
     2aa:	bb 4c       	sbci	r27, 0xCB	; 203
     2ac:	3e 91       	ld	r19, -X
     2ae:	6b aa       	std	Y+51, r6	; 0x33
     2b0:	aa be       	out	0x3a, r10	; 58
     2b2:	00 00       	nop
     2b4:	00 80       	ld	r0, Z
     2b6:	3f 07       	cpc	r19, r31
     2b8:	2c 7a       	andi	r18, 0xAC	; 172
     2ba:	a5 ba       	out	0x15, r10	; 21
     2bc:	6c c5       	rjmp	.+2776   	; 0xd96 <_Z16Drift_correctionv+0x11c>
     2be:	90 da       	rcall	.-2784   	; 0xfffff7e0 <__eeprom_end+0xff7ef7e0>
     2c0:	3b 93       	.word	0x933b	; ????
     2c2:	65 fc       	sbrc	r6, 5
     2c4:	8b bc       	out	0x2b, r8	; 43
     2c6:	53 f8       	bld	r5, 3
     2c8:	10 fd       	sbrc	r17, 0
     2ca:	3c 56       	subi	r19, 0x6C	; 108
     2cc:	92 83       	std	Z+2, r25	; 0x02
     2ce:	4d bd       	out	0x2d, r20	; 45
     2d0:	87 9d       	mul	r24, r7
     2d2:	3a b6       	in	r3, 0x3a	; 58
     2d4:	3d cb       	rjmp	.-2438   	; 0xfffff950 <__eeprom_end+0xff7ef950>
     2d6:	c9 bf       	out	0x39, r28	; 57
     2d8:	5b be       	out	0x3b, r5	; 59
     2da:	73 da       	rcall	.-2842   	; 0xfffff7c2 <__eeprom_end+0xff7ef7c2>
     2dc:	0f c9       	rjmp	.-3554   	; 0xfffff4fc <__eeprom_end+0xff7ef4fc>
     2de:	3f 05       	cpc	r19, r15
     2e0:	a8 4c       	sbci	r26, 0xC8	; 200
     2e2:	cd b2       	in	r12, 0x1d	; 29
     2e4:	d4 4e       	sbci	r29, 0xE4	; 228
     2e6:	b9 38       	cpi	r27, 0x89	; 137
     2e8:	36 a9       	ldd	r19, Z+54	; 0x36
     2ea:	02 0c       	add	r0, r2
     2ec:	50 b9       	out	0x00, r21	; 0
     2ee:	91 86       	std	Z+9, r9	; 0x09
     2f0:	88 08       	sbc	r8, r8
     2f2:	3c a6       	std	Y+44, r3	; 0x2c
     2f4:	aa aa       	std	Y+50, r10	; 0x32
     2f6:	2a be       	out	0x3a, r2	; 58
     2f8:	00 00       	nop
     2fa:	00 80       	ld	r0, Z
     2fc:	3f 07       	cpc	r19, r31
     2fe:	63 42       	sbci	r22, 0x23	; 35
     300:	36 b7       	in	r19, 0x36	; 54
     302:	9b d8       	rcall	.-3786   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     304:	a7 1a       	sub	r10, r23
     306:	39 68       	ori	r19, 0x89	; 137
     308:	56 18       	sub	r5, r6
     30a:	ae ba       	out	0x1e, r10	; 30
     30c:	ab 55       	subi	r26, 0x5B	; 91
     30e:	8c 1d       	adc	r24, r12
     310:	3c b7       	in	r19, 0x3c	; 60
     312:	cc 57       	subi	r28, 0x7C	; 124
     314:	63 bd       	out	0x23, r22	; 35
     316:	6d ed       	ldi	r22, 0xDD	; 221
     318:	fd 75       	andi	r31, 0x5D	; 93
     31a:	3e f6       	brtc	.-114    	; 0x2aa <__SREG__+0x26b>
     31c:	17 72       	andi	r17, 0x27	; 39
     31e:	31 bf       	out	0x31, r19	; 49
     320:	00 00       	nop
     322:	00 80       	ld	r0, Z
     324:	3f 08       	sbc	r3, r15
     326:	00 00       	nop
     328:	00 be       	out	0x30, r0	; 48
     32a:	92 24       	eor	r9, r2
     32c:	49 12       	cpse	r4, r25
     32e:	3e ab       	std	Y+54, r19	; 0x36
     330:	aa aa       	std	Y+50, r10	; 0x32
     332:	2a be       	out	0x3a, r2	; 58
     334:	cd cc       	rjmp	.-1638   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     336:	cc 4c       	sbci	r28, 0xCC	; 204
     338:	3e 00       	.word	0x003e	; ????
     33a:	00 00       	nop
     33c:	80 be       	out	0x30, r8	; 48
     33e:	ab aa       	std	Y+51, r10	; 0x33
     340:	aa aa       	std	Y+50, r10	; 0x32
     342:	3e 00       	.word	0x003e	; ????
     344:	00 00       	nop
     346:	00 bf       	out	0x30, r16	; 48
     348:	00 00       	nop
     34a:	00 80       	ld	r0, Z
     34c:	3f 00       	.word	0x003f	; ????
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	08 41       	sbci	r16, 0x18	; 24
     354:	78 d3       	rcall	.+1776   	; 0xa46 <_Z10Read_Accelv+0x6e>
     356:	bb 43       	sbci	r27, 0x3B	; 59
     358:	87 d1       	rcall	.+782    	; 0x668 <_Z15Matrix_MultiplyPA3_fS0_S0_+0x11a>
     35a:	13 3d       	cpi	r17, 0xD3	; 211
     35c:	19 0e       	add	r1, r25
     35e:	3c c3       	rjmp	.+1656   	; 0x9d8 <_Z10Read_Accelv>
     360:	bd 42       	sbci	r27, 0x2D	; 45
     362:	82 ad       	ldd	r24, Z+58	; 0x3a
     364:	2b 3e       	cpi	r18, 0xEB	; 235
     366:	68 ec       	ldi	r22, 0xC8	; 200
     368:	82 76       	andi	r24, 0x62	; 98
     36a:	be d9       	rcall	.-3204   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     36c:	8f e1       	ldi	r24, 0x1F	; 31
     36e:	a9 3e       	cpi	r26, 0xE9	; 233
     370:	4c 80       	ldd	r4, Y+4	; 0x04
     372:	ef ff       	.word	0xffef	; ????
     374:	be 01       	movw	r22, r28
     376:	c4 ff       	sbrs	r28, 4
     378:	7f 3f       	cpi	r23, 0xFF	; 255
     37a:	00 00       	nop
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	73 2a       	or	r7, r19
     382:	78 2a       	or	r7, r24
     384:	7d 2a       	or	r7, r29
     386:	87 2a       	or	r8, r23
     388:	fe 2a       	or	r15, r30
     38a:	91 2a       	or	r9, r17
     38c:	99 2a       	or	r9, r25
     38e:	a1 2a       	or	r10, r17
     390:	ab 2a       	or	r10, r27
     392:	b5 2a       	or	r11, r21
     394:	bf 2a       	or	r11, r31
     396:	cc 2a       	or	r12, r28
     398:	d6 2a       	or	r13, r22
     39a:	fe 2a       	or	r15, r30
     39c:	e0 2a       	or	r14, r16
     39e:	ea 2a       	or	r14, r26
     3a0:	f4 2a       	or	r15, r20
     3a2:	22 2b       	or	r18, r18
     3a4:	26 2b       	or	r18, r22
     3a6:	16 2b       	or	r17, r22
     3a8:	1c 2b       	or	r17, r28
     3aa:	6b 2b       	or	r22, r27
     3ac:	2a 2b       	or	r18, r26
     3ae:	30 2b       	or	r19, r16
     3b0:	36 2b       	or	r19, r22
     3b2:	3c 2b       	or	r19, r28
     3b4:	42 2b       	or	r20, r18
     3b6:	48 2b       	or	r20, r24
     3b8:	4e 2b       	or	r20, r30
     3ba:	54 2b       	or	r21, r20
     3bc:	6b 2b       	or	r22, r27
     3be:	5a 2b       	or	r21, r26
     3c0:	60 2b       	or	r22, r16
     3c2:	66 2b       	or	r22, r22

000003c4 <__trampolines_end>:
     3c4:	00 00       	nop
     3c6:	09 0a       	sbc	r0, r25
     3c8:	02 08       	sbc	r0, r2
     3ca:	0b 0c       	add	r0, r11
     3cc:	0d 07       	cpc	r16, r29
     3ce:	06 03       	mulsu	r16, r22
     3d0:	04 01       	movw	r0, r8
	...
     3ee:	00 00       	nop
     3f0:	11 10       	cpse	r1, r1
     3f2:	0f 00       	.word	0x000f	; ????
	...

0000040a <digital_pin_to_bit_mask_PGM>:
     40a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     41a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     42a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     43a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     44a:	04 08 10 20 40 80                                   ... @.

00000450 <digital_pin_to_port_PGM>:
     450:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     460:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     470:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     480:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     490:	0b 0b 0b 0b 0b 0b                                   ......

00000496 <port_to_input_PGM>:
     496:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     4a6:	00 01 00 00 03 01 06 01 09 01                       ..........

000004b0 <port_to_output_PGM>:
     4b0:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     4c0:	02 01 00 00 05 01 08 01 0b 01                       ..........

000004ca <port_to_mode_PGM>:
     4ca:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     4da:	01 01 00 00 04 01 07 01 0a 01                       ..........

000004e4 <__ctors_start>:
     4e4:	6e 0b       	sbc	r22, r30
     4e6:	78 1f       	adc	r23, r24
     4e8:	15 27       	eor	r17, r21

000004ea <__ctors_end>:
     4ea:	11 24       	eor	r1, r1
     4ec:	1f be       	out	0x3f, r1	; 63
     4ee:	cf ef       	ldi	r28, 0xFF	; 255
     4f0:	d1 e2       	ldi	r29, 0x21	; 33
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	0c bf       	out	0x3c, r16	; 60

000004fa <__do_copy_data>:
     4fa:	12 e0       	ldi	r17, 0x02	; 2
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b2 e0       	ldi	r27, 0x02	; 2
     500:	e8 ed       	ldi	r30, 0xD8	; 216
     502:	fd e5       	ldi	r31, 0x5D	; 93
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	0b bf       	out	0x3b, r16	; 59
     508:	02 c0       	rjmp	.+4      	; 0x50e <__do_copy_data+0x14>
     50a:	07 90       	elpm	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	ae 3d       	cpi	r26, 0xDE	; 222
     510:	b1 07       	cpc	r27, r17
     512:	d9 f7       	brne	.-10     	; 0x50a <__do_copy_data+0x10>

00000514 <__do_clear_bss>:
     514:	22 e1       	ldi	r18, 0x12	; 18
     516:	ae ed       	ldi	r26, 0xDE	; 222
     518:	b2 e0       	ldi	r27, 0x02	; 2
     51a:	01 c0       	rjmp	.+2      	; 0x51e <.do_clear_bss_start>

0000051c <.do_clear_bss_loop>:
     51c:	1d 92       	st	X+, r1

0000051e <.do_clear_bss_start>:
     51e:	a9 31       	cpi	r26, 0x19	; 25
     520:	b2 07       	cpc	r27, r18
     522:	e1 f7       	brne	.-8      	; 0x51c <.do_clear_bss_loop>

00000524 <__do_global_ctors>:
     524:	14 e0       	ldi	r17, 0x04	; 4
     526:	ca ee       	ldi	r28, 0xEA	; 234
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	00 e0       	ldi	r16, 0x00	; 0
     52c:	06 c0       	rjmp	.+12     	; 0x53a <__do_global_ctors+0x16>
     52e:	22 97       	sbiw	r28, 0x02	; 2
     530:	01 09       	sbc	r16, r1
     532:	fe 01       	movw	r30, r28
     534:	0b bf       	out	0x3b, r16	; 59
     536:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__tablejump_elpm__>
     53a:	c4 3e       	cpi	r28, 0xE4	; 228
     53c:	d1 07       	cpc	r29, r17
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 07       	cpc	r16, r24
     542:	a9 f7       	brne	.-22     	; 0x52e <__do_global_ctors+0xa>
     544:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <main>
     548:	0c 94 ea 2e 	jmp	0x5dd4	; 0x5dd4 <_exit>

0000054c <__bad_interrupt>:
     54c:	59 cd       	rjmp	.-1358   	; 0x0 <__vectors>

0000054e <_Z15Matrix_MultiplyPA3_fS0_S0_>:
  ////Serial.println(step);
  //Serial.println(compass.heading());
  //#endif
  dprintf("steps: %d",step);
  
}
     54e:	2f 92       	push	r2
     550:	3f 92       	push	r3
     552:	4f 92       	push	r4
     554:	5f 92       	push	r5
     556:	6f 92       	push	r6
     558:	7f 92       	push	r7
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	62 97       	sbiw	r28, 0x12	; 18
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	98 8b       	std	Y+16, r25	; 0x10
     584:	8f 87       	std	Y+15, r24	; 0x0f
     586:	5a 8b       	std	Y+18, r21	; 0x12
     588:	49 8b       	std	Y+17, r20	; 0x11
     58a:	81 2c       	mov	r8, r1
     58c:	91 2c       	mov	r9, r1
     58e:	2e 01       	movw	r4, r28
     590:	8d e0       	ldi	r24, 0x0D	; 13
     592:	48 0e       	add	r4, r24
     594:	51 1c       	adc	r5, r1
     596:	7e 87       	std	Y+14, r23	; 0x0e
     598:	6d 87       	std	Y+13, r22	; 0x0d
     59a:	46 c0       	rjmp	.+140    	; 0x628 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xda>
     59c:	f5 01       	movw	r30, r10
     59e:	61 91       	ld	r22, Z+
     5a0:	71 91       	ld	r23, Z+
     5a2:	81 91       	ld	r24, Z+
     5a4:	91 91       	ld	r25, Z+
     5a6:	5f 01       	movw	r10, r30
     5a8:	f7 01       	movw	r30, r14
     5aa:	20 81       	ld	r18, Z
     5ac:	31 81       	ldd	r19, Z+1	; 0x01
     5ae:	42 81       	ldd	r20, Z+2	; 0x02
     5b0:	53 81       	ldd	r21, Z+3	; 0x03
     5b2:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     5b6:	f8 01       	movw	r30, r16
     5b8:	61 93       	st	Z+, r22
     5ba:	71 93       	st	Z+, r23
     5bc:	81 93       	st	Z+, r24
     5be:	91 93       	st	Z+, r25
     5c0:	8f 01       	movw	r16, r30
     5c2:	fc e0       	ldi	r31, 0x0C	; 12
     5c4:	ef 0e       	add	r14, r31
     5c6:	f1 1c       	adc	r15, r1
     5c8:	04 15       	cp	r16, r4
     5ca:	15 05       	cpc	r17, r5
     5cc:	39 f7       	brne	.-50     	; 0x59c <_Z15Matrix_MultiplyPA3_fS0_S0_+0x4e>
     5ce:	2d 81       	ldd	r18, Y+5	; 0x05
     5d0:	3e 81       	ldd	r19, Y+6	; 0x06
     5d2:	4f 81       	ldd	r20, Y+7	; 0x07
     5d4:	58 85       	ldd	r21, Y+8	; 0x08
     5d6:	69 81       	ldd	r22, Y+1	; 0x01
     5d8:	7a 81       	ldd	r23, Y+2	; 0x02
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	9c 81       	ldd	r25, Y+4	; 0x04
     5de:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     5e2:	29 85       	ldd	r18, Y+9	; 0x09
     5e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e6:	4b 85       	ldd	r20, Y+11	; 0x0b
     5e8:	5c 85       	ldd	r21, Y+12	; 0x0c
     5ea:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     5ee:	f3 01       	movw	r30, r6
     5f0:	61 93       	st	Z+, r22
     5f2:	71 93       	st	Z+, r23
     5f4:	81 93       	st	Z+, r24
     5f6:	91 93       	st	Z+, r25
     5f8:	3f 01       	movw	r6, r30
     5fa:	f4 e0       	ldi	r31, 0x04	; 4
     5fc:	cf 0e       	add	r12, r31
     5fe:	d1 1c       	adc	r13, r1
     600:	8c e0       	ldi	r24, 0x0C	; 12
     602:	c8 16       	cp	r12, r24
     604:	d1 04       	cpc	r13, r1
     606:	49 f0       	breq	.+18     	; 0x61a <_Z15Matrix_MultiplyPA3_fS0_S0_+0xcc>
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	ed 84       	ldd	r14, Y+13	; 0x0d
     610:	fe 84       	ldd	r15, Y+14	; 0x0e
     612:	ec 0c       	add	r14, r12
     614:	fd 1c       	adc	r15, r13
     616:	51 01       	movw	r10, r2
     618:	c1 cf       	rjmp	.-126    	; 0x59c <_Z15Matrix_MultiplyPA3_fS0_S0_+0x4e>
     61a:	ec e0       	ldi	r30, 0x0C	; 12
     61c:	8e 0e       	add	r8, r30
     61e:	91 1c       	adc	r9, r1
     620:	f4 e2       	ldi	r31, 0x24	; 36
     622:	8f 16       	cp	r8, r31
     624:	91 04       	cpc	r9, r1
     626:	59 f0       	breq	.+22     	; 0x63e <_Z15Matrix_MultiplyPA3_fS0_S0_+0xf0>
     628:	69 88       	ldd	r6, Y+17	; 0x11
     62a:	7a 88       	ldd	r7, Y+18	; 0x12
     62c:	68 0c       	add	r6, r8
     62e:	79 1c       	adc	r7, r9
     630:	c1 2c       	mov	r12, r1
     632:	d1 2c       	mov	r13, r1
     634:	2f 84       	ldd	r2, Y+15	; 0x0f
     636:	38 88       	ldd	r3, Y+16	; 0x10
     638:	28 0c       	add	r2, r8
     63a:	39 1c       	adc	r3, r9
     63c:	e5 cf       	rjmp	.-54     	; 0x608 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xba>
     63e:	62 96       	adiw	r28, 0x12	; 18
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	6f 90       	pop	r6
     666:	5f 90       	pop	r5
     668:	4f 90       	pop	r4
     66a:	3f 90       	pop	r3
     66c:	2f 90       	pop	r2
     66e:	08 95       	ret

00000670 <_Z18Vector_Dot_ProductPfS_>:
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	5c 01       	movw	r10, r24
     686:	06 2f       	mov	r16, r22
     688:	17 2f       	mov	r17, r23
     68a:	c3 e0       	ldi	r28, 0x03	; 3
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	c1 2c       	mov	r12, r1
     690:	d1 2c       	mov	r13, r1
     692:	76 01       	movw	r14, r12
     694:	f5 01       	movw	r30, r10
     696:	61 91       	ld	r22, Z+
     698:	71 91       	ld	r23, Z+
     69a:	81 91       	ld	r24, Z+
     69c:	91 91       	ld	r25, Z+
     69e:	5f 01       	movw	r10, r30
     6a0:	f8 01       	movw	r30, r16
     6a2:	21 91       	ld	r18, Z+
     6a4:	31 91       	ld	r19, Z+
     6a6:	41 91       	ld	r20, Z+
     6a8:	51 91       	ld	r21, Z+
     6aa:	8f 01       	movw	r16, r30
     6ac:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     6bc:	6b 01       	movw	r12, r22
     6be:	7c 01       	movw	r14, r24
     6c0:	21 97       	sbiw	r28, 0x01	; 1
     6c2:	20 97       	sbiw	r28, 0x00	; 0
     6c4:	39 f7       	brne	.-50     	; 0x694 <_Z18Vector_Dot_ProductPfS_+0x24>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	bf 90       	pop	r11
     6d8:	af 90       	pop	r10
     6da:	08 95       	ret

000006dc <_Z20Vector_Cross_ProductPfS_S_>:
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	5c 01       	movw	r10, r24
     6f2:	eb 01       	movw	r28, r22
     6f4:	8a 01       	movw	r16, r20
     6f6:	fa 01       	movw	r30, r20
     6f8:	20 85       	ldd	r18, Z+8	; 0x08
     6fa:	31 85       	ldd	r19, Z+9	; 0x09
     6fc:	42 85       	ldd	r20, Z+10	; 0x0a
     6fe:	53 85       	ldd	r21, Z+11	; 0x0b
     700:	6c 81       	ldd	r22, Y+4	; 0x04
     702:	7d 81       	ldd	r23, Y+5	; 0x05
     704:	8e 81       	ldd	r24, Y+6	; 0x06
     706:	9f 81       	ldd	r25, Y+7	; 0x07
     708:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
     710:	f8 01       	movw	r30, r16
     712:	24 81       	ldd	r18, Z+4	; 0x04
     714:	35 81       	ldd	r19, Z+5	; 0x05
     716:	46 81       	ldd	r20, Z+6	; 0x06
     718:	57 81       	ldd	r21, Z+7	; 0x07
     71a:	68 85       	ldd	r22, Y+8	; 0x08
     71c:	79 85       	ldd	r23, Y+9	; 0x09
     71e:	8a 85       	ldd	r24, Y+10	; 0x0a
     720:	9b 85       	ldd	r25, Y+11	; 0x0b
     722:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     732:	f5 01       	movw	r30, r10
     734:	60 83       	st	Z, r22
     736:	71 83       	std	Z+1, r23	; 0x01
     738:	82 83       	std	Z+2, r24	; 0x02
     73a:	93 83       	std	Z+3, r25	; 0x03
     73c:	f8 01       	movw	r30, r16
     73e:	20 81       	ld	r18, Z
     740:	31 81       	ldd	r19, Z+1	; 0x01
     742:	42 81       	ldd	r20, Z+2	; 0x02
     744:	53 81       	ldd	r21, Z+3	; 0x03
     746:	68 85       	ldd	r22, Y+8	; 0x08
     748:	79 85       	ldd	r23, Y+9	; 0x09
     74a:	8a 85       	ldd	r24, Y+10	; 0x0a
     74c:	9b 85       	ldd	r25, Y+11	; 0x0b
     74e:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
     756:	f8 01       	movw	r30, r16
     758:	20 85       	ldd	r18, Z+8	; 0x08
     75a:	31 85       	ldd	r19, Z+9	; 0x09
     75c:	42 85       	ldd	r20, Z+10	; 0x0a
     75e:	53 85       	ldd	r21, Z+11	; 0x0b
     760:	68 81       	ld	r22, Y
     762:	79 81       	ldd	r23, Y+1	; 0x01
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     778:	f5 01       	movw	r30, r10
     77a:	64 83       	std	Z+4, r22	; 0x04
     77c:	75 83       	std	Z+5, r23	; 0x05
     77e:	86 83       	std	Z+6, r24	; 0x06
     780:	97 83       	std	Z+7, r25	; 0x07
     782:	f8 01       	movw	r30, r16
     784:	24 81       	ldd	r18, Z+4	; 0x04
     786:	35 81       	ldd	r19, Z+5	; 0x05
     788:	46 81       	ldd	r20, Z+6	; 0x06
     78a:	57 81       	ldd	r21, Z+7	; 0x07
     78c:	68 81       	ld	r22, Y
     78e:	79 81       	ldd	r23, Y+1	; 0x01
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	9b 81       	ldd	r25, Y+3	; 0x03
     794:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     798:	6b 01       	movw	r12, r22
     79a:	7c 01       	movw	r14, r24
     79c:	f8 01       	movw	r30, r16
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	42 81       	ldd	r20, Z+2	; 0x02
     7a4:	53 81       	ldd	r21, Z+3	; 0x03
     7a6:	6c 81       	ldd	r22, Y+4	; 0x04
     7a8:	7d 81       	ldd	r23, Y+5	; 0x05
     7aa:	8e 81       	ldd	r24, Y+6	; 0x06
     7ac:	9f 81       	ldd	r25, Y+7	; 0x07
     7ae:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     7be:	f5 01       	movw	r30, r10
     7c0:	60 87       	std	Z+8, r22	; 0x08
     7c2:	71 87       	std	Z+9, r23	; 0x09
     7c4:	82 87       	std	Z+10, r24	; 0x0a
     7c6:	93 87       	std	Z+11, r25	; 0x0b
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	08 95       	ret

000007de <_Z12Vector_ScalePfS_f>:
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	49 01       	movw	r8, r18
     7f4:	5a 01       	movw	r10, r20
     7f6:	06 2f       	mov	r16, r22
     7f8:	17 2f       	mov	r17, r23
     7fa:	7c 01       	movw	r14, r24
     7fc:	c0 e0       	ldi	r28, 0x00	; 0
     7fe:	d0 e0       	ldi	r29, 0x00	; 0
     800:	f8 01       	movw	r30, r16
     802:	61 91       	ld	r22, Z+
     804:	71 91       	ld	r23, Z+
     806:	81 91       	ld	r24, Z+
     808:	91 91       	ld	r25, Z+
     80a:	8f 01       	movw	r16, r30
     80c:	a5 01       	movw	r20, r10
     80e:	94 01       	movw	r18, r8
     810:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     814:	f7 01       	movw	r30, r14
     816:	61 93       	st	Z+, r22
     818:	71 93       	st	Z+, r23
     81a:	81 93       	st	Z+, r24
     81c:	91 93       	st	Z+, r25
     81e:	7f 01       	movw	r14, r30
     820:	21 96       	adiw	r28, 0x01	; 1
     822:	c3 30       	cpi	r28, 0x03	; 3
     824:	d1 05       	cpc	r29, r1
     826:	61 f7       	brne	.-40     	; 0x800 <_Z12Vector_ScalePfS_f+0x22>
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	08 95       	ret

0000083e <_Z10Vector_AddPfS_S_>:
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	e6 2e       	mov	r14, r22
     850:	f7 2e       	mov	r15, r23
     852:	04 2f       	mov	r16, r20
     854:	15 2f       	mov	r17, r21
     856:	6c 01       	movw	r12, r24
     858:	c0 e0       	ldi	r28, 0x00	; 0
     85a:	d0 e0       	ldi	r29, 0x00	; 0
     85c:	f7 01       	movw	r30, r14
     85e:	61 91       	ld	r22, Z+
     860:	71 91       	ld	r23, Z+
     862:	81 91       	ld	r24, Z+
     864:	91 91       	ld	r25, Z+
     866:	7f 01       	movw	r14, r30
     868:	f8 01       	movw	r30, r16
     86a:	21 91       	ld	r18, Z+
     86c:	31 91       	ld	r19, Z+
     86e:	41 91       	ld	r20, Z+
     870:	51 91       	ld	r21, Z+
     872:	8f 01       	movw	r16, r30
     874:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     878:	f6 01       	movw	r30, r12
     87a:	61 93       	st	Z+, r22
     87c:	71 93       	st	Z+, r23
     87e:	81 93       	st	Z+, r24
     880:	91 93       	st	Z+, r25
     882:	6f 01       	movw	r12, r30
     884:	21 96       	adiw	r28, 0x01	; 1
     886:	c3 30       	cpi	r28, 0x03	; 3
     888:	d1 05       	cpc	r29, r1
     88a:	41 f7       	brne	.-48     	; 0x85c <_Z10Vector_AddPfS_S_+0x1e>
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	08 95       	ret

0000089e <_Z8I2C_Initv>:
     89e:	86 e1       	ldi	r24, 0x16	; 22
     8a0:	9f e0       	ldi	r25, 0x0F	; 15
     8a2:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <_ZN7TwoWire5beginEv>
     8a6:	08 95       	ret

000008a8 <_Z9Gyro_Initv>:
     8a8:	42 e0       	ldi	r20, 0x02	; 2
     8aa:	63 e0       	ldi	r22, 0x03	; 3
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE>
     8b4:	80 e2       	ldi	r24, 0x20	; 32
     8b6:	97 e0       	ldi	r25, 0x07	; 7
     8b8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZN3L3G13enableDefaultEv>
     8bc:	40 e2       	ldi	r20, 0x20	; 32
     8be:	63 e2       	ldi	r22, 0x23	; 35
     8c0:	80 e2       	ldi	r24, 0x20	; 32
     8c2:	97 e0       	ldi	r25, 0x07	; 7
     8c4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN3L3G8writeRegEhh>
     8c8:	4f e0       	ldi	r20, 0x0F	; 15
     8ca:	60 e2       	ldi	r22, 0x20	; 32
     8cc:	80 e2       	ldi	r24, 0x20	; 32
     8ce:	97 e0       	ldi	r25, 0x07	; 7
     8d0:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <_ZN3L3G8writeRegEhh>
     8d4:	08 95       	ret

000008d6 <_Z9Read_Gyrov>:
     8d6:	80 e2       	ldi	r24, 0x20	; 32
     8d8:	97 e0       	ldi	r25, 0x07	; 7
     8da:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN3L3G4readEv>
     8de:	40 91 20 07 	lds	r20, 0x0720
     8e2:	50 91 21 07 	lds	r21, 0x0721
     8e6:	50 93 ed 07 	sts	0x07ED, r21
     8ea:	40 93 ec 07 	sts	0x07EC, r20
     8ee:	20 91 22 07 	lds	r18, 0x0722
     8f2:	30 91 23 07 	lds	r19, 0x0723
     8f6:	30 93 ef 07 	sts	0x07EF, r19
     8fa:	20 93 ee 07 	sts	0x07EE, r18
     8fe:	80 91 24 07 	lds	r24, 0x0724
     902:	90 91 25 07 	lds	r25, 0x0725
     906:	90 93 f1 07 	sts	0x07F1, r25
     90a:	80 93 f0 07 	sts	0x07F0, r24
     90e:	60 91 e0 07 	lds	r22, 0x07E0
     912:	70 91 e1 07 	lds	r23, 0x07E1
     916:	46 1b       	sub	r20, r22
     918:	57 0b       	sbc	r21, r23
     91a:	e0 91 4c 02 	lds	r30, 0x024C
     91e:	f0 91 4d 02 	lds	r31, 0x024D
     922:	e4 9f       	mul	r30, r20
     924:	b0 01       	movw	r22, r0
     926:	e5 9f       	mul	r30, r21
     928:	70 0d       	add	r23, r0
     92a:	f4 9f       	mul	r31, r20
     92c:	70 0d       	add	r23, r0
     92e:	11 24       	eor	r1, r1
     930:	70 93 df 07 	sts	0x07DF, r23
     934:	60 93 de 07 	sts	0x07DE, r22
     938:	40 91 e2 07 	lds	r20, 0x07E2
     93c:	50 91 e3 07 	lds	r21, 0x07E3
     940:	24 1b       	sub	r18, r20
     942:	35 0b       	sbc	r19, r21
     944:	60 91 4e 02 	lds	r22, 0x024E
     948:	70 91 4f 02 	lds	r23, 0x024F
     94c:	62 9f       	mul	r22, r18
     94e:	a0 01       	movw	r20, r0
     950:	63 9f       	mul	r22, r19
     952:	50 0d       	add	r21, r0
     954:	72 9f       	mul	r23, r18
     956:	50 0d       	add	r21, r0
     958:	11 24       	eor	r1, r1
     95a:	50 93 dd 07 	sts	0x07DD, r21
     95e:	40 93 dc 07 	sts	0x07DC, r20
     962:	20 91 e4 07 	lds	r18, 0x07E4
     966:	30 91 e5 07 	lds	r19, 0x07E5
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	40 91 50 02 	lds	r20, 0x0250
     972:	50 91 51 02 	lds	r21, 0x0251
     976:	48 9f       	mul	r20, r24
     978:	90 01       	movw	r18, r0
     97a:	49 9f       	mul	r20, r25
     97c:	30 0d       	add	r19, r0
     97e:	58 9f       	mul	r21, r24
     980:	30 0d       	add	r19, r0
     982:	11 24       	eor	r1, r1
     984:	30 93 db 07 	sts	0x07DB, r19
     988:	20 93 da 07 	sts	0x07DA, r18
     98c:	08 95       	ret

0000098e <_Z10Accel_Initv>:
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	64 e0       	ldi	r22, 0x04	; 4
     992:	8a ef       	ldi	r24, 0xFA	; 250
     994:	96 e0       	ldi	r25, 0x06	; 6
     996:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>
     99a:	8a ef       	ldi	r24, 0xFA	; 250
     99c:	96 e0       	ldi	r25, 0x06	; 6
     99e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN6LSM30313enableDefaultEv>
     9a2:	80 91 13 07 	lds	r24, 0x0713
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	49 f0       	breq	.+18     	; 0x9bc <_Z10Accel_Initv+0x2e>
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	71 f4       	brne	.+28     	; 0x9ca <_Z10Accel_Initv+0x3c>
     9ae:	48 e1       	ldi	r20, 0x18	; 24
     9b0:	61 e2       	ldi	r22, 0x21	; 33
     9b2:	8a ef       	ldi	r24, 0xFA	; 250
     9b4:	96 e0       	ldi	r25, 0x06	; 6
     9b6:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <_ZN6LSM3038writeRegEhh>
     9ba:	08 95       	ret
     9bc:	48 e2       	ldi	r20, 0x28	; 40
     9be:	63 e2       	ldi	r22, 0x23	; 35
     9c0:	8a ef       	ldi	r24, 0xFA	; 250
     9c2:	96 e0       	ldi	r25, 0x06	; 6
     9c4:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <_ZN6LSM3038writeRegEhh>
     9c8:	08 95       	ret
     9ca:	40 e3       	ldi	r20, 0x30	; 48
     9cc:	63 e2       	ldi	r22, 0x23	; 35
     9ce:	8a ef       	ldi	r24, 0xFA	; 250
     9d0:	96 e0       	ldi	r25, 0x06	; 6
     9d2:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <_ZN6LSM3038writeRegEhh>
     9d6:	08 95       	ret

000009d8 <_Z10Read_Accelv>:
     9d8:	8a ef       	ldi	r24, 0xFA	; 250
     9da:	96 e0       	ldi	r25, 0x06	; 6
     9dc:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN6LSM3037readAccEv>
     9e0:	40 91 fa 06 	lds	r20, 0x06FA
     9e4:	50 91 fb 06 	lds	r21, 0x06FB
     9e8:	55 95       	asr	r21
     9ea:	47 95       	ror	r20
     9ec:	55 95       	asr	r21
     9ee:	47 95       	ror	r20
     9f0:	55 95       	asr	r21
     9f2:	47 95       	ror	r20
     9f4:	55 95       	asr	r21
     9f6:	47 95       	ror	r20
     9f8:	50 93 f3 07 	sts	0x07F3, r21
     9fc:	40 93 f2 07 	sts	0x07F2, r20
     a00:	20 91 fc 06 	lds	r18, 0x06FC
     a04:	30 91 fd 06 	lds	r19, 0x06FD
     a08:	35 95       	asr	r19
     a0a:	27 95       	ror	r18
     a0c:	35 95       	asr	r19
     a0e:	27 95       	ror	r18
     a10:	35 95       	asr	r19
     a12:	27 95       	ror	r18
     a14:	35 95       	asr	r19
     a16:	27 95       	ror	r18
     a18:	30 93 f5 07 	sts	0x07F5, r19
     a1c:	20 93 f4 07 	sts	0x07F4, r18
     a20:	80 91 fe 06 	lds	r24, 0x06FE
     a24:	90 91 ff 06 	lds	r25, 0x06FF
     a28:	95 95       	asr	r25
     a2a:	87 95       	ror	r24
     a2c:	95 95       	asr	r25
     a2e:	87 95       	ror	r24
     a30:	95 95       	asr	r25
     a32:	87 95       	ror	r24
     a34:	95 95       	asr	r25
     a36:	87 95       	ror	r24
     a38:	90 93 f7 07 	sts	0x07F7, r25
     a3c:	80 93 f6 07 	sts	0x07F6, r24
     a40:	60 91 e6 07 	lds	r22, 0x07E6
     a44:	70 91 e7 07 	lds	r23, 0x07E7
     a48:	46 1b       	sub	r20, r22
     a4a:	57 0b       	sbc	r21, r23
     a4c:	e0 91 52 02 	lds	r30, 0x0252
     a50:	f0 91 53 02 	lds	r31, 0x0253
     a54:	e4 9f       	mul	r30, r20
     a56:	b0 01       	movw	r22, r0
     a58:	e5 9f       	mul	r30, r21
     a5a:	70 0d       	add	r23, r0
     a5c:	f4 9f       	mul	r31, r20
     a5e:	70 0d       	add	r23, r0
     a60:	11 24       	eor	r1, r1
     a62:	70 93 d9 07 	sts	0x07D9, r23
     a66:	60 93 d8 07 	sts	0x07D8, r22
     a6a:	40 91 e8 07 	lds	r20, 0x07E8
     a6e:	50 91 e9 07 	lds	r21, 0x07E9
     a72:	24 1b       	sub	r18, r20
     a74:	35 0b       	sbc	r19, r21
     a76:	60 91 54 02 	lds	r22, 0x0254
     a7a:	70 91 55 02 	lds	r23, 0x0255
     a7e:	62 9f       	mul	r22, r18
     a80:	a0 01       	movw	r20, r0
     a82:	63 9f       	mul	r22, r19
     a84:	50 0d       	add	r21, r0
     a86:	72 9f       	mul	r23, r18
     a88:	50 0d       	add	r21, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	50 93 d7 07 	sts	0x07D7, r21
     a90:	40 93 d6 07 	sts	0x07D6, r20
     a94:	20 91 ea 07 	lds	r18, 0x07EA
     a98:	30 91 eb 07 	lds	r19, 0x07EB
     a9c:	82 1b       	sub	r24, r18
     a9e:	93 0b       	sbc	r25, r19
     aa0:	40 91 56 02 	lds	r20, 0x0256
     aa4:	50 91 57 02 	lds	r21, 0x0257
     aa8:	48 9f       	mul	r20, r24
     aaa:	90 01       	movw	r18, r0
     aac:	49 9f       	mul	r20, r25
     aae:	30 0d       	add	r19, r0
     ab0:	58 9f       	mul	r21, r24
     ab2:	30 0d       	add	r19, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	30 93 d5 07 	sts	0x07D5, r19
     aba:	20 93 d4 07 	sts	0x07D4, r18
     abe:	08 95       	ret

00000ac0 <_Z12Read_Compassv>:
     ac0:	8a ef       	ldi	r24, 0xFA	; 250
     ac2:	96 e0       	ldi	r25, 0x06	; 6
     ac4:	0e 94 b3 14 	call	0x2966	; 0x2966 <_ZN6LSM3037readMagEv>
     ac8:	40 91 58 02 	lds	r20, 0x0258
     acc:	50 91 59 02 	lds	r21, 0x0259
     ad0:	20 91 00 07 	lds	r18, 0x0700
     ad4:	30 91 01 07 	lds	r19, 0x0701
     ad8:	42 9f       	mul	r20, r18
     ada:	c0 01       	movw	r24, r0
     adc:	43 9f       	mul	r20, r19
     ade:	90 0d       	add	r25, r0
     ae0:	52 9f       	mul	r21, r18
     ae2:	90 0d       	add	r25, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	90 93 d3 07 	sts	0x07D3, r25
     aea:	80 93 d2 07 	sts	0x07D2, r24
     aee:	40 91 5a 02 	lds	r20, 0x025A
     af2:	50 91 5b 02 	lds	r21, 0x025B
     af6:	20 91 02 07 	lds	r18, 0x0702
     afa:	30 91 03 07 	lds	r19, 0x0703
     afe:	42 9f       	mul	r20, r18
     b00:	c0 01       	movw	r24, r0
     b02:	43 9f       	mul	r20, r19
     b04:	90 0d       	add	r25, r0
     b06:	52 9f       	mul	r21, r18
     b08:	90 0d       	add	r25, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	90 93 d1 07 	sts	0x07D1, r25
     b10:	80 93 d0 07 	sts	0x07D0, r24
     b14:	40 91 5c 02 	lds	r20, 0x025C
     b18:	50 91 5d 02 	lds	r21, 0x025D
     b1c:	20 91 04 07 	lds	r18, 0x0704
     b20:	30 91 05 07 	lds	r19, 0x0705
     b24:	42 9f       	mul	r20, r18
     b26:	c0 01       	movw	r24, r0
     b28:	43 9f       	mul	r20, r19
     b2a:	90 0d       	add	r25, r0
     b2c:	52 9f       	mul	r21, r18
     b2e:	90 0d       	add	r25, r0
     b30:	11 24       	eor	r1, r1
     b32:	90 93 cf 07 	sts	0x07CF, r25
     b36:	80 93 ce 07 	sts	0x07CE, r24
     b3a:	08 95       	ret

00000b3c <_Z9Normalizev>:
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	a4 97       	sbiw	r28, 0x24	; 36
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	60 e3       	ldi	r22, 0x30	; 48
     b5a:	72 e0       	ldi	r23, 0x02	; 2
     b5c:	84 e2       	ldi	r24, 0x24	; 36
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	87 dd       	rcall	.-1266   	; 0x670 <_Z18Vector_Dot_ProductPfS_>
     b62:	90 58       	subi	r25, 0x80	; 128
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	60 e3       	ldi	r22, 0x30	; 48
     b7a:	72 e0       	ldi	r23, 0x02	; 2
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	2e de       	rcall	.-932    	; 0x7de <_Z12Vector_ScalePfS_f>
     b82:	a7 01       	movw	r20, r14
     b84:	96 01       	movw	r18, r12
     b86:	64 e2       	ldi	r22, 0x24	; 36
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	ce 01       	movw	r24, r28
     b8c:	0d 96       	adiw	r24, 0x0d	; 13
     b8e:	27 de       	rcall	.-946    	; 0x7de <_Z12Vector_ScalePfS_f>
     b90:	44 e2       	ldi	r20, 0x24	; 36
     b92:	52 e0       	ldi	r21, 0x02	; 2
     b94:	be 01       	movw	r22, r28
     b96:	6f 5f       	subi	r22, 0xFF	; 255
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	cb 01       	movw	r24, r22
     b9c:	50 de       	rcall	.-864    	; 0x83e <_Z10Vector_AddPfS_S_>
     b9e:	40 e3       	ldi	r20, 0x30	; 48
     ba0:	52 e0       	ldi	r21, 0x02	; 2
     ba2:	be 01       	movw	r22, r28
     ba4:	63 5f       	subi	r22, 0xF3	; 243
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	cb 01       	movw	r24, r22
     baa:	49 de       	rcall	.-878    	; 0x83e <_Z10Vector_AddPfS_S_>
     bac:	ae 01       	movw	r20, r28
     bae:	43 5f       	subi	r20, 0xF3	; 243
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	be 01       	movw	r22, r28
     bb4:	6f 5f       	subi	r22, 0xFF	; 255
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	ce 01       	movw	r24, r28
     bba:	49 96       	adiw	r24, 0x19	; 25
     bbc:	8f dd       	rcall	.-1250   	; 0x6dc <_Z20Vector_Cross_ProductPfS_S_>
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	cb 01       	movw	r24, r22
     bc6:	54 dd       	rcall	.-1368   	; 0x670 <_Z18Vector_Dot_ProductPfS_>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	90 e4       	ldi	r25, 0x40	; 64
     bd4:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	84 e2       	ldi	r24, 0x24	; 36
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	f5 dd       	rcall	.-1046   	; 0x7de <_Z12Vector_ScalePfS_f>
     bf4:	be 01       	movw	r22, r28
     bf6:	63 5f       	subi	r22, 0xF3	; 243
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	cb 01       	movw	r24, r22
     bfc:	39 dd       	rcall	.-1422   	; 0x670 <_Z18Vector_Dot_ProductPfS_>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	90 e4       	ldi	r25, 0x40	; 64
     c0a:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	be 01       	movw	r22, r28
     c20:	63 5f       	subi	r22, 0xF3	; 243
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	80 e3       	ldi	r24, 0x30	; 48
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	da dd       	rcall	.-1100   	; 0x7de <_Z12Vector_ScalePfS_f>
     c2a:	be 01       	movw	r22, r28
     c2c:	67 5e       	subi	r22, 0xE7	; 231
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	cb 01       	movw	r24, r22
     c32:	1e dd       	rcall	.-1476   	; 0x670 <_Z18Vector_Dot_ProductPfS_>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e4       	ldi	r24, 0x40	; 64
     c3e:	90 e4       	ldi	r25, 0x40	; 64
     c40:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	be 01       	movw	r22, r28
     c56:	67 5e       	subi	r22, 0xE7	; 231
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	8c e3       	ldi	r24, 0x3C	; 60
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	bf dd       	rcall	.-1154   	; 0x7de <_Z12Vector_ScalePfS_f>
     c60:	a4 96       	adiw	r28, 0x24	; 36
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <_Z16Drift_correctionv>:
     c7a:	4f 92       	push	r4
     c7c:	5f 92       	push	r5
     c7e:	6f 92       	push	r6
     c80:	7f 92       	push	r7
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	60 91 b2 07 	lds	r22, 0x07B2
     c96:	70 91 b3 07 	lds	r23, 0x07B3
     c9a:	80 91 b4 07 	lds	r24, 0x07B4
     c9e:	90 91 b5 07 	lds	r25, 0x07B5
     ca2:	80 90 b6 07 	lds	r8, 0x07B6
     ca6:	90 90 b7 07 	lds	r9, 0x07B7
     caa:	a0 90 b8 07 	lds	r10, 0x07B8
     cae:	b0 90 b9 07 	lds	r11, 0x07B9
     cb2:	c0 90 ba 07 	lds	r12, 0x07BA
     cb6:	d0 90 bb 07 	lds	r13, 0x07BB
     cba:	e0 90 bc 07 	lds	r14, 0x07BC
     cbe:	f0 90 bd 07 	lds	r15, 0x07BD
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     cca:	2b 01       	movw	r4, r22
     ccc:	3c 01       	movw	r6, r24
     cce:	a5 01       	movw	r20, r10
     cd0:	94 01       	movw	r18, r8
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	c3 01       	movw	r24, r6
     ce0:	b2 01       	movw	r22, r4
     ce2:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
     cea:	a7 01       	movw	r20, r14
     cec:	96 01       	movw	r18, r12
     cee:	c7 01       	movw	r24, r14
     cf0:	b6 01       	movw	r22, r12
     cf2:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     cf6:	9b 01       	movw	r18, r22
     cf8:	ac 01       	movw	r20, r24
     cfa:	c5 01       	movw	r24, r10
     cfc:	b4 01       	movw	r22, r8
     cfe:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     d02:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <sqrt>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5b e3       	ldi	r21, 0x3B	; 59
     d0e:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	9f e3       	ldi	r25, 0x3F	; 63
     d1e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     d22:	6b 01       	movw	r12, r22
     d24:	7c 01       	movw	r14, r24
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a9 01       	movw	r20, r18
     d2c:	0e 94 36 22 	call	0x446c	; 0x446c <__gesf2>
     d30:	18 16       	cp	r1, r24
     d32:	b4 f4       	brge	.+44     	; 0xd60 <_Z16Drift_correctionv+0xe6>
     d34:	a7 01       	movw	r20, r14
     d36:	96 01       	movw	r18, r12
     d38:	c7 01       	movw	r24, r14
     d3a:	b6 01       	movw	r22, r12
     d3c:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     d40:	9b 01       	movw	r18, r22
     d42:	ac 01       	movw	r20, r24
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	9f e3       	ldi	r25, 0x3F	; 63
     d4c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	a9 01       	movw	r20, r18
     d56:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__cmpsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	04 f5       	brge	.+64     	; 0xd9e <_Z16Drift_correctionv+0x124>
     d5e:	5a c0       	rjmp	.+180    	; 0xe14 <_Z16Drift_correctionv+0x19a>
     d60:	a7 01       	movw	r20, r14
     d62:	96 01       	movw	r18, r12
     d64:	c7 01       	movw	r24, r14
     d66:	b6 01       	movw	r22, r12
     d68:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     d78:	4b 01       	movw	r8, r22
     d7a:	5c 01       	movw	r10, r24
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	a9 01       	movw	r20, r18
     d82:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__cmpsf2>
     d86:	88 23       	and	r24, r24
     d88:	0c f4       	brge	.+2      	; 0xd8c <_Z16Drift_correctionv+0x112>
     d8a:	48 c0       	rjmp	.+144    	; 0xe1c <_Z16Drift_correctionv+0x1a2>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	a9 01       	movw	r20, r18
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	0e 94 36 22 	call	0x446c	; 0x446c <__gesf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	bc f4       	brge	.+46     	; 0xdcc <_Z16Drift_correctionv+0x152>
     d9e:	a7 01       	movw	r20, r14
     da0:	96 01       	movw	r18, r12
     da2:	c7 01       	movw	r24, r14
     da4:	b6 01       	movw	r22, r12
     da6:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e8       	ldi	r24, 0x80	; 128
     db4:	9f e3       	ldi	r25, 0x3F	; 63
     db6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 36 22 	call	0x446c	; 0x446c <__gesf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	6c f1       	brlt	.+90     	; 0xe24 <_Z16Drift_correctionv+0x1aa>
     dca:	13 c0       	rjmp	.+38     	; 0xdf2 <_Z16Drift_correctionv+0x178>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e8       	ldi	r20, 0x80	; 128
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	c5 01       	movw	r24, r10
     dd6:	b4 01       	movw	r22, r8
     dd8:	0e 94 36 22 	call	0x446c	; 0x446c <__gesf2>
     ddc:	18 16       	cp	r1, r24
     dde:	5c f1       	brlt	.+86     	; 0xe36 <_Z16Drift_correctionv+0x1bc>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0e 94 36 22 	call	0x446c	; 0x446c <__gesf2>
     dee:	18 16       	cp	r1, r24
     df0:	54 f5       	brge	.+84     	; 0xe46 <_Z16Drift_correctionv+0x1cc>
     df2:	a7 01       	movw	r20, r14
     df4:	96 01       	movw	r18, r12
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	9f e3       	ldi	r25, 0x3F	; 63
     e0a:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
     e12:	19 c0       	rjmp	.+50     	; 0xe46 <_Z16Drift_correctionv+0x1cc>
     e14:	81 2c       	mov	r8, r1
     e16:	91 2c       	mov	r9, r1
     e18:	54 01       	movw	r10, r8
     e1a:	15 c0       	rjmp	.+42     	; 0xe46 <_Z16Drift_correctionv+0x1cc>
     e1c:	81 2c       	mov	r8, r1
     e1e:	91 2c       	mov	r9, r1
     e20:	54 01       	movw	r10, r8
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <_Z16Drift_correctionv+0x1cc>
     e24:	0f 2e       	mov	r0, r31
     e26:	81 2c       	mov	r8, r1
     e28:	91 2c       	mov	r9, r1
     e2a:	f0 e8       	ldi	r31, 0x80	; 128
     e2c:	af 2e       	mov	r10, r31
     e2e:	ff e3       	ldi	r31, 0x3F	; 63
     e30:	bf 2e       	mov	r11, r31
     e32:	f0 2d       	mov	r31, r0
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <_Z16Drift_correctionv+0x1cc>
     e36:	0f 2e       	mov	r0, r31
     e38:	81 2c       	mov	r8, r1
     e3a:	91 2c       	mov	r9, r1
     e3c:	f0 e8       	ldi	r31, 0x80	; 128
     e3e:	af 2e       	mov	r10, r31
     e40:	ff e3       	ldi	r31, 0x3F	; 63
     e42:	bf 2e       	mov	r11, r31
     e44:	f0 2d       	mov	r31, r0
     e46:	4c e3       	ldi	r20, 0x3C	; 60
     e48:	52 e0       	ldi	r21, 0x02	; 2
     e4a:	62 eb       	ldi	r22, 0xB2	; 178
     e4c:	77 e0       	ldi	r23, 0x07	; 7
     e4e:	8e e5       	ldi	r24, 0x5E	; 94
     e50:	97 e0       	ldi	r25, 0x07	; 7
     e52:	44 dc       	rcall	.-1912   	; 0x6dc <_Z20Vector_Cross_ProductPfS_S_>
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	37 ed       	ldi	r19, 0xD7	; 215
     e58:	43 ea       	ldi	r20, 0xA3	; 163
     e5a:	5c e3       	ldi	r21, 0x3C	; 60
     e5c:	c5 01       	movw	r24, r10
     e5e:	b4 01       	movw	r22, r8
     e60:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	6e e5       	ldi	r22, 0x5E	; 94
     e6a:	77 e0       	ldi	r23, 0x07	; 7
     e6c:	8e e8       	ldi	r24, 0x8E	; 142
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	b6 dc       	rcall	.-1684   	; 0x7de <_Z12Vector_ScalePfS_f>
     e72:	2c ea       	ldi	r18, 0xAC	; 172
     e74:	35 ec       	ldi	r19, 0xC5	; 197
     e76:	47 ea       	ldi	r20, 0xA7	; 167
     e78:	57 e3       	ldi	r21, 0x37	; 55
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	6e e5       	ldi	r22, 0x5E	; 94
     e88:	77 e0       	ldi	r23, 0x07	; 7
     e8a:	8a ee       	ldi	r24, 0xEA	; 234
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	a7 dc       	rcall	.-1714   	; 0x7de <_Z12Vector_ScalePfS_f>
     e90:	4a ee       	ldi	r20, 0xEA	; 234
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	62 e8       	ldi	r22, 0x82	; 130
     e96:	77 e0       	ldi	r23, 0x07	; 7
     e98:	cb 01       	movw	r24, r22
     e9a:	d1 dc       	rcall	.-1630   	; 0x83e <_Z10Vector_AddPfS_S_>
     e9c:	c0 90 be 07 	lds	r12, 0x07BE
     ea0:	d0 90 bf 07 	lds	r13, 0x07BF
     ea4:	e0 90 c0 07 	lds	r14, 0x07C0
     ea8:	f0 90 c1 07 	lds	r15, 0x07C1
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	0e 94 5e 20 	call	0x40bc	; 0x40bc <cos>
     eb4:	4b 01       	movw	r8, r22
     eb6:	5c 01       	movw	r10, r24
     eb8:	c7 01       	movw	r24, r14
     eba:	b6 01       	movw	r22, r12
     ebc:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <sin>
     ec0:	20 91 24 02 	lds	r18, 0x0224
     ec4:	30 91 25 02 	lds	r19, 0x0225
     ec8:	40 91 26 02 	lds	r20, 0x0226
     ecc:	50 91 27 02 	lds	r21, 0x0227
     ed0:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     ed4:	6b 01       	movw	r12, r22
     ed6:	7c 01       	movw	r14, r24
     ed8:	20 91 30 02 	lds	r18, 0x0230
     edc:	30 91 31 02 	lds	r19, 0x0231
     ee0:	40 91 32 02 	lds	r20, 0x0232
     ee4:	50 91 33 02 	lds	r21, 0x0233
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	c7 01       	movw	r24, r14
     ef6:	b6 01       	movw	r22, r12
     ef8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	6c e3       	ldi	r22, 0x3C	; 60
     f02:	72 e0       	ldi	r23, 0x02	; 2
     f04:	82 e5       	ldi	r24, 0x52	; 82
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	6a dc       	rcall	.-1836   	; 0x7de <_Z12Vector_ScalePfS_f>
     f0a:	2a e9       	ldi	r18, 0x9A	; 154
     f0c:	39 e9       	ldi	r19, 0x99	; 153
     f0e:	49 e9       	ldi	r20, 0x99	; 153
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	62 e5       	ldi	r22, 0x52	; 82
     f14:	77 e0       	ldi	r23, 0x07	; 7
     f16:	8e ed       	ldi	r24, 0xDE	; 222
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	61 dc       	rcall	.-1854   	; 0x7de <_Z12Vector_ScalePfS_f>
     f1c:	4e ed       	ldi	r20, 0xDE	; 222
     f1e:	52 e0       	ldi	r21, 0x02	; 2
     f20:	6e e8       	ldi	r22, 0x8E	; 142
     f22:	77 e0       	ldi	r23, 0x07	; 7
     f24:	cb 01       	movw	r24, r22
     f26:	8b dc       	rcall	.-1770   	; 0x83e <_Z10Vector_AddPfS_S_>
     f28:	2c ea       	ldi	r18, 0xAC	; 172
     f2a:	35 ec       	ldi	r19, 0xC5	; 197
     f2c:	47 ea       	ldi	r20, 0xA7	; 167
     f2e:	57 e3       	ldi	r21, 0x37	; 55
     f30:	62 e5       	ldi	r22, 0x52	; 82
     f32:	77 e0       	ldi	r23, 0x07	; 7
     f34:	8a ee       	ldi	r24, 0xEA	; 234
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	52 dc       	rcall	.-1884   	; 0x7de <_Z12Vector_ScalePfS_f>
     f3a:	4a ee       	ldi	r20, 0xEA	; 234
     f3c:	52 e0       	ldi	r21, 0x02	; 2
     f3e:	62 e8       	ldi	r22, 0x82	; 130
     f40:	77 e0       	ldi	r23, 0x07	; 7
     f42:	cb 01       	movw	r24, r22
     f44:	7c dc       	rcall	.-1800   	; 0x83e <_Z10Vector_AddPfS_S_>
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	7f 90       	pop	r7
     f58:	6f 90       	pop	r6
     f5a:	5f 90       	pop	r5
     f5c:	4f 90       	pop	r4
     f5e:	08 95       	ret

00000f60 <_Z13Matrix_updatev>:
     f60:	4f 92       	push	r4
     f62:	5f 92       	push	r5
     f64:	6f 92       	push	r6
     f66:	7f 92       	push	r7
     f68:	8f 92       	push	r8
     f6a:	9f 92       	push	r9
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_Z13Matrix_updatev+0x22>
     f82:	1f 92       	push	r1
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	60 91 de 07 	lds	r22, 0x07DE
     f8c:	70 91 df 07 	lds	r23, 0x07DF
     f90:	88 27       	eor	r24, r24
     f92:	77 fd       	sbrc	r23, 7
     f94:	80 95       	com	r24
     f96:	98 2f       	mov	r25, r24
     f98:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
     f9c:	29 e7       	ldi	r18, 0x79	; 121
     f9e:	32 e2       	ldi	r19, 0x22	; 34
     fa0:	40 ea       	ldi	r20, 0xA0	; 160
     fa2:	5a e3       	ldi	r21, 0x3A	; 58
     fa4:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     fa8:	60 93 a6 07 	sts	0x07A6, r22
     fac:	70 93 a7 07 	sts	0x07A7, r23
     fb0:	80 93 a8 07 	sts	0x07A8, r24
     fb4:	90 93 a9 07 	sts	0x07A9, r25
     fb8:	60 91 dc 07 	lds	r22, 0x07DC
     fbc:	70 91 dd 07 	lds	r23, 0x07DD
     fc0:	88 27       	eor	r24, r24
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
     fcc:	29 e7       	ldi	r18, 0x79	; 121
     fce:	32 e2       	ldi	r19, 0x22	; 34
     fd0:	40 ea       	ldi	r20, 0xA0	; 160
     fd2:	5a e3       	ldi	r21, 0x3A	; 58
     fd4:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     fd8:	60 93 aa 07 	sts	0x07AA, r22
     fdc:	70 93 ab 07 	sts	0x07AB, r23
     fe0:	80 93 ac 07 	sts	0x07AC, r24
     fe4:	90 93 ad 07 	sts	0x07AD, r25
     fe8:	60 91 da 07 	lds	r22, 0x07DA
     fec:	70 91 db 07 	lds	r23, 0x07DB
     ff0:	88 27       	eor	r24, r24
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	80 95       	com	r24
     ff6:	98 2f       	mov	r25, r24
     ff8:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
     ffc:	29 e7       	ldi	r18, 0x79	; 121
     ffe:	32 e2       	ldi	r19, 0x22	; 34
    1000:	40 ea       	ldi	r20, 0xA0	; 160
    1002:	5a e3       	ldi	r21, 0x3A	; 58
    1004:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1008:	60 93 ae 07 	sts	0x07AE, r22
    100c:	70 93 af 07 	sts	0x07AF, r23
    1010:	80 93 b0 07 	sts	0x07B0, r24
    1014:	90 93 b1 07 	sts	0x07B1, r25
    1018:	60 91 d8 07 	lds	r22, 0x07D8
    101c:	70 91 d9 07 	lds	r23, 0x07D9
    1020:	88 27       	eor	r24, r24
    1022:	77 fd       	sbrc	r23, 7
    1024:	80 95       	com	r24
    1026:	98 2f       	mov	r25, r24
    1028:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    102c:	60 93 b2 07 	sts	0x07B2, r22
    1030:	70 93 b3 07 	sts	0x07B3, r23
    1034:	80 93 b4 07 	sts	0x07B4, r24
    1038:	90 93 b5 07 	sts	0x07B5, r25
    103c:	60 91 d6 07 	lds	r22, 0x07D6
    1040:	70 91 d7 07 	lds	r23, 0x07D7
    1044:	88 27       	eor	r24, r24
    1046:	77 fd       	sbrc	r23, 7
    1048:	80 95       	com	r24
    104a:	98 2f       	mov	r25, r24
    104c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    1050:	60 93 b6 07 	sts	0x07B6, r22
    1054:	70 93 b7 07 	sts	0x07B7, r23
    1058:	80 93 b8 07 	sts	0x07B8, r24
    105c:	90 93 b9 07 	sts	0x07B9, r25
    1060:	60 91 d4 07 	lds	r22, 0x07D4
    1064:	70 91 d5 07 	lds	r23, 0x07D5
    1068:	88 27       	eor	r24, r24
    106a:	77 fd       	sbrc	r23, 7
    106c:	80 95       	com	r24
    106e:	98 2f       	mov	r25, r24
    1070:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    1074:	60 93 ba 07 	sts	0x07BA, r22
    1078:	70 93 bb 07 	sts	0x07BB, r23
    107c:	80 93 bc 07 	sts	0x07BC, r24
    1080:	90 93 bd 07 	sts	0x07BD, r25
    1084:	42 e8       	ldi	r20, 0x82	; 130
    1086:	57 e0       	ldi	r21, 0x07	; 7
    1088:	66 ea       	ldi	r22, 0xA6	; 166
    108a:	77 e0       	ldi	r23, 0x07	; 7
    108c:	86 e7       	ldi	r24, 0x76	; 118
    108e:	97 e0       	ldi	r25, 0x07	; 7
    1090:	d6 db       	rcall	.-2132   	; 0x83e <_Z10Vector_AddPfS_S_>
    1092:	4e e8       	ldi	r20, 0x8E	; 142
    1094:	57 e0       	ldi	r21, 0x07	; 7
    1096:	66 e7       	ldi	r22, 0x76	; 118
    1098:	77 e0       	ldi	r23, 0x07	; 7
    109a:	8a e9       	ldi	r24, 0x9A	; 154
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	cf db       	rcall	.-2146   	; 0x83e <_Z10Vector_AddPfS_S_>
    10a0:	10 92 00 02 	sts	0x0200, r1
    10a4:	10 92 01 02 	sts	0x0201, r1
    10a8:	10 92 02 02 	sts	0x0202, r1
    10ac:	10 92 03 02 	sts	0x0203, r1
    10b0:	c0 90 48 02 	lds	r12, 0x0248
    10b4:	d0 90 49 02 	lds	r13, 0x0249
    10b8:	e0 90 4a 02 	lds	r14, 0x024A
    10bc:	f0 90 4b 02 	lds	r15, 0x024B
    10c0:	46 01       	movw	r8, r12
    10c2:	57 01       	movw	r10, r14
    10c4:	b7 fa       	bst	r11, 7
    10c6:	b0 94       	com	r11
    10c8:	b7 f8       	bld	r11, 7
    10ca:	b0 94       	com	r11
    10cc:	40 90 a2 07 	lds	r4, 0x07A2
    10d0:	50 90 a3 07 	lds	r5, 0x07A3
    10d4:	60 90 a4 07 	lds	r6, 0x07A4
    10d8:	70 90 a5 07 	lds	r7, 0x07A5
    10dc:	a3 01       	movw	r20, r6
    10de:	92 01       	movw	r18, r4
    10e0:	c5 01       	movw	r24, r10
    10e2:	b4 01       	movw	r22, r8
    10e4:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    10e8:	60 93 04 02 	sts	0x0204, r22
    10ec:	70 93 05 02 	sts	0x0205, r23
    10f0:	80 93 06 02 	sts	0x0206, r24
    10f4:	90 93 07 02 	sts	0x0207, r25
    10f8:	80 91 9e 07 	lds	r24, 0x079E
    10fc:	90 91 9f 07 	lds	r25, 0x079F
    1100:	a0 91 a0 07 	lds	r26, 0x07A0
    1104:	b0 91 a1 07 	lds	r27, 0x07A1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	ab 83       	std	Y+3, r26	; 0x03
    110e:	bc 83       	std	Y+4, r27	; 0x04
    1110:	9c 01       	movw	r18, r24
    1112:	ad 01       	movw	r20, r26
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    111c:	60 93 08 02 	sts	0x0208, r22
    1120:	70 93 09 02 	sts	0x0209, r23
    1124:	80 93 0a 02 	sts	0x020A, r24
    1128:	90 93 0b 02 	sts	0x020B, r25
    112c:	a3 01       	movw	r20, r6
    112e:	92 01       	movw	r18, r4
    1130:	c7 01       	movw	r24, r14
    1132:	b6 01       	movw	r22, r12
    1134:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1138:	60 93 0c 02 	sts	0x020C, r22
    113c:	70 93 0d 02 	sts	0x020D, r23
    1140:	80 93 0e 02 	sts	0x020E, r24
    1144:	90 93 0f 02 	sts	0x020F, r25
    1148:	10 92 10 02 	sts	0x0210, r1
    114c:	10 92 11 02 	sts	0x0211, r1
    1150:	10 92 12 02 	sts	0x0212, r1
    1154:	10 92 13 02 	sts	0x0213, r1
    1158:	40 90 9a 07 	lds	r4, 0x079A
    115c:	50 90 9b 07 	lds	r5, 0x079B
    1160:	60 90 9c 07 	lds	r6, 0x079C
    1164:	70 90 9d 07 	lds	r7, 0x079D
    1168:	a3 01       	movw	r20, r6
    116a:	92 01       	movw	r18, r4
    116c:	c5 01       	movw	r24, r10
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1174:	60 93 14 02 	sts	0x0214, r22
    1178:	70 93 15 02 	sts	0x0215, r23
    117c:	80 93 16 02 	sts	0x0216, r24
    1180:	90 93 17 02 	sts	0x0217, r25
    1184:	29 81       	ldd	r18, Y+1	; 0x01
    1186:	3a 81       	ldd	r19, Y+2	; 0x02
    1188:	4b 81       	ldd	r20, Y+3	; 0x03
    118a:	5c 81       	ldd	r21, Y+4	; 0x04
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1194:	60 93 18 02 	sts	0x0218, r22
    1198:	70 93 19 02 	sts	0x0219, r23
    119c:	80 93 1a 02 	sts	0x021A, r24
    11a0:	90 93 1b 02 	sts	0x021B, r25
    11a4:	a3 01       	movw	r20, r6
    11a6:	92 01       	movw	r18, r4
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
    11ac:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    11b0:	60 93 1c 02 	sts	0x021C, r22
    11b4:	70 93 1d 02 	sts	0x021D, r23
    11b8:	80 93 1e 02 	sts	0x021E, r24
    11bc:	90 93 1f 02 	sts	0x021F, r25
    11c0:	10 92 20 02 	sts	0x0220, r1
    11c4:	10 92 21 02 	sts	0x0221, r1
    11c8:	10 92 22 02 	sts	0x0222, r1
    11cc:	10 92 23 02 	sts	0x0223, r1
    11d0:	4c e2       	ldi	r20, 0x2C	; 44
    11d2:	57 e0       	ldi	r21, 0x07	; 7
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	72 e0       	ldi	r23, 0x02	; 2
    11d8:	84 e2       	ldi	r24, 0x24	; 36
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	b8 d9       	rcall	.-3216   	; 0x54e <_Z15Matrix_MultiplyPA3_fS0_S0_>
    11de:	c1 2c       	mov	r12, r1
    11e0:	d1 2c       	mov	r13, r1
    11e2:	a1 2c       	mov	r10, r1
    11e4:	b1 2c       	mov	r11, r1
    11e6:	21 c0       	rjmp	.+66     	; 0x122a <_Z13Matrix_updatev+0x2ca>
    11e8:	d8 01       	movw	r26, r16
    11ea:	2d 91       	ld	r18, X+
    11ec:	3d 91       	ld	r19, X+
    11ee:	4d 91       	ld	r20, X+
    11f0:	5d 91       	ld	r21, X+
    11f2:	8d 01       	movw	r16, r26
    11f4:	f4 01       	movw	r30, r8
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    1202:	d4 01       	movw	r26, r8
    1204:	6d 93       	st	X+, r22
    1206:	7d 93       	st	X+, r23
    1208:	8d 93       	st	X+, r24
    120a:	9d 93       	st	X+, r25
    120c:	4d 01       	movw	r8, r26
    120e:	bf ef       	ldi	r27, 0xFF	; 255
    1210:	eb 1a       	sub	r14, r27
    1212:	fb 0a       	sbc	r15, r27
    1214:	e3 e0       	ldi	r30, 0x03	; 3
    1216:	ee 16       	cp	r14, r30
    1218:	f1 04       	cpc	r15, r1
    121a:	31 f7       	brne	.-52     	; 0x11e8 <_Z13Matrix_updatev+0x288>
    121c:	fc e0       	ldi	r31, 0x0C	; 12
    121e:	cf 0e       	add	r12, r31
    1220:	d1 1c       	adc	r13, r1
    1222:	84 e2       	ldi	r24, 0x24	; 36
    1224:	c8 16       	cp	r12, r24
    1226:	d1 04       	cpc	r13, r1
    1228:	51 f0       	breq	.+20     	; 0x123e <_Z13Matrix_updatev+0x2de>
    122a:	d6 01       	movw	r26, r12
    122c:	ac 5d       	subi	r26, 0xDC	; 220
    122e:	bd 4f       	sbci	r27, 0xFD	; 253
    1230:	4d 01       	movw	r8, r26
    1232:	86 01       	movw	r16, r12
    1234:	04 5d       	subi	r16, 0xD4	; 212
    1236:	18 4f       	sbci	r17, 0xF8	; 248
    1238:	ea 2c       	mov	r14, r10
    123a:	fb 2c       	mov	r15, r11
    123c:	d5 cf       	rjmp	.-86     	; 0x11e8 <_Z13Matrix_updatev+0x288>
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	08 95       	ret

00001268 <_Z12Euler_anglesv>:
    1268:	60 91 3c 02 	lds	r22, 0x023C
    126c:	70 91 3d 02 	lds	r23, 0x023D
    1270:	80 91 3e 02 	lds	r24, 0x023E
    1274:	90 91 3f 02 	lds	r25, 0x023F
    1278:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <asin>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	b0 58       	subi	r27, 0x80	; 128
    1282:	80 93 6e 07 	sts	0x076E, r24
    1286:	90 93 6f 07 	sts	0x076F, r25
    128a:	a0 93 70 07 	sts	0x0770, r26
    128e:	b0 93 71 07 	sts	0x0771, r27
    1292:	20 91 44 02 	lds	r18, 0x0244
    1296:	30 91 45 02 	lds	r19, 0x0245
    129a:	40 91 46 02 	lds	r20, 0x0246
    129e:	50 91 47 02 	lds	r21, 0x0247
    12a2:	60 91 40 02 	lds	r22, 0x0240
    12a6:	70 91 41 02 	lds	r23, 0x0241
    12aa:	80 91 42 02 	lds	r24, 0x0242
    12ae:	90 91 43 02 	lds	r25, 0x0243
    12b2:	0e 94 07 20 	call	0x400e	; 0x400e <atan2>
    12b6:	60 93 72 07 	sts	0x0772, r22
    12ba:	70 93 73 07 	sts	0x0773, r23
    12be:	80 93 74 07 	sts	0x0774, r24
    12c2:	90 93 75 07 	sts	0x0775, r25
    12c6:	20 91 24 02 	lds	r18, 0x0224
    12ca:	30 91 25 02 	lds	r19, 0x0225
    12ce:	40 91 26 02 	lds	r20, 0x0226
    12d2:	50 91 27 02 	lds	r21, 0x0227
    12d6:	60 91 30 02 	lds	r22, 0x0230
    12da:	70 91 31 02 	lds	r23, 0x0231
    12de:	80 91 32 02 	lds	r24, 0x0232
    12e2:	90 91 33 02 	lds	r25, 0x0233
    12e6:	0e 94 07 20 	call	0x400e	; 0x400e <atan2>
    12ea:	60 93 6a 07 	sts	0x076A, r22
    12ee:	70 93 6b 07 	sts	0x076B, r23
    12f2:	80 93 6c 07 	sts	0x076C, r24
    12f6:	90 93 6d 07 	sts	0x076D, r25
    12fa:	08 95       	ret

000012fc <_Z15Compass_Headingv>:
    12fc:	4f 92       	push	r4
    12fe:	5f 92       	push	r5
    1300:	6f 92       	push	r6
    1302:	7f 92       	push	r7
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	60 97       	sbiw	r28, 0x10	; 16
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	c0 90 72 07 	lds	r12, 0x0772
    1330:	d0 90 73 07 	lds	r13, 0x0773
    1334:	e0 90 74 07 	lds	r14, 0x0774
    1338:	f0 90 75 07 	lds	r15, 0x0775
    133c:	c7 01       	movw	r24, r14
    133e:	b6 01       	movw	r22, r12
    1340:	0e 94 5e 20 	call	0x40bc	; 0x40bc <cos>
    1344:	69 83       	std	Y+1, r22	; 0x01
    1346:	7a 83       	std	Y+2, r23	; 0x02
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <sin>
    1354:	6d 83       	std	Y+5, r22	; 0x05
    1356:	7e 83       	std	Y+6, r23	; 0x06
    1358:	8f 83       	std	Y+7, r24	; 0x07
    135a:	98 87       	std	Y+8, r25	; 0x08
    135c:	c0 90 6e 07 	lds	r12, 0x076E
    1360:	d0 90 6f 07 	lds	r13, 0x076F
    1364:	e0 90 70 07 	lds	r14, 0x0770
    1368:	f0 90 71 07 	lds	r15, 0x0771
    136c:	c7 01       	movw	r24, r14
    136e:	b6 01       	movw	r22, r12
    1370:	0e 94 5e 20 	call	0x40bc	; 0x40bc <cos>
    1374:	6d 87       	std	Y+13, r22	; 0x0d
    1376:	7e 87       	std	Y+14, r23	; 0x0e
    1378:	8f 87       	std	Y+15, r24	; 0x0f
    137a:	98 8b       	std	Y+16, r25	; 0x10
    137c:	c7 01       	movw	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <sin>
    1384:	69 87       	std	Y+9, r22	; 0x09
    1386:	7a 87       	std	Y+10, r23	; 0x0a
    1388:	8b 87       	std	Y+11, r24	; 0x0b
    138a:	9c 87       	std	Y+12, r25	; 0x0c
    138c:	a0 90 58 02 	lds	r10, 0x0258
    1390:	b0 90 59 02 	lds	r11, 0x0259
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	99 e0       	ldi	r25, 0x09	; 9
    1398:	a8 9e       	mul	r10, r24
    139a:	b0 01       	movw	r22, r0
    139c:	a9 9e       	mul	r10, r25
    139e:	70 0d       	add	r23, r0
    13a0:	b8 9e       	mul	r11, r24
    13a2:	70 0d       	add	r23, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	80 91 d2 07 	lds	r24, 0x07D2
    13aa:	90 91 d3 07 	lds	r25, 0x07D3
    13ae:	68 0f       	add	r22, r24
    13b0:	79 1f       	adc	r23, r25
    13b2:	88 27       	eor	r24, r24
    13b4:	77 fd       	sbrc	r23, 7
    13b6:	80 95       	com	r24
    13b8:	98 2f       	mov	r25, r24
    13ba:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	38 e9       	ldi	r19, 0x98	; 152
    13c2:	4e e9       	ldi	r20, 0x9E	; 158
    13c4:	55 e4       	ldi	r21, 0x45	; 69
    13c6:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    13ca:	6b 01       	movw	r12, r22
    13cc:	7c 01       	movw	r14, r24
    13ce:	b5 01       	movw	r22, r10
    13d0:	88 27       	eor	r24, r24
    13d2:	77 fd       	sbrc	r23, 7
    13d4:	80 95       	com	r24
    13d6:	98 2f       	mov	r25, r24
    13d8:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    13e8:	9b 01       	movw	r18, r22
    13ea:	ac 01       	movw	r20, r24
    13ec:	c7 01       	movw	r24, r14
    13ee:	b6 01       	movw	r22, r12
    13f0:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    13f4:	2b 01       	movw	r4, r22
    13f6:	3c 01       	movw	r6, r24
    13f8:	60 93 ca 07 	sts	0x07CA, r22
    13fc:	70 93 cb 07 	sts	0x07CB, r23
    1400:	80 93 cc 07 	sts	0x07CC, r24
    1404:	90 93 cd 07 	sts	0x07CD, r25
    1408:	a0 90 5a 02 	lds	r10, 0x025A
    140c:	b0 90 5b 02 	lds	r11, 0x025B
    1410:	82 e9       	ldi	r24, 0x92	; 146
    1412:	98 e0       	ldi	r25, 0x08	; 8
    1414:	a8 9e       	mul	r10, r24
    1416:	b0 01       	movw	r22, r0
    1418:	a9 9e       	mul	r10, r25
    141a:	70 0d       	add	r23, r0
    141c:	b8 9e       	mul	r11, r24
    141e:	70 0d       	add	r23, r0
    1420:	11 24       	eor	r1, r1
    1422:	80 91 d0 07 	lds	r24, 0x07D0
    1426:	90 91 d1 07 	lds	r25, 0x07D1
    142a:	68 0f       	add	r22, r24
    142c:	79 1f       	adc	r23, r25
    142e:	88 27       	eor	r24, r24
    1430:	77 fd       	sbrc	r23, 7
    1432:	80 95       	com	r24
    1434:	98 2f       	mov	r25, r24
    1436:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 ef       	ldi	r19, 0xF0	; 240
    143e:	4d e9       	ldi	r20, 0x9D	; 157
    1440:	55 e4       	ldi	r21, 0x45	; 69
    1442:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    1446:	6b 01       	movw	r12, r22
    1448:	7c 01       	movw	r14, r24
    144a:	b5 01       	movw	r22, r10
    144c:	88 27       	eor	r24, r24
    144e:	77 fd       	sbrc	r23, 7
    1450:	80 95       	com	r24
    1452:	98 2f       	mov	r25, r24
    1454:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	5f e3       	ldi	r21, 0x3F	; 63
    1460:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1464:	9b 01       	movw	r18, r22
    1466:	ac 01       	movw	r20, r24
    1468:	c7 01       	movw	r24, r14
    146a:	b6 01       	movw	r22, r12
    146c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    1470:	4b 01       	movw	r8, r22
    1472:	5c 01       	movw	r10, r24
    1474:	60 93 c6 07 	sts	0x07C6, r22
    1478:	70 93 c7 07 	sts	0x07C7, r23
    147c:	80 93 c8 07 	sts	0x07C8, r24
    1480:	90 93 c9 07 	sts	0x07C9, r25
    1484:	00 91 5c 02 	lds	r16, 0x025C
    1488:	10 91 5d 02 	lds	r17, 0x025D
    148c:	8c e6       	ldi	r24, 0x6C	; 108
    148e:	98 e0       	ldi	r25, 0x08	; 8
    1490:	08 9f       	mul	r16, r24
    1492:	b0 01       	movw	r22, r0
    1494:	09 9f       	mul	r16, r25
    1496:	70 0d       	add	r23, r0
    1498:	18 9f       	mul	r17, r24
    149a:	70 0d       	add	r23, r0
    149c:	11 24       	eor	r1, r1
    149e:	80 91 ce 07 	lds	r24, 0x07CE
    14a2:	90 91 cf 07 	lds	r25, 0x07CF
    14a6:	68 0f       	add	r22, r24
    14a8:	79 1f       	adc	r23, r25
    14aa:	88 27       	eor	r24, r24
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	80 95       	com	r24
    14b0:	98 2f       	mov	r25, r24
    14b2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	38 e6       	ldi	r19, 0x68	; 104
    14ba:	49 e9       	ldi	r20, 0x99	; 153
    14bc:	55 e4       	ldi	r21, 0x45	; 69
    14be:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    14c2:	6b 01       	movw	r12, r22
    14c4:	7c 01       	movw	r14, r24
    14c6:	b8 01       	movw	r22, r16
    14c8:	88 27       	eor	r24, r24
    14ca:	77 fd       	sbrc	r23, 7
    14cc:	80 95       	com	r24
    14ce:	98 2f       	mov	r25, r24
    14d0:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	c7 01       	movw	r24, r14
    14e6:	b6 01       	movw	r22, r12
    14e8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    14ec:	6b 01       	movw	r12, r22
    14ee:	7c 01       	movw	r14, r24
    14f0:	60 93 c2 07 	sts	0x07C2, r22
    14f4:	70 93 c3 07 	sts	0x07C3, r23
    14f8:	80 93 c4 07 	sts	0x07C4, r24
    14fc:	90 93 c5 07 	sts	0x07C5, r25
    1500:	a3 01       	movw	r20, r6
    1502:	92 01       	movw	r18, r4
    1504:	6d 85       	ldd	r22, Y+13	; 0x0d
    1506:	7e 85       	ldd	r23, Y+14	; 0x0e
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1510:	2b 01       	movw	r4, r22
    1512:	3c 01       	movw	r6, r24
    1514:	a5 01       	movw	r20, r10
    1516:	94 01       	movw	r18, r8
    1518:	6d 81       	ldd	r22, Y+5	; 0x05
    151a:	7e 81       	ldd	r23, Y+6	; 0x06
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1524:	29 85       	ldd	r18, Y+9	; 0x09
    1526:	3a 85       	ldd	r19, Y+10	; 0x0a
    1528:	4b 85       	ldd	r20, Y+11	; 0x0b
    152a:	5c 85       	ldd	r21, Y+12	; 0x0c
    152c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	c3 01       	movw	r24, r6
    1536:	b2 01       	movw	r22, r4
    1538:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    153c:	2b 01       	movw	r4, r22
    153e:	3c 01       	movw	r6, r24
    1540:	a7 01       	movw	r20, r14
    1542:	96 01       	movw	r18, r12
    1544:	69 81       	ldd	r22, Y+1	; 0x01
    1546:	7a 81       	ldd	r23, Y+2	; 0x02
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1550:	29 85       	ldd	r18, Y+9	; 0x09
    1552:	3a 85       	ldd	r19, Y+10	; 0x0a
    1554:	4b 85       	ldd	r20, Y+11	; 0x0b
    1556:	5c 85       	ldd	r21, Y+12	; 0x0c
    1558:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	c3 01       	movw	r24, r6
    1562:	b2 01       	movw	r22, r4
    1564:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    1568:	2b 01       	movw	r4, r22
    156a:	3c 01       	movw	r6, r24
    156c:	a5 01       	movw	r20, r10
    156e:	94 01       	movw	r18, r8
    1570:	69 81       	ldd	r22, Y+1	; 0x01
    1572:	7a 81       	ldd	r23, Y+2	; 0x02
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    157c:	4b 01       	movw	r8, r22
    157e:	5c 01       	movw	r10, r24
    1580:	a7 01       	movw	r20, r14
    1582:	96 01       	movw	r18, r12
    1584:	6d 81       	ldd	r22, Y+5	; 0x05
    1586:	7e 81       	ldd	r23, Y+6	; 0x06
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1590:	9b 01       	movw	r18, r22
    1592:	ac 01       	movw	r20, r24
    1594:	c5 01       	movw	r24, r10
    1596:	b4 01       	movw	r22, r8
    1598:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    159c:	90 58       	subi	r25, 0x80	; 128
    159e:	a3 01       	movw	r20, r6
    15a0:	92 01       	movw	r18, r4
    15a2:	0e 94 07 20 	call	0x400e	; 0x400e <atan2>
    15a6:	60 93 be 07 	sts	0x07BE, r22
    15aa:	70 93 bf 07 	sts	0x07BF, r23
    15ae:	80 93 c0 07 	sts	0x07C0, r24
    15b2:	90 93 c1 07 	sts	0x07C1, r25
    15b6:	60 96       	adiw	r28, 0x10	; 16
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	08 95       	ret

000015e4 <_Z9readSonarh>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	c8 2f       	mov	r28, r24
    15ea:	8e e1       	ldi	r24, 0x1E	; 30
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 de 1b 	call	0x37bc	; 0x37bc <vTaskDelay>
    15f2:	d0 e0       	ldi	r29, 0x00	; 0
    15f4:	cc 0f       	add	r28, r28
    15f6:	dd 1f       	adc	r29, r29
    15f8:	ce 01       	movw	r24, r28
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	8c 0f       	add	r24, r28
    1608:	9d 1f       	adc	r25, r29
    160a:	88 5f       	subi	r24, 0xF8	; 248
    160c:	97 4f       	sbci	r25, 0xF7	; 247
    160e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN7NewPing4pingEv>
    1612:	ac 01       	movw	r20, r24
    1614:	90 93 07 08 	sts	0x0807, r25
    1618:	80 93 06 08 	sts	0x0806, r24
    161c:	cd 59       	subi	r28, 0x9D	; 157
    161e:	d7 4f       	sbci	r29, 0xF7	; 247
    1620:	9c 01       	movw	r18, r24
    1622:	a1 e7       	ldi	r26, 0x71	; 113
    1624:	bf e1       	ldi	r27, 0x1F	; 31
    1626:	0e 94 11 2c 	call	0x5822	; 0x5822 <__umulhisi3>
    162a:	48 1b       	sub	r20, r24
    162c:	59 0b       	sbc	r21, r25
    162e:	56 95       	lsr	r21
    1630:	47 95       	ror	r20
    1632:	84 0f       	add	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	96 95       	lsr	r25
    1638:	87 95       	ror	r24
    163a:	92 95       	swap	r25
    163c:	82 95       	swap	r24
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	89 27       	eor	r24, r25
    1642:	9f 70       	andi	r25, 0x0F	; 15
    1644:	89 27       	eor	r24, r25
    1646:	99 83       	std	Y+1, r25	; 0x01
    1648:	88 83       	st	Y, r24
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <_Z12readIRSensorv>:
    1650:	86 e3       	ldi	r24, 0x36	; 54
    1652:	0e 94 2b 2a 	call	0x5456	; 0x5456 <analogRead>
    1656:	bc 01       	movw	r22, r24
    1658:	88 27       	eor	r24, r24
    165a:	77 fd       	sbrc	r23, 7
    165c:	80 95       	com	r24
    165e:	98 2f       	mov	r25, r24
    1660:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 ea       	ldi	r20, 0xA0	; 160
    166a:	5b e3       	ldi	r21, 0x3B	; 59
    166c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1670:	60 93 02 08 	sts	0x0802, r22
    1674:	70 93 03 08 	sts	0x0803, r23
    1678:	80 93 04 08 	sts	0x0804, r24
    167c:	90 93 05 08 	sts	0x0805, r25
    1680:	28 e4       	ldi	r18, 0x48	; 72
    1682:	31 ee       	ldi	r19, 0xE1	; 225
    1684:	4a e9       	ldi	r20, 0x9A	; 154
    1686:	5f eb       	ldi	r21, 0xBF	; 191
    1688:	0e 94 a4 22 	call	0x4548	; 0x4548 <pow>
    168c:	21 e7       	ldi	r18, 0x71	; 113
    168e:	3d e3       	ldi	r19, 0x3D	; 61
    1690:	48 e5       	ldi	r20, 0x58	; 88
    1692:	52 e4       	ldi	r21, 0x42	; 66
    1694:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    1698:	0e 94 ce 20 	call	0x419c	; 0x419c <__fixunssfsi>
    169c:	70 93 01 08 	sts	0x0801, r23
    16a0:	60 93 00 08 	sts	0x0800, r22
    16a4:	08 95       	ret

000016a6 <_Z8onVMotori>:
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	31 f4       	brne	.+12     	; 0x16b6 <_Z8onVMotori+0x10>
    16aa:	6f ef       	ldi	r22, 0xFF	; 255
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	85 e0       	ldi	r24, 0x05	; 5
    16b0:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <analogWrite>
    16b4:	08 95       	ret
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	31 f4       	brne	.+12     	; 0x16c6 <_Z8onVMotori+0x20>
    16ba:	6f ef       	ldi	r22, 0xFF	; 255
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	86 e0       	ldi	r24, 0x06	; 6
    16c0:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <analogWrite>
    16c4:	08 95       	ret
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	85 e0       	ldi	r24, 0x05	; 5
    16cc:	0e 94 4f 2a 	call	0x549e	; 0x549e <analogWrite>
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	0c 94 4f 2a 	jmp	0x549e	; 0x549e <analogWrite>
    16da:	08 95       	ret

000016dc <_GLOBAL__sub_I_SENSOR_SIGN>:
    16dc:	2a ef       	ldi	r18, 0xFA	; 250
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	47 e1       	ldi	r20, 0x17	; 23
    16e2:	66 e1       	ldi	r22, 0x16	; 22
    16e4:	88 e0       	ldi	r24, 0x08	; 8
    16e6:	98 e0       	ldi	r25, 0x08	; 8
    16e8:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7NewPingC1Ehhj>
    16ec:	2a ef       	ldi	r18, 0xFA	; 250
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	49 e1       	ldi	r20, 0x19	; 25
    16f2:	68 e1       	ldi	r22, 0x18	; 24
    16f4:	8a e1       	ldi	r24, 0x1A	; 26
    16f6:	98 e0       	ldi	r25, 0x08	; 8
    16f8:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7NewPingC1Ehhj>
    16fc:	2a ef       	ldi	r18, 0xFA	; 250
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4b e1       	ldi	r20, 0x1B	; 27
    1702:	6a e1       	ldi	r22, 0x1A	; 26
    1704:	8c e2       	ldi	r24, 0x2C	; 44
    1706:	98 e0       	ldi	r25, 0x08	; 8
    1708:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7NewPingC1Ehhj>
    170c:	2a ef       	ldi	r18, 0xFA	; 250
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4d e1       	ldi	r20, 0x1D	; 29
    1712:	6c e1       	ldi	r22, 0x1C	; 28
    1714:	8e e3       	ldi	r24, 0x3E	; 62
    1716:	98 e0       	ldi	r25, 0x08	; 8
    1718:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7NewPingC1Ehhj>
    171c:	2a ef       	ldi	r18, 0xFA	; 250
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4f e1       	ldi	r20, 0x1F	; 31
    1722:	6e e1       	ldi	r22, 0x1E	; 30
    1724:	80 e5       	ldi	r24, 0x50	; 80
    1726:	98 e0       	ldi	r25, 0x08	; 8
    1728:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7NewPingC1Ehhj>
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	97 e0       	ldi	r25, 0x07	; 7
    1730:	c3 d2       	rcall	.+1414   	; 0x1cb8 <_ZN3L3GC1Ev>
    1732:	8a ef       	ldi	r24, 0xFA	; 250
    1734:	96 e0       	ldi	r25, 0x06	; 6
    1736:	c2 c4       	rjmp	.+2436   	; 0x20bc <_ZN6LSM303C1Ev>
    1738:	08 95       	ret

0000173a <_Z10debugPrintPKc>:
    173a:	bc 01       	movw	r22, r24
    173c:	8e ec       	ldi	r24, 0xCE	; 206
    173e:	9f e0       	ldi	r25, 0x0F	; 15
    1740:	0e 94 3a 28 	call	0x5074	; 0x5074 <_ZN5Print7printlnEPKc>
    1744:	8e ec       	ldi	r24, 0xCE	; 206
    1746:	9f e0       	ldi	r25, 0x0F	; 15
    1748:	0c 94 81 24 	jmp	0x4902	; 0x4902 <_ZN14HardwareSerial5flushEv>
    174c:	08 95       	ret

0000174e <_Z7dprintfPKcz>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	fe 01       	movw	r30, r28
    1758:	36 96       	adiw	r30, 0x06	; 6
    175a:	61 91       	ld	r22, Z+
    175c:	71 91       	ld	r23, Z+
    175e:	af 01       	movw	r20, r30
    1760:	8a ef       	ldi	r24, 0xFA	; 250
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 2e 2c 	call	0x585c	; 0x585c <vsprintf>
    1768:	8a ef       	ldi	r24, 0xFA	; 250
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	e6 df       	rcall	.-52     	; 0x173a <_Z10debugPrintPKc>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <_Z9printdatav>:
void printdata(void)
{    
      //Serial.print("!");

      if (PRINT_EULER == 1){
		dprintf("p");
    1774:	83 e8       	ldi	r24, 0x83	; 131
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	9f 93       	push	r25
    177a:	8f 93       	push	r24
    177c:	e8 df       	rcall	.-48     	; 0x174e <_Z7dprintfPKcz>
		dprintf( "%d ",(int)ToDeg(pitch));
    177e:	21 ee       	ldi	r18, 0xE1	; 225
    1780:	3e e2       	ldi	r19, 0x2E	; 46
    1782:	45 e6       	ldi	r20, 0x65	; 101
    1784:	52 e4       	ldi	r21, 0x42	; 66
    1786:	60 91 6e 07 	lds	r22, 0x076E
    178a:	70 91 6f 07 	lds	r23, 0x076F
    178e:	80 91 70 07 	lds	r24, 0x0770
    1792:	90 91 71 07 	lds	r25, 0x0771
    1796:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    179a:	0e 94 c9 20 	call	0x4192	; 0x4192 <__fixsfsi>
    179e:	7f 93       	push	r23
    17a0:	6f 93       	push	r22
    17a2:	85 e8       	ldi	r24, 0x85	; 133
    17a4:	92 e0       	ldi	r25, 0x02	; 2
    17a6:	9f 93       	push	r25
    17a8:	8f 93       	push	r24
    17aa:	d1 df       	rcall	.-94     	; 0x174e <_Z7dprintfPKcz>
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	08 95       	ret

000017ba <_Z5task2Pv>:

void task2(void	*p)
{
	while(1)
	{	
		vTaskDelay(2000);
    17ba:	80 ed       	ldi	r24, 0xD0	; 208
    17bc:	97 e0       	ldi	r25, 0x07	; 7
    17be:	0e 94 de 1b 	call	0x37bc	; 0x37bc <vTaskDelay>
		//if((millis()-timer)>=10)  // Main loop runs at 50Hz
		//{
			counter++;
    17c2:	80 91 50 07 	lds	r24, 0x0750
    17c6:	90 91 51 07 	lds	r25, 0x0751
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	90 93 51 07 	sts	0x0751, r25
    17d0:	80 93 50 07 	sts	0x0750, r24
			timer_old = timer;
    17d4:	80 91 fc 07 	lds	r24, 0x07FC
    17d8:	90 91 fd 07 	lds	r25, 0x07FD
    17dc:	a0 91 fe 07 	lds	r26, 0x07FE
    17e0:	b0 91 ff 07 	lds	r27, 0x07FF
    17e4:	80 93 f8 07 	sts	0x07F8, r24
    17e8:	90 93 f9 07 	sts	0x07F9, r25
    17ec:	a0 93 fa 07 	sts	0x07FA, r26
    17f0:	b0 93 fb 07 	sts	0x07FB, r27
			timer=millis();
    17f4:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    17f8:	60 93 fc 07 	sts	0x07FC, r22
    17fc:	70 93 fd 07 	sts	0x07FD, r23
    1800:	80 93 fe 07 	sts	0x07FE, r24
    1804:	90 93 ff 07 	sts	0x07FF, r25
			if (timer>timer_old)
    1808:	00 91 f8 07 	lds	r16, 0x07F8
    180c:	10 91 f9 07 	lds	r17, 0x07F9
    1810:	20 91 fa 07 	lds	r18, 0x07FA
    1814:	30 91 fb 07 	lds	r19, 0x07FB
    1818:	06 17       	cp	r16, r22
    181a:	17 07       	cpc	r17, r23
    181c:	28 07       	cpc	r18, r24
    181e:	39 07       	cpc	r19, r25
    1820:	ac f4       	brge	.+42     	; 0x184c <_Z5task2Pv+0x92>
			G_Dt = (timer-timer_old)/1000.0;    // Real time of loop run. We use this on the DCM algorithm (gyro integration time)
    1822:	60 1b       	sub	r22, r16
    1824:	71 0b       	sbc	r23, r17
    1826:	82 0b       	sbc	r24, r18
    1828:	93 0b       	sbc	r25, r19
    182a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    183a:	60 93 48 02 	sts	0x0248, r22
    183e:	70 93 49 02 	sts	0x0249, r23
    1842:	80 93 4a 02 	sts	0x024A, r24
    1846:	90 93 4b 02 	sts	0x024B, r25
    184a:	08 c0       	rjmp	.+16     	; 0x185c <_Z5task2Pv+0xa2>
			else
			G_Dt = 0;
    184c:	10 92 48 02 	sts	0x0248, r1
    1850:	10 92 49 02 	sts	0x0249, r1
    1854:	10 92 4a 02 	sts	0x024A, r1
    1858:	10 92 4b 02 	sts	0x024B, r1
			
			// *** DCM algorithm
			// Data adquisition
			Read_Gyro();   // This read gyro data
    185c:	3c d8       	rcall	.-3976   	; 0x8d6 <_Z9Read_Gyrov>
			Read_Accel();     // Read I2C accelerometer
    185e:	bc d8       	rcall	.-3720   	; 0x9d8 <_Z10Read_Accelv>
			
			if (counter > 5)  // Read compass data at 10Hz... (5 loop runs)
    1860:	80 91 50 07 	lds	r24, 0x0750
    1864:	90 91 51 07 	lds	r25, 0x0751
    1868:	06 97       	sbiw	r24, 0x06	; 6
    186a:	30 f0       	brcs	.+12     	; 0x1878 <_Z5task2Pv+0xbe>
			{
				counter=0;
    186c:	10 92 51 07 	sts	0x0751, r1
    1870:	10 92 50 07 	sts	0x0750, r1
				Read_Compass();    // Read I2C magnetometer
    1874:	25 d9       	rcall	.-3510   	; 0xac0 <_Z12Read_Compassv>
				Compass_Heading(); // Calculate magnetic heading
    1876:	42 dd       	rcall	.-1404   	; 0x12fc <_Z15Compass_Headingv>
			}
			
			// Calculations...
			Matrix_update();
    1878:	73 db       	rcall	.-2330   	; 0xf60 <_Z13Matrix_updatev>
			Normalize();
    187a:	60 d9       	rcall	.-3392   	; 0xb3c <_Z9Normalizev>
			Drift_correction();
    187c:	fe d9       	rcall	.-3076   	; 0xc7a <_Z16Drift_correctionv>
			Euler_angles();
    187e:	f4 dc       	rcall	.-1560   	; 0x1268 <_Z12Euler_anglesv>
			// ***
			
			printdata();
    1880:	79 df       	rcall	.-270    	; 0x1774 <_Z9printdatav>
		vTaskDelay(1000);	
		
	}
}

void task2(void	*p)
    1882:	9b cf       	rjmp	.-202    	; 0x17ba <_Z5task2Pv>

00001884 <_Z5task1Pv>:
		analogWrite(motorR,0);
	}
}

void	task1(void	*p)
{
    1884:	0f 2e       	mov	r0, r31
    1886:	f3 e6       	ldi	r31, 0x63	; 99
    1888:	af 2e       	mov	r10, r31
    188a:	f8 e0       	ldi	r31, 0x08	; 8
    188c:	bf 2e       	mov	r11, r31
    188e:	f0 2d       	mov	r31, r0
		readSonar(0);
		readSonar(1);
		readSonar(2);		
		readSonar(3);		
		readSonar(4);		
		readIRSensor(); 		
    1890:	81 2c       	mov	r8, r1
    1892:	91 2c       	mov	r9, r1
		
		for (uint8_t i = 0; i < SONAR_NUM; i++)  // Loop through all the sensors.						
			dprintf("%d: %d",i,cm[i]);	
    1894:	0f 2e       	mov	r0, r31
    1896:	f9 e8       	ldi	r31, 0x89	; 137
    1898:	ef 2e       	mov	r14, r31
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	ff 2e       	mov	r15, r31
    189e:	f0 2d       	mov	r31, r0
		dprintf("IR: %d\n", ir_distance);
    18a0:	0f 2e       	mov	r0, r31
    18a2:	f0 e9       	ldi	r31, 0x90	; 144
    18a4:	cf 2e       	mov	r12, r31
    18a6:	f2 e0       	ldi	r31, 0x02	; 2
    18a8:	df 2e       	mov	r13, r31
    18aa:	f0 2d       	mov	r31, r0
{
	while(1)
	{	
		//dprintf("%d\n",millis());	
		
		readSonar(0);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	9a de       	rcall	.-716    	; 0x15e4 <_Z9readSonarh>
		readSonar(1);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	98 de       	rcall	.-720    	; 0x15e4 <_Z9readSonarh>
		readSonar(2);		
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	96 de       	rcall	.-724    	; 0x15e4 <_Z9readSonarh>
		readSonar(3);		
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	94 de       	rcall	.-728    	; 0x15e4 <_Z9readSonarh>
		readSonar(4);		
    18bc:	84 e0       	ldi	r24, 0x04	; 4
    18be:	92 de       	rcall	.-732    	; 0x15e4 <_Z9readSonarh>
		readIRSensor(); 		
    18c0:	c7 de       	rcall	.-626    	; 0x1650 <_Z12readIRSensorv>
    18c2:	85 01       	movw	r16, r10
    18c4:	c8 2d       	mov	r28, r8
    18c6:	d9 2d       	mov	r29, r9
		
		for (uint8_t i = 0; i < SONAR_NUM; i++)  // Loop through all the sensors.						
			dprintf("%d: %d",i,cm[i]);	
    18c8:	f8 01       	movw	r30, r16
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	0e 5f       	subi	r16, 0xFE	; 254
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	9f 93       	push	r25
    18d4:	8f 93       	push	r24
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	ff 92       	push	r15
    18dc:	ef 92       	push	r14
    18de:	37 df       	rcall	.-402    	; 0x174e <_Z7dprintfPKcz>
    18e0:	21 96       	adiw	r28, 0x01	; 1
		readSonar(2);		
		readSonar(3);		
		readSonar(4);		
		readIRSensor(); 		
		
		for (uint8_t i = 0; i < SONAR_NUM; i++)  // Loop through all the sensors.						
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	c5 30       	cpi	r28, 0x05	; 5
    18f0:	d1 05       	cpc	r29, r1
    18f2:	51 f7       	brne	.-44     	; 0x18c8 <_Z5task1Pv+0x44>
			dprintf("%d: %d",i,cm[i]);	
		dprintf("IR: %d\n", ir_distance);
    18f4:	80 91 01 08 	lds	r24, 0x0801
    18f8:	8f 93       	push	r24
    18fa:	80 91 00 08 	lds	r24, 0x0800
    18fe:	8f 93       	push	r24
    1900:	df 92       	push	r13
    1902:	cf 92       	push	r12
    1904:	24 df       	rcall	.-440    	; 0x174e <_Z7dprintfPKcz>
		
		if(ir_distance>=20 && ir_distance<=50)
    1906:	20 91 00 08 	lds	r18, 0x0800
    190a:	30 91 01 08 	lds	r19, 0x0801
    190e:	a9 01       	movw	r20, r18
    1910:	44 51       	subi	r20, 0x14	; 20
    1912:	51 09       	sbc	r21, r1
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	4f 31       	cpi	r20, 0x1F	; 31
    191e:	51 05       	cpc	r21, r1
    1920:	20 f4       	brcc	.+8      	; 0x192a <_Z5task1Pv+0xa6>
			onVMotor(0);
    1922:	88 2d       	mov	r24, r8
    1924:	99 2d       	mov	r25, r9
    1926:	bf de       	rcall	.-642    	; 0x16a6 <_Z8onVMotori>
    1928:	12 c0       	rjmp	.+36     	; 0x194e <_Z5task1Pv+0xca>
		else if (ir_distance>=50 && ir_distance<=100)
    192a:	a9 01       	movw	r20, r18
    192c:	42 53       	subi	r20, 0x32	; 50
    192e:	51 09       	sbc	r21, r1
    1930:	43 33       	cpi	r20, 0x33	; 51
    1932:	51 05       	cpc	r21, r1
    1934:	20 f4       	brcc	.+8      	; 0x193e <_Z5task1Pv+0xba>
			onVMotor(1);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b5 de       	rcall	.-662    	; 0x16a6 <_Z8onVMotori>
    193c:	08 c0       	rjmp	.+16     	; 0x194e <_Z5task1Pv+0xca>
		else if (ir_distance>=100 && ir_distance<=150)
    193e:	24 56       	subi	r18, 0x64	; 100
    1940:	31 09       	sbc	r19, r1
    1942:	23 33       	cpi	r18, 0x33	; 51
    1944:	31 05       	cpc	r19, r1
    1946:	18 f4       	brcc	.+6      	; 0x194e <_Z5task1Pv+0xca>
			onVMotor(2);	
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	ac de       	rcall	.-680    	; 0x16a6 <_Z8onVMotori>
		vTaskDelay(1000);	
    194e:	88 ee       	ldi	r24, 0xE8	; 232
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 de 1b 	call	0x37bc	; 0x37bc <vTaskDelay>
		
	}
    1956:	aa cf       	rjmp	.-172    	; 0x18ac <_Z5task1Pv+0x28>

00001958 <_Z5task3Pv>:
	
	}
}

void task3(void	*p)
{
    1958:	cf 93       	push	r28
	if(Serial1.available()>0){
    195a:	8c ea       	ldi	r24, 0xAC	; 172
    195c:	9f e0       	ldi	r25, 0x0F	; 15
    195e:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN14HardwareSerial9availableEv>
    1962:	18 16       	cp	r1, r24
    1964:	19 06       	cpc	r1, r25
    1966:	b4 f5       	brge	.+108    	; 0x19d4 <_Z5task3Pv+0x7c>
		int readyToSend = Serial1.read();
    1968:	8c ea       	ldi	r24, 0xAC	; 172
    196a:	9f e0       	ldi	r25, 0x0F	; 15
    196c:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_ZN14HardwareSerial4readEv>
		if(readyToSend==2){
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	91 05       	cpc	r25, r1
    1974:	f9 f4       	brne	.+62     	; 0x19b4 <_Z5task3Pv+0x5c>
    1976:	c0 e0       	ldi	r28, 0x00	; 0
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1978:	e0 91 ac 0f 	lds	r30, 0x0FAC
    197c:	f0 91 ad 0f 	lds	r31, 0x0FAD
    1980:	01 90       	ld	r0, Z+
    1982:	f0 81       	ld	r31, Z
    1984:	e0 2d       	mov	r30, r0
    1986:	6c 2f       	mov	r22, r28
    1988:	8c ea       	ldi	r24, 0xAC	; 172
    198a:	9f e0       	ldi	r25, 0x0F	; 15
    198c:	19 95       	eicall
    198e:	cf 5f       	subi	r28, 0xFF	; 255
			//Serial1.write(0xef);
			for(int i=0;i<DATA_SIZE;i++){
    1990:	c8 30       	cpi	r28, 0x08	; 8
    1992:	91 f7       	brne	.-28     	; 0x1978 <_Z5task3Pv+0x20>
    1994:	e0 91 ac 0f 	lds	r30, 0x0FAC
    1998:	f0 91 ad 0f 	lds	r31, 0x0FAD
    199c:	01 90       	ld	r0, Z+
    199e:	f0 81       	ld	r31, Z
    19a0:	e0 2d       	mov	r30, r0
    19a2:	6f ef       	ldi	r22, 0xFF	; 255
    19a4:	8c ea       	ldi	r24, 0xAC	; 172
    19a6:	9f e0       	ldi	r25, 0x0F	; 15
    19a8:	19 95       	eicall
				
				//Serial1.println(i);
				//dprintf("sent %d\n",i);
			}
			Serial1.write(0xff);
			Serial1.flush();
    19aa:	8c ea       	ldi	r24, 0xAC	; 172
    19ac:	9f e0       	ldi	r25, 0x0F	; 15
    19ae:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN14HardwareSerial5flushEv>
    19b2:	10 c0       	rjmp	.+32     	; 0x19d4 <_Z5task3Pv+0x7c>
			}else if(readyToSend==3){
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	31 f4       	brne	.+12     	; 0x19c6 <_Z5task3Pv+0x6e>
			analogWrite(5,255);
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	85 e0       	ldi	r24, 0x05	; 5
    19c0:	0e 94 4f 2a 	call	0x549e	; 0x549e <analogWrite>
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <_Z5task3Pv+0x7c>
			}else if(readyToSend==4){
    19c6:	04 97       	sbiw	r24, 0x04	; 4
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <_Z5task3Pv+0x7c>
			analogWrite(5,0);
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	85 e0       	ldi	r24, 0x05	; 5
    19d0:	0e 94 4f 2a 	call	0x549e	; 0x549e <analogWrite>
		}
		
	}

	vTaskDelay(100);
    19d4:	84 e6       	ldi	r24, 0x64	; 100
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 de 1b 	call	0x37bc	; 0x37bc <vTaskDelay>
	
}
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <_Z9handShakev>:
{
	//	Do	nothing.
}

bool handShake(){
	while(Serial1.available()<=0);
    19e0:	8c ea       	ldi	r24, 0xAC	; 172
    19e2:	9f e0       	ldi	r25, 0x0F	; 15
    19e4:	0e 94 2f 24 	call	0x485e	; 0x485e <_ZN14HardwareSerial9availableEv>
    19e8:	18 16       	cp	r1, r24
    19ea:	19 06       	cpc	r1, r25
    19ec:	cc f7       	brge	.-14     	; 0x19e0 <_Z9handShakev>
	
	int incomingByte = Serial1.read();
    19ee:	8c ea       	ldi	r24, 0xAC	; 172
    19f0:	9f e0       	ldi	r25, 0x0F	; 15
    19f2:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_ZN14HardwareSerial4readEv>
	incomingByte += 1;
	if (incomingByte == 2)
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	51 f4       	brne	.+20     	; 0x1a0e <_Z9handShakev+0x2e>
	{
		//Serial.write(1);
		Serial1.print(incomingByte);
    19fa:	4a e0       	ldi	r20, 0x0A	; 10
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	8c ea       	ldi	r24, 0xAC	; 172
    1a04:	9f e0       	ldi	r25, 0x0F	; 15
    1a06:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <_ZN5Print5printEii>
		return true;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	08 95       	ret
	}
	else
	return false;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a10:	08 95       	ret

00001a12 <setup>:


void setup()
{
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
	Serial.begin(115200);	
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	52 ec       	ldi	r21, 0xC2	; 194
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	8e ec       	ldi	r24, 0xCE	; 206
    1a34:	9f e0       	ldi	r25, 0x0F	; 15
    1a36:	0e 94 92 26 	call	0x4d24	; 0x4d24 <_ZN14HardwareSerial5beginEm>
	Serial1.begin(115200);
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	52 ec       	ldi	r21, 0xC2	; 194
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	8c ea       	ldi	r24, 0xAC	; 172
    1a44:	9f e0       	ldi	r25, 0x0F	; 15
    1a46:	0e 94 92 26 	call	0x4d24	; 0x4d24 <_ZN14HardwareSerial5beginEm>
	
	while(isConnected==false)
    1a4a:	80 91 62 08 	lds	r24, 0x0862
    1a4e:	81 11       	cpse	r24, r1
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <setup+0x4a>
	isConnected = handShake();
    1a52:	c6 df       	rcall	.-116    	; 0x19e0 <_Z9handShakev>
    1a54:	80 93 62 08 	sts	0x0862, r24
void setup()
{
	Serial.begin(115200);	
	Serial1.begin(115200);
	
	while(isConnected==false)
    1a58:	88 23       	and	r24, r24
    1a5a:	d9 f3       	breq	.-10     	; 0x1a52 <setup+0x40>
	isConnected = handShake();
	
	//pinMode (STATUS_LED,OUTPUT);  // Status LED
	
	I2C_Init();
    1a5c:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z8I2C_Initv>
	//Serial.println("Pololu MinIMU-9 + Arduino AHRS");

	//digitalWrite(STATUS_LED,LOW);
	//vTaskDelay(1500);
	
	Accel_Init();
    1a60:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z10Accel_Initv>
	Compass_Init();
	Gyro_Init();
    1a64:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z9Gyro_Initv>
	
	//vTaskDelay(20);
	delay(20);
    1a68:	64 e1       	ldi	r22, 0x14	; 20
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 96 29 	call	0x532c	; 0x532c <delay>
    1a74:	00 e2       	ldi	r16, 0x20	; 32
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	fc ee       	ldi	r31, 0xEC	; 236
    1a7c:	ef 2e       	mov	r14, r31
    1a7e:	f7 e0       	ldi	r31, 0x07	; 7
    1a80:	ff 2e       	mov	r15, r31
    1a82:	f0 2d       	mov	r31, r0
    1a84:	c0 ee       	ldi	r28, 0xE0	; 224
    1a86:	d7 e0       	ldi	r29, 0x07	; 7
    1a88:	0f 2e       	mov	r0, r31
    1a8a:	f8 ef       	ldi	r31, 0xF8	; 248
    1a8c:	af 2e       	mov	r10, r31
    1a8e:	f7 e0       	ldi	r31, 0x07	; 7
    1a90:	bf 2e       	mov	r11, r31
    1a92:	f0 2d       	mov	r31, r0
	
	for(int i=0;i<32;i++)    // We take some readings...
	{
		Read_Gyro();
    1a94:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z9Read_Gyrov>
		Read_Accel();
    1a98:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z10Read_Accelv>
    1a9c:	d7 01       	movw	r26, r14
    1a9e:	8c 2e       	mov	r8, r28
    1aa0:	9d 2e       	mov	r9, r29
    1aa2:	fe 01       	movw	r30, r28
		for(int y=0; y<6; y++)   // Cumulate values
		AN_OFFSET[y] += AN[y];
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	9d 91       	ld	r25, X+
    1aa8:	20 81       	ld	r18, Z
    1aaa:	31 81       	ldd	r19, Z+1	; 0x01
    1aac:	82 0f       	add	r24, r18
    1aae:	93 1f       	adc	r25, r19
    1ab0:	81 93       	st	Z+, r24
    1ab2:	91 93       	st	Z+, r25
	
	for(int i=0;i<32;i++)    // We take some readings...
	{
		Read_Gyro();
		Read_Accel();
		for(int y=0; y<6; y++)   // Cumulate values
    1ab4:	aa 15       	cp	r26, r10
    1ab6:	bb 05       	cpc	r27, r11
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <setup+0x92>
		AN_OFFSET[y] += AN[y];
	    //vTaskDelay(20);
		delay(20);
    1aba:	64 e1       	ldi	r22, 0x14	; 20
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 96 29 	call	0x532c	; 0x532c <delay>
    1ac6:	01 50       	subi	r16, 0x01	; 1
    1ac8:	11 09       	sbc	r17, r1
	Gyro_Init();
	
	//vTaskDelay(20);
	delay(20);
	
	for(int i=0;i<32;i++)    // We take some readings...
    1aca:	01 15       	cp	r16, r1
    1acc:	11 05       	cpc	r17, r1
    1ace:	11 f7       	brne	.-60     	; 0x1a94 <setup+0x82>
    1ad0:	0c ee       	ldi	r16, 0xEC	; 236
    1ad2:	17 e0       	ldi	r17, 0x07	; 7
    1ad4:	e8 2d       	mov	r30, r8
    1ad6:	f9 2d       	mov	r31, r9
    1ad8:	df 01       	movw	r26, r30
	    //vTaskDelay(20);
		delay(20);
	}
	
	for(int y=0; y<6; y++)
	AN_OFFSET[y] = AN_OFFSET[y]/32;
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	99 23       	and	r25, r25
    1ae0:	0c f4       	brge	.+2      	; 0x1ae4 <setup+0xd2>
    1ae2:	4f 96       	adiw	r24, 0x1f	; 31
    1ae4:	95 95       	asr	r25
    1ae6:	87 95       	ror	r24
    1ae8:	95 95       	asr	r25
    1aea:	87 95       	ror	r24
    1aec:	95 95       	asr	r25
    1aee:	87 95       	ror	r24
    1af0:	95 95       	asr	r25
    1af2:	87 95       	ror	r24
    1af4:	95 95       	asr	r25
    1af6:	87 95       	ror	r24
    1af8:	8d 93       	st	X+, r24
    1afa:	9c 93       	st	X, r25
    1afc:	32 96       	adiw	r30, 0x02	; 2
		AN_OFFSET[y] += AN[y];
	    //vTaskDelay(20);
		delay(20);
	}
	
	for(int y=0; y<6; y++)
    1afe:	e0 17       	cp	r30, r16
    1b00:	f1 07       	cpc	r31, r17
    1b02:	51 f7       	brne	.-44     	; 0x1ad8 <setup+0xc6>
	AN_OFFSET[y] = AN_OFFSET[y]/32;
	
	AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];
    1b04:	ea ee       	ldi	r30, 0xEA	; 234
    1b06:	f7 e0       	ldi	r31, 0x07	; 7
    1b08:	80 91 56 02 	lds	r24, 0x0256
    1b0c:	d8 2e       	mov	r13, r24
    1b0e:	c1 2c       	mov	r12, r1
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	8c 19       	sub	r24, r12
    1b16:	9d 09       	sbc	r25, r13
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
	
	Serial.println("Offset:");
    1b1c:	68 e9       	ldi	r22, 0x98	; 152
    1b1e:	72 e0       	ldi	r23, 0x02	; 2
    1b20:	8e ec       	ldi	r24, 0xCE	; 206
    1b22:	9f e0       	ldi	r25, 0x0F	; 15
    1b24:	0e 94 3a 28 	call	0x5074	; 0x5074 <_ZN5Print7printlnEPKc>
    1b28:	c8 2d       	mov	r28, r8
    1b2a:	d9 2d       	mov	r29, r9
	for(int y=0; y<6; y++)
	Serial.println(AN_OFFSET[y]);
    1b2c:	69 91       	ld	r22, Y+
    1b2e:	79 91       	ld	r23, Y+
    1b30:	4a e0       	ldi	r20, 0x0A	; 10
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	8e ec       	ldi	r24, 0xCE	; 206
    1b36:	9f e0       	ldi	r25, 0x0F	; 15
    1b38:	0e 94 04 29 	call	0x5208	; 0x5208 <_ZN5Print7printlnEii>
	AN_OFFSET[y] = AN_OFFSET[y]/32;
	
	AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];
	
	Serial.println("Offset:");
	for(int y=0; y<6; y++)
    1b3c:	0c 17       	cp	r16, r28
    1b3e:	1d 07       	cpc	r17, r29
    1b40:	a9 f7       	brne	.-22     	; 0x1b2c <setup+0x11a>
	
	//vTaskDelay(2000);
	//delay(2000);
	//digitalWrite(STATUS_LED,HIGH);
	
	timer=millis();
    1b42:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    1b46:	60 93 fc 07 	sts	0x07FC, r22
    1b4a:	70 93 fd 07 	sts	0x07FD, r23
    1b4e:	80 93 fe 07 	sts	0x07FE, r24
    1b52:	90 93 ff 07 	sts	0x07FF, r25
	delay(20);
    1b56:	64 e1       	ldi	r22, 0x14	; 20
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 96 29 	call	0x532c	; 0x532c <delay>
	//vTaskDelay(20);
	counter=0;
    1b62:	10 92 51 07 	sts	0x0751, r1
    1b66:	10 92 50 07 	sts	0x0750, r1
	prvHeading=compass.heading();
    1b6a:	8a ef       	ldi	r24, 0xFA	; 250
    1b6c:	96 e0       	ldi	r25, 0x06	; 6
    1b6e:	c7 d5       	rcall	.+2958   	; 0x26fe <_ZN6LSM3037headingEv>
    1b70:	60 93 f6 02 	sts	0x02F6, r22
    1b74:	70 93 f7 02 	sts	0x02F7, r23
    1b78:	80 93 f8 02 	sts	0x02F8, r24
    1b7c:	90 93 f9 02 	sts	0x02F9, r25
	dprintf("en");
    1b80:	80 ea       	ldi	r24, 0xA0	; 160
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	9f 93       	push	r25
    1b86:	8f 93       	push	r24
    1b88:	e2 dd       	rcall	.-1084   	; 0x174e <_Z7dprintfPKcz>
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
}
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	9f 90       	pop	r9
    1ba4:	8f 90       	pop	r8
    1ba6:	08 95       	ret

00001ba8 <main>:


int	main(void)
{
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <main+0x14>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <main+0x16>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	init();
    1bc2:	0e 94 c9 29 	call	0x5392	; 0x5392 <init>
	setup();
    1bc6:	25 df       	rcall	.-438    	; 0x1a12 <setup>
	TaskHandle_t	t1,	t2,t3;
	//	Create	tasks
	xTaskCreate(task1,	"Task	1",	STACK_DEPTH,	NULL,	6,	&t1);
    1bc8:	a1 2c       	mov	r10, r1
    1bca:	b1 2c       	mov	r11, r1
    1bcc:	c1 2c       	mov	r12, r1
    1bce:	d1 2c       	mov	r13, r1
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	05 96       	adiw	r24, 0x05	; 5
    1bd4:	7c 01       	movw	r14, r24
    1bd6:	06 e0       	ldi	r16, 0x06	; 6
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	63 ea       	ldi	r22, 0xA3	; 163
    1be2:	72 e0       	ldi	r23, 0x02	; 2
    1be4:	82 e4       	ldi	r24, 0x42	; 66
    1be6:	9c e0       	ldi	r25, 0x0C	; 12
    1be8:	0e 94 68 19 	call	0x32d0	; 0x32d0 <xTaskGenericCreate>
	xTaskCreate(task2,	"Task	2",	STACK_DEPTH,	NULL,	5,	&t2);
    1bec:	ce 01       	movw	r24, r28
    1bee:	03 96       	adiw	r24, 0x03	; 3
    1bf0:	7c 01       	movw	r14, r24
    1bf2:	05 e0       	ldi	r16, 0x05	; 5
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	6a ea       	ldi	r22, 0xAA	; 170
    1bfe:	72 e0       	ldi	r23, 0x02	; 2
    1c00:	8d ed       	ldi	r24, 0xDD	; 221
    1c02:	9b e0       	ldi	r25, 0x0B	; 11
    1c04:	0e 94 68 19 	call	0x32d0	; 0x32d0 <xTaskGenericCreate>
	xTaskCreate(task3,  "Task	3",	STACK_DEPTH,	NULL,	4,	&t3);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	04 e0       	ldi	r16, 0x04	; 4
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	61 eb       	ldi	r22, 0xB1	; 177
    1c1a:	72 e0       	ldi	r23, 0x02	; 2
    1c1c:	8c ea       	ldi	r24, 0xAC	; 172
    1c1e:	9c e0       	ldi	r25, 0x0C	; 12
    1c20:	0e 94 68 19 	call	0x32d0	; 0x32d0 <xTaskGenericCreate>
	vTaskStartScheduler();
    1c24:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <vTaskStartScheduler>
	
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	26 96       	adiw	r28, 0x06	; 6
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	ef 90       	pop	r14
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	bf 90       	pop	r11
    1c48:	af 90       	pop	r10
    1c4a:	08 95       	ret

00001c4c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1c52:	0e 94 99 1a 	call	0x3532	; 0x3532 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1c56:	80 91 6d 08 	lds	r24, 0x086D
    1c5a:	90 91 6e 08 	lds	r25, 0x086E
    1c5e:	89 2b       	or	r24, r25
    1c60:	31 f4       	brne	.+12     	; 0x1c6e <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1c62:	82 e7       	ldi	r24, 0x72	; 114
    1c64:	98 e0       	ldi	r25, 0x08	; 8
    1c66:	90 93 6e 08 	sts	0x086E, r25
    1c6a:	80 93 6d 08 	sts	0x086D, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1c6e:	40 91 6f 08 	lds	r20, 0x086F
    1c72:	50 91 70 08 	lds	r21, 0x0870
    1c76:	9e 01       	movw	r18, r28
    1c78:	24 0f       	add	r18, r20
    1c7a:	35 1f       	adc	r19, r21
    1c7c:	2b 3d       	cpi	r18, 0xDB	; 219
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	38 07       	cpc	r19, r24
    1c82:	70 f4       	brcc	.+28     	; 0x1ca0 <pvPortMalloc+0x54>
    1c84:	42 17       	cp	r20, r18
    1c86:	53 07       	cpc	r21, r19
    1c88:	70 f4       	brcc	.+28     	; 0x1ca6 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1c8a:	c0 91 6d 08 	lds	r28, 0x086D
    1c8e:	d0 91 6e 08 	lds	r29, 0x086E
    1c92:	c4 0f       	add	r28, r20
    1c94:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    1c96:	30 93 70 08 	sts	0x0870, r19
    1c9a:	20 93 6f 08 	sts	0x086F, r18
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1ca0:	c0 e0       	ldi	r28, 0x00	; 0
    1ca2:	d0 e0       	ldi	r29, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <pvPortMalloc+0x5e>
    1ca6:	c0 e0       	ldi	r28, 0x00	; 0
    1ca8:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1caa:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1cae:	ce 01       	movw	r24, r28
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1cb6:	08 95       	ret

00001cb8 <_ZN3L3GC1Ev>:
  Wire.requestFrom(address, (byte)1);
  value = Wire.read();
  Wire.endTransmission();

  return value;
}
    1cb8:	fc 01       	movw	r30, r24
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	87 83       	std	Z+7, r24	; 0x07
    1cbe:	12 86       	std	Z+10, r1	; 0x0a
    1cc0:	11 86       	std	Z+9, r1	; 0x09
    1cc2:	13 86       	std	Z+11, r1	; 0x0b
    1cc4:	08 95       	ret

00001cc6 <_ZN3L3G8writeRegEhh>:
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	ec 01       	movw	r28, r24
    1cd0:	06 2f       	mov	r16, r22
    1cd2:	14 2f       	mov	r17, r20
    1cd4:	68 85       	ldd	r22, Y+8	; 0x08
    1cd6:	86 e1       	ldi	r24, 0x16	; 22
    1cd8:	9f e0       	ldi	r25, 0x0F	; 15
    1cda:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    1cde:	60 2f       	mov	r22, r16
    1ce0:	86 e1       	ldi	r24, 0x16	; 22
    1ce2:	9f e0       	ldi	r25, 0x0F	; 15
    1ce4:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    1ce8:	61 2f       	mov	r22, r17
    1cea:	86 e1       	ldi	r24, 0x16	; 22
    1cec:	9f e0       	ldi	r25, 0x0F	; 15
    1cee:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    1cf2:	86 e1       	ldi	r24, 0x16	; 22
    1cf4:	9f e0       	ldi	r25, 0x0F	; 15
    1cf6:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    1cfa:	8e 83       	std	Y+6, r24	; 0x06
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <_ZN3L3G13enableDefaultEv>:
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	21 f4       	brne	.+8      	; 0x1d1a <_ZN3L3G13enableDefaultEv+0x14>
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	69 e3       	ldi	r22, 0x39	; 57
    1d16:	ce 01       	movw	r24, r28
    1d18:	d6 df       	rcall	.-84     	; 0x1cc6 <_ZN3L3G8writeRegEhh>
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	63 e2       	ldi	r22, 0x23	; 35
    1d1e:	ce 01       	movw	r24, r28
    1d20:	d2 df       	rcall	.-92     	; 0x1cc6 <_ZN3L3G8writeRegEhh>
    1d22:	4f e6       	ldi	r20, 0x6F	; 111
    1d24:	60 e2       	ldi	r22, 0x20	; 32
    1d26:	ce 01       	movw	r24, r28
    1d28:	ce df       	rcall	.-100    	; 0x1cc6 <_ZN3L3G8writeRegEhh>
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <_ZN3L3G4readEv>:

// Reads the 3 gyro channels and stores them in vector g
void L3G::read()
{
    1d30:	9f 92       	push	r9
    1d32:	af 92       	push	r10
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	ec 01       	movw	r28, r24
  Wire.beginTransmission(address);
    1d48:	68 85       	ldd	r22, Y+8	; 0x08
    1d4a:	86 e1       	ldi	r24, 0x16	; 22
    1d4c:	9f e0       	ldi	r25, 0x0F	; 15
    1d4e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1d52:	e0 91 16 0f 	lds	r30, 0x0F16
    1d56:	f0 91 17 0f 	lds	r31, 0x0F17
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	f0 81       	ld	r31, Z
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	68 ea       	ldi	r22, 0xA8	; 168
    1d62:	86 e1       	ldi	r24, 0x16	; 22
    1d64:	9f e0       	ldi	r25, 0x0F	; 15
    1d66:	19 95       	eicall
  // assert the MSB of the address to get the gyro
  // to do slave-transmit subaddress updating.
  Wire.write(OUT_X_L | (1 << 7));
  Wire.endTransmission();
    1d68:	86 e1       	ldi	r24, 0x16	; 22
    1d6a:	9f e0       	ldi	r25, 0x0F	; 15
    1d6c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(address, (byte)6);
    1d70:	46 e0       	ldi	r20, 0x06	; 6
    1d72:	68 85       	ldd	r22, Y+8	; 0x08
    1d74:	86 e1       	ldi	r24, 0x16	; 22
    1d76:	9f e0       	ldi	r25, 0x0F	; 15
    1d78:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN7TwoWire11requestFromEhh>
  
  unsigned int millis_start = millis();
    1d7c:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    1d80:	8b 01       	movw	r16, r22
  while (Wire.available() < 6)
    1d82:	10 c0       	rjmp	.+32     	; 0x1da4 <_ZN3L3G4readEv+0x74>
  {
    if (io_timeout > 0 && ((unsigned int)millis() - millis_start) > io_timeout)
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	89 2b       	or	r24, r25
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <_ZN3L3G4readEv+0x74>
    1d8c:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    1d90:	60 1b       	sub	r22, r16
    1d92:	71 0b       	sbc	r23, r17
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	86 17       	cp	r24, r22
    1d9a:	97 07       	cpc	r25, r23
    1d9c:	18 f4       	brcc	.+6      	; 0x1da4 <_ZN3L3G4readEv+0x74>
    {
      did_timeout = true;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
      return;
    1da2:	32 c0       	rjmp	.+100    	; 0x1e08 <_ZN3L3G4readEv+0xd8>
  Wire.write(OUT_X_L | (1 << 7));
  Wire.endTransmission();
  Wire.requestFrom(address, (byte)6);
  
  unsigned int millis_start = millis();
  while (Wire.available() < 6)
    1da4:	86 e1       	ldi	r24, 0x16	; 22
    1da6:	9f e0       	ldi	r25, 0x0F	; 15
    1da8:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire9availableEv>
    1dac:	06 97       	sbiw	r24, 0x06	; 6
    1dae:	54 f3       	brlt	.-44     	; 0x1d84 <_ZN3L3G4readEv+0x54>
      did_timeout = true;
      return;
    }
  }

  uint8_t xlg = Wire.read();
    1db0:	86 e1       	ldi	r24, 0x16	; 22
    1db2:	9f e0       	ldi	r25, 0x0F	; 15
    1db4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1db8:	a8 2e       	mov	r10, r24
  uint8_t xhg = Wire.read();
    1dba:	86 e1       	ldi	r24, 0x16	; 22
    1dbc:	9f e0       	ldi	r25, 0x0F	; 15
    1dbe:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1dc2:	98 2e       	mov	r9, r24
  uint8_t ylg = Wire.read();
    1dc4:	86 e1       	ldi	r24, 0x16	; 22
    1dc6:	9f e0       	ldi	r25, 0x0F	; 15
    1dc8:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1dcc:	08 2f       	mov	r16, r24
  uint8_t yhg = Wire.read();
    1dce:	86 e1       	ldi	r24, 0x16	; 22
    1dd0:	9f e0       	ldi	r25, 0x0F	; 15
    1dd2:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1dd6:	b8 2e       	mov	r11, r24
  uint8_t zlg = Wire.read();
    1dd8:	86 e1       	ldi	r24, 0x16	; 22
    1dda:	9f e0       	ldi	r25, 0x0F	; 15
    1ddc:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1de0:	18 2f       	mov	r17, r24
  uint8_t zhg = Wire.read();
    1de2:	86 e1       	ldi	r24, 0x16	; 22
    1de4:	9f e0       	ldi	r25, 0x0F	; 15
    1de6:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>

  // combine high and low bytes
  g.x = (int16_t)(xhg << 8 | xlg);
    1dea:	d9 2c       	mov	r13, r9
    1dec:	c1 2c       	mov	r12, r1
    1dee:	ca 28       	or	r12, r10
    1df0:	d9 82       	std	Y+1, r13	; 0x01
    1df2:	c8 82       	st	Y, r12
  g.y = (int16_t)(yhg << 8 | ylg);
    1df4:	fb 2c       	mov	r15, r11
    1df6:	e1 2c       	mov	r14, r1
    1df8:	e0 2a       	or	r14, r16
    1dfa:	fb 82       	std	Y+3, r15	; 0x03
    1dfc:	ea 82       	std	Y+2, r14	; 0x02
  g.z = (int16_t)(zhg << 8 | zlg);
    1dfe:	98 2f       	mov	r25, r24
    1e00:	88 27       	eor	r24, r24
    1e02:	81 2b       	or	r24, r17
    1e04:	9d 83       	std	Y+5, r25	; 0x05
    1e06:	8c 83       	std	Y+4, r24	; 0x04
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	08 95       	ret

00001e20 <_ZN3L3G7testRegEhNS_7regAddrE>:
}

// Private Methods //////////////////////////////////////////////////////////////

int L3G::testReg(byte address, regAddr reg)
{
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	c6 2f       	mov	r28, r22
    1e26:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    1e28:	86 e1       	ldi	r24, 0x16	; 22
    1e2a:	9f e0       	ldi	r25, 0x0F	; 15
    1e2c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    1e30:	6d 2f       	mov	r22, r29
    1e32:	86 e1       	ldi	r24, 0x16	; 22
    1e34:	9f e0       	ldi	r25, 0x0F	; 15
    1e36:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    1e3a:	86 e1       	ldi	r24, 0x16	; 22
    1e3c:	9f e0       	ldi	r25, 0x0F	; 15
    1e3e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    1e42:	81 11       	cpse	r24, r1
    1e44:	11 c0       	rjmp	.+34     	; 0x1e68 <_ZN3L3G7testRegEhNS_7regAddrE+0x48>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	6c 2f       	mov	r22, r28
    1e4a:	86 e1       	ldi	r24, 0x16	; 22
    1e4c:	9f e0       	ldi	r25, 0x0F	; 15
    1e4e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    1e52:	86 e1       	ldi	r24, 0x16	; 22
    1e54:	9f e0       	ldi	r25, 0x0F	; 15
    1e56:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire9availableEv>
    1e5a:	89 2b       	or	r24, r25
    1e5c:	41 f0       	breq	.+16     	; 0x1e6e <_ZN3L3G7testRegEhNS_7regAddrE+0x4e>
  {
    return Wire.read();
    1e5e:	86 e1       	ldi	r24, 0x16	; 22
    1e60:	9f e0       	ldi	r25, 0x0F	; 15
    1e62:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <_ZN3L3G7testRegEhNS_7regAddrE+0x52>
{
  Wire.beginTransmission(address);
  Wire.write((byte)reg);
  if (Wire.endTransmission() != 0)
  {
    return TEST_REG_ERROR;
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <_ZN3L3G7testRegEhNS_7regAddrE+0x52>
  {
    return Wire.read();
  }
  else
  {
    return TEST_REG_ERROR;
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret

00001e78 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool L3G::init(deviceType device, sa0State sa0)
{
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	ec 01       	movw	r28, r24
    1e82:	16 2f       	mov	r17, r22
    1e84:	04 2f       	mov	r16, r20
  int id;
  
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    1e86:	63 30       	cpi	r22, 0x03	; 3
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x14>
    1e8a:	56 c0       	rjmp	.+172    	; 0x1f38 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xc0>
    1e8c:	42 30       	cpi	r20, 0x02	; 2
    1e8e:	c9 f5       	brne	.+114    	; 0x1f02 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x8a>
    1e90:	56 c0       	rjmp	.+172    	; 0x1f3e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xc6>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
        if (device == device_auto)
    1e92:	13 30       	cpi	r17, 0x03	; 3
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x20>
    1e96:	58 c0       	rjmp	.+176    	; 0x1f48 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd0>
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1e98:	87 3d       	cpi	r24, 0xD7	; 215
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x28>
    1e9e:	58 c0       	rjmp	.+176    	; 0x1f50 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd8>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    1ea0:	01 e0       	ldi	r16, 0x01	; 1
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1ea2:	11 e0       	ldi	r17, 0x01	; 1
    1ea4:	2c c0       	rjmp	.+88     	; 0x1efe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    1ea6:	01 30       	cpi	r16, 0x01	; 1
    1ea8:	91 f0       	breq	.+36     	; 0x1ece <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
    1eaa:	4f e0       	ldi	r20, 0x0F	; 15
    1eac:	6a e6       	ldi	r22, 0x6A	; 106
    1eae:	ce 01       	movw	r24, r28
    1eb0:	b7 df       	rcall	.-146    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	92 07       	cpc	r25, r18
    1eb8:	51 f0       	breq	.+20     	; 0x1ece <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
        if (device == device_auto)
    1eba:	13 30       	cpi	r17, 0x03	; 3
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x48>
    1ebe:	46 c0       	rjmp	.+140    	; 0x1f4c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd4>
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1ec0:	87 3d       	cpi	r24, 0xD7	; 215
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x50>
    1ec6:	47 c0       	rjmp	.+142    	; 0x1f56 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xde>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    1ec8:	00 e0       	ldi	r16, 0x00	; 0
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1eca:	12 e0       	ldi	r17, 0x02	; 2
    1ecc:	18 c0       	rjmp	.+48     	; 0x1efe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
        }
      }
    }
    
    // check for L3G4200D if device is still unidentified or was specified to be this type
    if (device == device_auto || device == device_4200D)
    1ece:	13 30       	cpi	r17, 0x03	; 3
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5e>
    1ed2:	11 11       	cpse	r17, r1
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
    {
      if (sa0 != sa0_low && testReg(L3G4200D_SA0_HIGH_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
    1ed6:	00 23       	and	r16, r16
    1ed8:	49 f0       	breq	.+18     	; 0x1eec <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x74>
    1eda:	4f e0       	ldi	r20, 0x0F	; 15
    1edc:	69 e6       	ldi	r22, 0x69	; 105
    1ede:	ce 01       	movw	r24, r28
    1ee0:	9f df       	rcall	.-194    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1ee2:	83 3d       	cpi	r24, 0xD3	; 211
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	d1 f1       	breq	.+116    	; 0x1f5c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xe4>
      {
        // device responds to address 1101001; it's a 4200D with SA0 high
        device = device_4200D;
        sa0 = sa0_high;
      }
      else if (sa0 != sa0_high && testReg(L3G4200D_SA0_LOW_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
    1ee8:	01 30       	cpi	r16, 0x01	; 1
    1eea:	39 f0       	breq	.+14     	; 0x1efa <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x82>
    1eec:	4f e0       	ldi	r20, 0x0F	; 15
    1eee:	68 e6       	ldi	r22, 0x68	; 104
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	96 df       	rcall	.-212    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1ef4:	83 3d       	cpi	r24, 0xD3	; 211
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	99 f1       	breq	.+102    	; 0x1f60 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xe8>
        sa0 = sa0_low;
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    1efa:	13 30       	cpi	r17, 0x03	; 3
    1efc:	b9 f0       	breq	.+46     	; 0x1f2c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xb4>
    1efe:	02 30       	cpi	r16, 0x02	; 2
    1f00:	b9 f0       	breq	.+46     	; 0x1f30 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xb8>
    {
      return false;
    }
  }
  
  _device = device;
    1f02:	1f 83       	std	Y+7, r17	; 0x07

  // set device address
  switch (device)
    1f04:	11 23       	and	r17, r17
    1f06:	51 f0       	breq	.+20     	; 0x1f1c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xa4>
    1f08:	13 30       	cpi	r17, 0x03	; 3
    1f0a:	a0 f4       	brcc	.+40     	; 0x1f34 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xbc>
  {
    case device_D20H:
    case device_D20:
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
    1f0c:	01 30       	cpi	r16, 0x01	; 1
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x9c>
    1f10:	8b e6       	ldi	r24, 0x6B	; 107
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x9e>
    1f14:	8a e6       	ldi	r24, 0x6A	; 106
    1f16:	88 87       	std	Y+8, r24	; 0x08
    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
  switch (device)
  {
    case device_D20H:
    case device_D20:
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
      break;
    1f1a:	41 c0       	rjmp	.+130    	; 0x1f9e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>

    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
    1f1c:	01 30       	cpi	r16, 0x01	; 1
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xac>
    1f20:	89 e6       	ldi	r24, 0x69	; 105
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xae>
    1f24:	88 e6       	ldi	r24, 0x68	; 104
    1f26:	88 87       	std	Y+8, r24	; 0x08
      break;
  }
  
  return true;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
      break;

    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
    1f2a:	39 c0       	rjmp	.+114    	; 0x1f9e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    {
      return false;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	37 c0       	rjmp	.+110    	; 0x1f9e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	35 c0       	rjmp	.+106    	; 0x1f9e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	33 c0       	rjmp	.+102    	; 0x1f9e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    1f38:	44 23       	and	r20, r20
    1f3a:	41 f1       	breq	.+80     	; 0x1f8c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x114>
    1f3c:	1e c0       	rjmp	.+60     	; 0x1f7a <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x102>
  
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	86 0f       	add	r24, r22
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	30 f6       	brcc	.-116    	; 0x1ed2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xee>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    1f48:	01 e0       	ldi	r16, 0x01	; 1
    1f4a:	c3 cf       	rjmp	.-122    	; 0x1ed2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	c1 cf       	rjmp	.-126    	; 0x1ed2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    1f50:	01 e0       	ldi	r16, 0x01	; 1
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1f52:	12 e0       	ldi	r17, 0x02	; 2
    1f54:	d4 cf       	rjmp	.-88     	; 0x1efe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    1f56:	00 e0       	ldi	r16, 0x00	; 0
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1f58:	11 e0       	ldi	r17, 0x01	; 1
    1f5a:	d1 cf       	rjmp	.-94     	; 0x1efe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
    {
      if (sa0 != sa0_low && testReg(L3G4200D_SA0_HIGH_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
      {
        // device responds to address 1101001; it's a 4200D with SA0 high
        device = device_4200D;
        sa0 = sa0_high;
    1f5c:	01 e0       	ldi	r16, 0x01	; 1
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xea>
      }
      else if (sa0 != sa0_high && testReg(L3G4200D_SA0_LOW_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
      {
        // device responds to address 1101000; it's a 4200D with SA0 low
        device = device_4200D;
        sa0 = sa0_low;
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    {
      return false;
    }
  }
  
  _device = device;
    1f62:	1f 82       	std	Y+7, r1	; 0x07
    1f64:	db cf       	rjmp	.-74     	; 0x1f1c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xa4>
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    1f66:	4f e0       	ldi	r20, 0x0F	; 15
    1f68:	6b e6       	ldi	r22, 0x6B	; 107
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	59 df       	rcall	.-334    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f70:	2f ef       	ldi	r18, 0xFF	; 255
    1f72:	92 07       	cpc	r25, r18
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x100>
    1f76:	8d cf       	rjmp	.-230    	; 0x1e92 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x1a>
    1f78:	98 cf       	rjmp	.-208    	; 0x1eaa <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x32>
    1f7a:	4f e0       	ldi	r20, 0x0F	; 15
    1f7c:	6b e6       	ldi	r22, 0x6B	; 107
    1f7e:	50 df       	rcall	.-352    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1f80:	8f 3f       	cpi	r24, 0xFF	; 255
    1f82:	2f ef       	ldi	r18, 0xFF	; 255
    1f84:	92 07       	cpc	r25, r18
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x112>
    1f88:	87 cf       	rjmp	.-242    	; 0x1e98 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x20>
    1f8a:	8d cf       	rjmp	.-230    	; 0x1ea6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x2e>
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    1f8c:	4f e0       	ldi	r20, 0x0F	; 15
    1f8e:	6a e6       	ldi	r22, 0x6A	; 106
    1f90:	47 df       	rcall	.-370    	; 0x1e20 <_ZN3L3G7testRegEhNS_7regAddrE>
    1f92:	8f 3f       	cpi	r24, 0xFF	; 255
    1f94:	2f ef       	ldi	r18, 0xFF	; 255
    1f96:	92 07       	cpc	r25, r18
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x124>
    1f9a:	92 cf       	rjmp	.-220    	; 0x1ec0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x48>
    1f9c:	98 cf       	rjmp	.-208    	; 0x1ece <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	08 95       	ret

00001fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1fa8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1faa:	03 96       	adiw	r24, 0x03	; 3
    1fac:	92 83       	std	Z+2, r25	; 0x02
    1fae:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1fb0:	2f ef       	ldi	r18, 0xFF	; 255
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	34 83       	std	Z+4, r19	; 0x04
    1fb6:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fb8:	96 83       	std	Z+6, r25	; 0x06
    1fba:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fbc:	90 87       	std	Z+8, r25	; 0x08
    1fbe:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1fc0:	10 82       	st	Z, r1
    1fc2:	08 95       	ret

00001fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	11 86       	std	Z+9, r1	; 0x09
    1fc8:	10 86       	std	Z+8, r1	; 0x08
    1fca:	08 95       	ret

00001fcc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	9c 01       	movw	r18, r24
    1fd2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	cd 91       	ld	r28, X+
    1fda:	dc 91       	ld	r29, X
    1fdc:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1fde:	d3 83       	std	Z+3, r29	; 0x03
    1fe0:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	95 83       	std	Z+5, r25	; 0x05
    1fe8:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	dc 01       	movw	r26, r24
    1ff0:	13 96       	adiw	r26, 0x03	; 3
    1ff2:	7c 93       	st	X, r23
    1ff4:	6e 93       	st	-X, r22
    1ff6:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1ff8:	7d 83       	std	Y+5, r23	; 0x05
    1ffa:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ffc:	31 87       	std	Z+9, r19	; 0x09
    1ffe:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2000:	f9 01       	movw	r30, r18
    2002:	80 81       	ld	r24, Z
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	80 83       	st	Z, r24
}
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2014:	48 81       	ld	r20, Y
    2016:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2018:	4f 3f       	cpi	r20, 0xFF	; 255
    201a:	2f ef       	ldi	r18, 0xFF	; 255
    201c:	52 07       	cpc	r21, r18
    201e:	21 f4       	brne	.+8      	; 0x2028 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2020:	fc 01       	movw	r30, r24
    2022:	a7 81       	ldd	r26, Z+7	; 0x07
    2024:	b0 85       	ldd	r27, Z+8	; 0x08
    2026:	0d c0       	rjmp	.+26     	; 0x2042 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2028:	dc 01       	movw	r26, r24
    202a:	13 96       	adiw	r26, 0x03	; 3
    202c:	12 96       	adiw	r26, 0x02	; 2
    202e:	ed 91       	ld	r30, X+
    2030:	fc 91       	ld	r31, X
    2032:	13 97       	sbiw	r26, 0x03	; 3
    2034:	20 81       	ld	r18, Z
    2036:	31 81       	ldd	r19, Z+1	; 0x01
    2038:	42 17       	cp	r20, r18
    203a:	53 07       	cpc	r21, r19
    203c:	10 f0       	brcs	.+4      	; 0x2042 <vListInsert+0x34>
    203e:	df 01       	movw	r26, r30
    2040:	f5 cf       	rjmp	.-22     	; 0x202c <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2042:	12 96       	adiw	r26, 0x02	; 2
    2044:	ed 91       	ld	r30, X+
    2046:	fc 91       	ld	r31, X
    2048:	13 97       	sbiw	r26, 0x03	; 3
    204a:	fb 83       	std	Y+3, r31	; 0x03
    204c:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    204e:	d5 83       	std	Z+5, r29	; 0x05
    2050:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2052:	bd 83       	std	Y+5, r27	; 0x05
    2054:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    2056:	13 96       	adiw	r26, 0x03	; 3
    2058:	dc 93       	st	X, r29
    205a:	ce 93       	st	-X, r28
    205c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    205e:	99 87       	std	Y+9, r25	; 0x09
    2060:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2062:	fc 01       	movw	r30, r24
    2064:	20 81       	ld	r18, Z
    2066:	2f 5f       	subi	r18, 0xFF	; 255
    2068:	20 83       	st	Z, r18
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2076:	a0 85       	ldd	r26, Z+8	; 0x08
    2078:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    207a:	c2 81       	ldd	r28, Z+2	; 0x02
    207c:	d3 81       	ldd	r29, Z+3	; 0x03
    207e:	84 81       	ldd	r24, Z+4	; 0x04
    2080:	95 81       	ldd	r25, Z+5	; 0x05
    2082:	9d 83       	std	Y+5, r25	; 0x05
    2084:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2086:	c4 81       	ldd	r28, Z+4	; 0x04
    2088:	d5 81       	ldd	r29, Z+5	; 0x05
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	9b 83       	std	Y+3, r25	; 0x03
    2090:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	cd 91       	ld	r28, X+
    2096:	dc 91       	ld	r29, X
    2098:	12 97       	sbiw	r26, 0x02	; 2
    209a:	ce 17       	cp	r28, r30
    209c:	df 07       	cpc	r29, r31
    209e:	31 f4       	brne	.+12     	; 0x20ac <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	12 96       	adiw	r26, 0x02	; 2
    20a6:	9c 93       	st	X, r25
    20a8:	8e 93       	st	-X, r24
    20aa:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    20ac:	11 86       	std	Z+9, r1	; 0x09
    20ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    20b0:	8c 91       	ld	r24, X
    20b2:	81 50       	subi	r24, 0x01	; 1
    20b4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	08 95       	ret

000020bc <_ZN6LSM303C1Ev>:
// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303::read(void)
{
  readAcc();
  readMag();
}
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	86 e0       	ldi	r24, 0x06	; 6
    20c4:	e1 e6       	ldi	r30, 0x61	; 97
    20c6:	f2 e0       	ldi	r31, 0x02	; 2
    20c8:	de 01       	movw	r26, r28
    20ca:	52 96       	adiw	r26, 0x12	; 18
    20cc:	01 90       	ld	r0, Z+
    20ce:	0d 92       	st	X+, r0
    20d0:	8a 95       	dec	r24
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <_ZN6LSM303C1Ev+0x10>
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	e7 e6       	ldi	r30, 0x67	; 103
    20d8:	f2 e0       	ldi	r31, 0x02	; 2
    20da:	de 01       	movw	r26, r28
    20dc:	1c 96       	adiw	r26, 0x0c	; 12
    20de:	01 90       	ld	r0, Z+
    20e0:	0d 92       	st	X+, r0
    20e2:	8a 95       	dec	r24
    20e4:	e1 f7       	brne	.-8      	; 0x20de <_ZN6LSM303C1Ev+0x22>
    20e6:	84 e0       	ldi	r24, 0x04	; 4
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	1c a2       	std	Y+36, r1	; 0x24
    20ec:	1b a2       	std	Y+35, r1	; 0x23
    20ee:	1d a2       	std	Y+37, r1	; 0x25
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret

000020f6 <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>:
    20f6:	4f 92       	push	r4
    20f8:	5f 92       	push	r5
    20fa:	6f 92       	push	r6
    20fc:	7f 92       	push	r7
    20fe:	8f 92       	push	r8
    2100:	9f 92       	push	r9
    2102:	af 92       	push	r10
    2104:	bf 92       	push	r11
    2106:	cf 92       	push	r12
    2108:	df 92       	push	r13
    210a:	ef 92       	push	r14
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	00 d0       	rcall	.+0      	; 0x2118 <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE+0x22>
    2118:	1f 92       	push	r1
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	8c 01       	movw	r16, r24
    2120:	dc 01       	movw	r26, r24
    2122:	4d 90       	ld	r4, X+
    2124:	5d 90       	ld	r5, X+
    2126:	6d 90       	ld	r6, X+
    2128:	7c 90       	ld	r7, X
    212a:	13 97       	sbiw	r26, 0x03	; 3
    212c:	14 96       	adiw	r26, 0x04	; 4
    212e:	8d 90       	ld	r8, X+
    2130:	9d 90       	ld	r9, X+
    2132:	ad 90       	ld	r10, X+
    2134:	bc 90       	ld	r11, X
    2136:	17 97       	sbiw	r26, 0x07	; 7
    2138:	18 96       	adiw	r26, 0x08	; 8
    213a:	8d 91       	ld	r24, X+
    213c:	9d 91       	ld	r25, X+
    213e:	0d 90       	ld	r0, X+
    2140:	bc 91       	ld	r27, X
    2142:	a0 2d       	mov	r26, r0
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	ab 83       	std	Y+3, r26	; 0x03
    214a:	bc 83       	std	Y+4, r27	; 0x04
    214c:	a3 01       	movw	r20, r6
    214e:	92 01       	movw	r18, r4
    2150:	c3 01       	movw	r24, r6
    2152:	b2 01       	movw	r22, r4
    2154:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2158:	6b 01       	movw	r12, r22
    215a:	7c 01       	movw	r14, r24
    215c:	a5 01       	movw	r20, r10
    215e:	94 01       	movw	r18, r8
    2160:	c5 01       	movw	r24, r10
    2162:	b4 01       	movw	r22, r8
    2164:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	c7 01       	movw	r24, r14
    216e:	b6 01       	movw	r22, r12
    2170:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    2174:	6b 01       	movw	r12, r22
    2176:	7c 01       	movw	r14, r24
    2178:	29 81       	ldd	r18, Y+1	; 0x01
    217a:	3a 81       	ldd	r19, Y+2	; 0x02
    217c:	4b 81       	ldd	r20, Y+3	; 0x03
    217e:	5c 81       	ldd	r21, Y+4	; 0x04
    2180:	ca 01       	movw	r24, r20
    2182:	b9 01       	movw	r22, r18
    2184:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	c7 01       	movw	r24, r14
    218e:	b6 01       	movw	r22, r12
    2190:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    2194:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <sqrt>
    2198:	6b 01       	movw	r12, r22
    219a:	7c 01       	movw	r14, r24
    219c:	9b 01       	movw	r18, r22
    219e:	ac 01       	movw	r20, r24
    21a0:	c3 01       	movw	r24, r6
    21a2:	b2 01       	movw	r22, r4
    21a4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    21a8:	f8 01       	movw	r30, r16
    21aa:	60 83       	st	Z, r22
    21ac:	71 83       	std	Z+1, r23	; 0x01
    21ae:	82 83       	std	Z+2, r24	; 0x02
    21b0:	93 83       	std	Z+3, r25	; 0x03
    21b2:	a7 01       	movw	r20, r14
    21b4:	96 01       	movw	r18, r12
    21b6:	c5 01       	movw	r24, r10
    21b8:	b4 01       	movw	r22, r8
    21ba:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    21be:	d8 01       	movw	r26, r16
    21c0:	14 96       	adiw	r26, 0x04	; 4
    21c2:	6d 93       	st	X+, r22
    21c4:	7d 93       	st	X+, r23
    21c6:	8d 93       	st	X+, r24
    21c8:	9c 93       	st	X, r25
    21ca:	17 97       	sbiw	r26, 0x07	; 7
    21cc:	a7 01       	movw	r20, r14
    21ce:	96 01       	movw	r18, r12
    21d0:	69 81       	ldd	r22, Y+1	; 0x01
    21d2:	7a 81       	ldd	r23, Y+2	; 0x02
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    21dc:	f8 01       	movw	r30, r16
    21de:	60 87       	std	Z+8, r22	; 0x08
    21e0:	71 87       	std	Z+9, r23	; 0x09
    21e2:	82 87       	std	Z+10, r24	; 0x0a
    21e4:	93 87       	std	Z+11, r25	; 0x0b
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	9f 90       	pop	r9
    2204:	8f 90       	pop	r8
    2206:	7f 90       	pop	r7
    2208:	6f 90       	pop	r6
    220a:	5f 90       	pop	r5
    220c:	4f 90       	pop	r4
    220e:	08 95       	ret

00002210 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>:
    2210:	4f 92       	push	r4
    2212:	5f 92       	push	r5
    2214:	6f 92       	push	r6
    2216:	7f 92       	push	r7
    2218:	8f 92       	push	r8
    221a:	9f 92       	push	r9
    221c:	af 92       	push	r10
    221e:	bf 92       	push	r11
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	aa 97       	sbiw	r28, 0x2a	; 42
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	8c 01       	movw	r16, r24
    2242:	29 8f       	std	Y+25, r18	; 0x19
    2244:	3a 8f       	std	Y+26, r19	; 0x1a
    2246:	4b 8f       	std	Y+27, r20	; 0x1b
    2248:	5c 8f       	std	Y+28, r21	; 0x1c
    224a:	6d 8f       	std	Y+29, r22	; 0x1d
    224c:	7e 8f       	std	Y+30, r23	; 0x1e
    224e:	dc 01       	movw	r26, r24
    2250:	16 96       	adiw	r26, 0x06	; 6
    2252:	cd 90       	ld	r12, X+
    2254:	dc 90       	ld	r13, X
    2256:	17 97       	sbiw	r26, 0x07	; 7
    2258:	ee 24       	eor	r14, r14
    225a:	d7 fc       	sbrc	r13, 7
    225c:	e0 94       	com	r14
    225e:	fe 2c       	mov	r15, r14
    2260:	52 96       	adiw	r26, 0x12	; 18
    2262:	4d 91       	ld	r20, X+
    2264:	5c 91       	ld	r21, X
    2266:	53 97       	sbiw	r26, 0x13	; 19
    2268:	66 27       	eor	r22, r22
    226a:	57 fd       	sbrc	r21, 7
    226c:	60 95       	com	r22
    226e:	76 2f       	mov	r23, r22
    2270:	1c 96       	adiw	r26, 0x0c	; 12
    2272:	8d 91       	ld	r24, X+
    2274:	9c 91       	ld	r25, X
    2276:	1d 97       	sbiw	r26, 0x0d	; 13
    2278:	aa 27       	eor	r26, r26
    227a:	97 fd       	sbrc	r25, 7
    227c:	a0 95       	com	r26
    227e:	ba 2f       	mov	r27, r26
    2280:	48 0f       	add	r20, r24
    2282:	59 1f       	adc	r21, r25
    2284:	6a 1f       	adc	r22, r26
    2286:	7b 1f       	adc	r23, r27
    2288:	db 01       	movw	r26, r22
    228a:	ca 01       	movw	r24, r20
    228c:	77 23       	and	r23, r23
    228e:	1c f4       	brge	.+6      	; 0x2296 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x86>
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	a1 1d       	adc	r26, r1
    2294:	b1 1d       	adc	r27, r1
    2296:	b5 95       	asr	r27
    2298:	a7 95       	ror	r26
    229a:	97 95       	ror	r25
    229c:	87 95       	ror	r24
    229e:	a7 01       	movw	r20, r14
    22a0:	96 01       	movw	r18, r12
    22a2:	28 1b       	sub	r18, r24
    22a4:	39 0b       	sbc	r19, r25
    22a6:	4a 0b       	sbc	r20, r26
    22a8:	5b 0b       	sbc	r21, r27
    22aa:	2f 8f       	std	Y+31, r18	; 0x1f
    22ac:	38 a3       	std	Y+32, r19	; 0x20
    22ae:	49 a3       	std	Y+33, r20	; 0x21
    22b0:	5a a3       	std	Y+34, r21	; 0x22
    22b2:	d8 01       	movw	r26, r16
    22b4:	18 96       	adiw	r26, 0x08	; 8
    22b6:	cd 90       	ld	r12, X+
    22b8:	dc 90       	ld	r13, X
    22ba:	19 97       	sbiw	r26, 0x09	; 9
    22bc:	ee 24       	eor	r14, r14
    22be:	d7 fc       	sbrc	r13, 7
    22c0:	e0 94       	com	r14
    22c2:	fe 2c       	mov	r15, r14
    22c4:	54 96       	adiw	r26, 0x14	; 20
    22c6:	4d 91       	ld	r20, X+
    22c8:	5c 91       	ld	r21, X
    22ca:	55 97       	sbiw	r26, 0x15	; 21
    22cc:	66 27       	eor	r22, r22
    22ce:	57 fd       	sbrc	r21, 7
    22d0:	60 95       	com	r22
    22d2:	76 2f       	mov	r23, r22
    22d4:	1e 96       	adiw	r26, 0x0e	; 14
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	1f 97       	sbiw	r26, 0x0f	; 15
    22dc:	aa 27       	eor	r26, r26
    22de:	97 fd       	sbrc	r25, 7
    22e0:	a0 95       	com	r26
    22e2:	ba 2f       	mov	r27, r26
    22e4:	48 0f       	add	r20, r24
    22e6:	59 1f       	adc	r21, r25
    22e8:	6a 1f       	adc	r22, r26
    22ea:	7b 1f       	adc	r23, r27
    22ec:	db 01       	movw	r26, r22
    22ee:	ca 01       	movw	r24, r20
    22f0:	77 23       	and	r23, r23
    22f2:	1c f4       	brge	.+6      	; 0x22fa <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0xea>
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	a1 1d       	adc	r26, r1
    22f8:	b1 1d       	adc	r27, r1
    22fa:	b5 95       	asr	r27
    22fc:	a7 95       	ror	r26
    22fe:	97 95       	ror	r25
    2300:	87 95       	ror	r24
    2302:	a7 01       	movw	r20, r14
    2304:	96 01       	movw	r18, r12
    2306:	28 1b       	sub	r18, r24
    2308:	39 0b       	sbc	r19, r25
    230a:	4a 0b       	sbc	r20, r26
    230c:	5b 0b       	sbc	r21, r27
    230e:	2b a3       	std	Y+35, r18	; 0x23
    2310:	3c a3       	std	Y+36, r19	; 0x24
    2312:	4d a3       	std	Y+37, r20	; 0x25
    2314:	5e a3       	std	Y+38, r21	; 0x26
    2316:	d8 01       	movw	r26, r16
    2318:	1a 96       	adiw	r26, 0x0a	; 10
    231a:	4d 90       	ld	r4, X+
    231c:	5c 90       	ld	r5, X
    231e:	1b 97       	sbiw	r26, 0x0b	; 11
    2320:	66 24       	eor	r6, r6
    2322:	57 fc       	sbrc	r5, 7
    2324:	60 94       	com	r6
    2326:	76 2c       	mov	r7, r6
    2328:	56 96       	adiw	r26, 0x16	; 22
    232a:	4d 91       	ld	r20, X+
    232c:	5c 91       	ld	r21, X
    232e:	57 97       	sbiw	r26, 0x17	; 23
    2330:	66 27       	eor	r22, r22
    2332:	57 fd       	sbrc	r21, 7
    2334:	60 95       	com	r22
    2336:	76 2f       	mov	r23, r22
    2338:	50 96       	adiw	r26, 0x10	; 16
    233a:	8d 91       	ld	r24, X+
    233c:	9c 91       	ld	r25, X
    233e:	51 97       	sbiw	r26, 0x11	; 17
    2340:	aa 27       	eor	r26, r26
    2342:	97 fd       	sbrc	r25, 7
    2344:	a0 95       	com	r26
    2346:	ba 2f       	mov	r27, r26
    2348:	48 0f       	add	r20, r24
    234a:	59 1f       	adc	r21, r25
    234c:	6a 1f       	adc	r22, r26
    234e:	7b 1f       	adc	r23, r27
    2350:	db 01       	movw	r26, r22
    2352:	ca 01       	movw	r24, r20
    2354:	77 23       	and	r23, r23
    2356:	1c f4       	brge	.+6      	; 0x235e <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x14e>
    2358:	01 96       	adiw	r24, 0x01	; 1
    235a:	a1 1d       	adc	r26, r1
    235c:	b1 1d       	adc	r27, r1
    235e:	b5 95       	asr	r27
    2360:	a7 95       	ror	r26
    2362:	97 95       	ror	r25
    2364:	87 95       	ror	r24
    2366:	48 1a       	sub	r4, r24
    2368:	59 0a       	sbc	r5, r25
    236a:	6a 0a       	sbc	r6, r26
    236c:	7b 0a       	sbc	r7, r27
    236e:	f8 01       	movw	r30, r16
    2370:	84 80       	ldd	r8, Z+4	; 0x04
    2372:	95 80       	ldd	r9, Z+5	; 0x05
    2374:	aa 24       	eor	r10, r10
    2376:	97 fc       	sbrc	r9, 7
    2378:	a0 94       	com	r10
    237a:	ba 2c       	mov	r11, r10
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	9c 01       	movw	r18, r24
    2382:	44 27       	eor	r20, r20
    2384:	37 fd       	sbrc	r19, 7
    2386:	40 95       	com	r20
    2388:	54 2f       	mov	r21, r20
    238a:	2f a3       	std	Y+39, r18	; 0x27
    238c:	38 a7       	std	Y+40, r19	; 0x28
    238e:	49 a7       	std	Y+41, r20	; 0x29
    2390:	5a a7       	std	Y+42, r21	; 0x2a
    2392:	2b a1       	ldd	r18, Y+35	; 0x23
    2394:	3c a1       	ldd	r19, Y+36	; 0x24
    2396:	4d a1       	ldd	r20, Y+37	; 0x25
    2398:	5e a1       	ldd	r21, Y+38	; 0x26
    239a:	c5 01       	movw	r24, r10
    239c:	b4 01       	movw	r22, r8
    239e:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    23a2:	6b 01       	movw	r12, r22
    23a4:	7c 01       	movw	r14, r24
    23a6:	a3 01       	movw	r20, r6
    23a8:	92 01       	movw	r18, r4
    23aa:	6f a1       	ldd	r22, Y+39	; 0x27
    23ac:	78 a5       	ldd	r23, Y+40	; 0x28
    23ae:	89 a5       	ldd	r24, Y+41	; 0x29
    23b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b2:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    23b6:	a7 01       	movw	r20, r14
    23b8:	96 01       	movw	r18, r12
    23ba:	26 1b       	sub	r18, r22
    23bc:	37 0b       	sbc	r19, r23
    23be:	48 0b       	sbc	r20, r24
    23c0:	59 0b       	sbc	r21, r25
    23c2:	ca 01       	movw	r24, r20
    23c4:	b9 01       	movw	r22, r18
    23c6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    23ca:	6d 87       	std	Y+13, r22	; 0x0d
    23cc:	7e 87       	std	Y+14, r23	; 0x0e
    23ce:	8f 87       	std	Y+15, r24	; 0x0f
    23d0:	98 8b       	std	Y+16, r25	; 0x10
    23d2:	d8 01       	movw	r26, r16
    23d4:	cd 90       	ld	r12, X+
    23d6:	dc 90       	ld	r13, X
    23d8:	ee 24       	eor	r14, r14
    23da:	d7 fc       	sbrc	r13, 7
    23dc:	e0 94       	com	r14
    23de:	fe 2c       	mov	r15, r14
    23e0:	a3 01       	movw	r20, r6
    23e2:	92 01       	movw	r18, r4
    23e4:	c7 01       	movw	r24, r14
    23e6:	b6 01       	movw	r22, r12
    23e8:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    23ec:	2b 01       	movw	r4, r22
    23ee:	3c 01       	movw	r6, r24
    23f0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    23f2:	38 a1       	ldd	r19, Y+32	; 0x20
    23f4:	49 a1       	ldd	r20, Y+33	; 0x21
    23f6:	5a a1       	ldd	r21, Y+34	; 0x22
    23f8:	c5 01       	movw	r24, r10
    23fa:	b4 01       	movw	r22, r8
    23fc:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    2400:	a3 01       	movw	r20, r6
    2402:	92 01       	movw	r18, r4
    2404:	26 1b       	sub	r18, r22
    2406:	37 0b       	sbc	r19, r23
    2408:	48 0b       	sbc	r20, r24
    240a:	59 0b       	sbc	r21, r25
    240c:	ca 01       	movw	r24, r20
    240e:	b9 01       	movw	r22, r18
    2410:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    2414:	69 8b       	std	Y+17, r22	; 0x11
    2416:	7a 8b       	std	Y+18, r23	; 0x12
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    241e:	38 a1       	ldd	r19, Y+32	; 0x20
    2420:	49 a1       	ldd	r20, Y+33	; 0x21
    2422:	5a a1       	ldd	r21, Y+34	; 0x22
    2424:	6f a1       	ldd	r22, Y+39	; 0x27
    2426:	78 a5       	ldd	r23, Y+40	; 0x28
    2428:	89 a5       	ldd	r24, Y+41	; 0x29
    242a:	9a a5       	ldd	r25, Y+42	; 0x2a
    242c:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    2430:	4b 01       	movw	r8, r22
    2432:	5c 01       	movw	r10, r24
    2434:	2b a1       	ldd	r18, Y+35	; 0x23
    2436:	3c a1       	ldd	r19, Y+36	; 0x24
    2438:	4d a1       	ldd	r20, Y+37	; 0x25
    243a:	5e a1       	ldd	r21, Y+38	; 0x26
    243c:	c7 01       	movw	r24, r14
    243e:	b6 01       	movw	r22, r12
    2440:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__mulsi3>
    2444:	a5 01       	movw	r20, r10
    2446:	94 01       	movw	r18, r8
    2448:	26 1b       	sub	r18, r22
    244a:	37 0b       	sbc	r19, r23
    244c:	48 0b       	sbc	r20, r24
    244e:	59 0b       	sbc	r21, r25
    2450:	ca 01       	movw	r24, r20
    2452:	b9 01       	movw	r22, r18
    2454:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    2458:	6d 8b       	std	Y+21, r22	; 0x15
    245a:	7e 8b       	std	Y+22, r23	; 0x16
    245c:	8f 8b       	std	Y+23, r24	; 0x17
    245e:	98 8f       	std	Y+24, r25	; 0x18
    2460:	ce 01       	movw	r24, r28
    2462:	0d 96       	adiw	r24, 0x0d	; 13
    2464:	48 de       	rcall	.-880    	; 0x20f6 <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>
    2466:	d8 01       	movw	r26, r16
    2468:	12 96       	adiw	r26, 0x02	; 2
    246a:	6d 91       	ld	r22, X+
    246c:	7c 91       	ld	r23, X
    246e:	13 97       	sbiw	r26, 0x03	; 3
    2470:	88 27       	eor	r24, r24
    2472:	77 fd       	sbrc	r23, 7
    2474:	80 95       	com	r24
    2476:	98 2f       	mov	r25, r24
    2478:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    247c:	6b 01       	movw	r12, r22
    247e:	7c 01       	movw	r14, r24
    2480:	2d 89       	ldd	r18, Y+21	; 0x15
    2482:	3e 89       	ldd	r19, Y+22	; 0x16
    2484:	4f 89       	ldd	r20, Y+23	; 0x17
    2486:	58 8d       	ldd	r21, Y+24	; 0x18
    2488:	2f 8f       	std	Y+31, r18	; 0x1f
    248a:	38 a3       	std	Y+32, r19	; 0x20
    248c:	49 a3       	std	Y+33, r20	; 0x21
    248e:	5a a3       	std	Y+34, r21	; 0x22
    2490:	d8 01       	movw	r26, r16
    2492:	14 96       	adiw	r26, 0x04	; 4
    2494:	6d 91       	ld	r22, X+
    2496:	7c 91       	ld	r23, X
    2498:	15 97       	sbiw	r26, 0x05	; 5
    249a:	88 27       	eor	r24, r24
    249c:	77 fd       	sbrc	r23, 7
    249e:	80 95       	com	r24
    24a0:	98 2f       	mov	r25, r24
    24a2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    24a6:	2b 01       	movw	r4, r22
    24a8:	3c 01       	movw	r6, r24
    24aa:	29 89       	ldd	r18, Y+17	; 0x11
    24ac:	3a 89       	ldd	r19, Y+18	; 0x12
    24ae:	4b 89       	ldd	r20, Y+19	; 0x13
    24b0:	5c 89       	ldd	r21, Y+20	; 0x14
    24b2:	2b a3       	std	Y+35, r18	; 0x23
    24b4:	3c a3       	std	Y+36, r19	; 0x24
    24b6:	4d a3       	std	Y+37, r20	; 0x25
    24b8:	5e a3       	std	Y+38, r21	; 0x26
    24ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    24bc:	38 a1       	ldd	r19, Y+32	; 0x20
    24be:	49 a1       	ldd	r20, Y+33	; 0x21
    24c0:	5a a1       	ldd	r21, Y+34	; 0x22
    24c2:	c7 01       	movw	r24, r14
    24c4:	b6 01       	movw	r22, r12
    24c6:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    24ca:	4b 01       	movw	r8, r22
    24cc:	5c 01       	movw	r10, r24
    24ce:	2b a1       	ldd	r18, Y+35	; 0x23
    24d0:	3c a1       	ldd	r19, Y+36	; 0x24
    24d2:	4d a1       	ldd	r20, Y+37	; 0x25
    24d4:	5e a1       	ldd	r21, Y+38	; 0x26
    24d6:	c3 01       	movw	r24, r6
    24d8:	b2 01       	movw	r22, r4
    24da:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    24de:	9b 01       	movw	r18, r22
    24e0:	ac 01       	movw	r20, r24
    24e2:	c5 01       	movw	r24, r10
    24e4:	b4 01       	movw	r22, r8
    24e6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    24ea:	69 83       	std	Y+1, r22	; 0x01
    24ec:	7a 83       	std	Y+2, r23	; 0x02
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	af 85       	ldd	r26, Y+15	; 0x0f
    24f8:	b8 89       	ldd	r27, Y+16	; 0x10
    24fa:	8f a3       	std	Y+39, r24	; 0x27
    24fc:	98 a7       	std	Y+40, r25	; 0x28
    24fe:	a9 a7       	std	Y+41, r26	; 0x29
    2500:	ba a7       	std	Y+42, r27	; 0x2a
    2502:	d8 01       	movw	r26, r16
    2504:	6d 91       	ld	r22, X+
    2506:	7c 91       	ld	r23, X
    2508:	88 27       	eor	r24, r24
    250a:	77 fd       	sbrc	r23, 7
    250c:	80 95       	com	r24
    250e:	98 2f       	mov	r25, r24
    2510:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    2514:	4b 01       	movw	r8, r22
    2516:	5c 01       	movw	r10, r24
    2518:	2f a1       	ldd	r18, Y+39	; 0x27
    251a:	38 a5       	ldd	r19, Y+40	; 0x28
    251c:	49 a5       	ldd	r20, Y+41	; 0x29
    251e:	5a a5       	ldd	r21, Y+42	; 0x2a
    2520:	c3 01       	movw	r24, r6
    2522:	b2 01       	movw	r22, r4
    2524:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2528:	2b 01       	movw	r4, r22
    252a:	3c 01       	movw	r6, r24
    252c:	a5 01       	movw	r20, r10
    252e:	94 01       	movw	r18, r8
    2530:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2532:	78 a1       	ldd	r23, Y+32	; 0x20
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	c3 01       	movw	r24, r6
    2542:	b2 01       	movw	r22, r4
    2544:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    2548:	6d 83       	std	Y+5, r22	; 0x05
    254a:	7e 83       	std	Y+6, r23	; 0x06
    254c:	8f 83       	std	Y+7, r24	; 0x07
    254e:	98 87       	std	Y+8, r25	; 0x08
    2550:	a5 01       	movw	r20, r10
    2552:	94 01       	movw	r18, r8
    2554:	6b a1       	ldd	r22, Y+35	; 0x23
    2556:	7c a1       	ldd	r23, Y+36	; 0x24
    2558:	8d a1       	ldd	r24, Y+37	; 0x25
    255a:	9e a1       	ldd	r25, Y+38	; 0x26
    255c:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2560:	4b 01       	movw	r8, r22
    2562:	5c 01       	movw	r10, r24
    2564:	2f a1       	ldd	r18, Y+39	; 0x27
    2566:	38 a5       	ldd	r19, Y+40	; 0x28
    2568:	49 a5       	ldd	r20, Y+41	; 0x29
    256a:	5a a5       	ldd	r21, Y+42	; 0x2a
    256c:	c7 01       	movw	r24, r14
    256e:	b6 01       	movw	r22, r12
    2570:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	c5 01       	movw	r24, r10
    257a:	b4 01       	movw	r22, r8
    257c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__subsf3>
    2580:	69 87       	std	Y+9, r22	; 0x09
    2582:	7a 87       	std	Y+10, r23	; 0x0a
    2584:	8b 87       	std	Y+11, r24	; 0x0b
    2586:	9c 87       	std	Y+12, r25	; 0x0c
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	b4 dd       	rcall	.-1176   	; 0x20f6 <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	88 27       	eor	r24, r24
    2594:	77 fd       	sbrc	r23, 7
    2596:	80 95       	com	r24
    2598:	98 2f       	mov	r25, r24
    259a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    259e:	2b 01       	movw	r4, r22
    25a0:	3c 01       	movw	r6, r24
    25a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    25a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    25a6:	88 27       	eor	r24, r24
    25a8:	77 fd       	sbrc	r23, 7
    25aa:	80 95       	com	r24
    25ac:	98 2f       	mov	r25, r24
    25ae:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    25b2:	4b 01       	movw	r8, r22
    25b4:	5c 01       	movw	r10, r24
    25b6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25b8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    25ba:	88 27       	eor	r24, r24
    25bc:	77 fd       	sbrc	r23, 7
    25be:	80 95       	com	r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__floatsisf>
    25c6:	6b 01       	movw	r12, r22
    25c8:	7c 01       	movw	r14, r24
    25ca:	29 81       	ldd	r18, Y+1	; 0x01
    25cc:	3a 81       	ldd	r19, Y+2	; 0x02
    25ce:	4b 81       	ldd	r20, Y+3	; 0x03
    25d0:	5c 81       	ldd	r21, Y+4	; 0x04
    25d2:	c3 01       	movw	r24, r6
    25d4:	b2 01       	movw	r22, r4
    25d6:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    25da:	6f 8f       	std	Y+31, r22	; 0x1f
    25dc:	78 a3       	std	Y+32, r23	; 0x20
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	9a a3       	std	Y+34, r25	; 0x22
    25e2:	2d 81       	ldd	r18, Y+5	; 0x05
    25e4:	3e 81       	ldd	r19, Y+6	; 0x06
    25e6:	4f 81       	ldd	r20, Y+7	; 0x07
    25e8:	58 85       	ldd	r21, Y+8	; 0x08
    25ea:	c5 01       	movw	r24, r10
    25ec:	b4 01       	movw	r22, r8
    25ee:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25f8:	78 a1       	ldd	r23, Y+32	; 0x20
    25fa:	89 a1       	ldd	r24, Y+33	; 0x21
    25fc:	9a a1       	ldd	r25, Y+34	; 0x22
    25fe:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    2602:	6f 8f       	std	Y+31, r22	; 0x1f
    2604:	78 a3       	std	Y+32, r23	; 0x20
    2606:	89 a3       	std	Y+33, r24	; 0x21
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	29 85       	ldd	r18, Y+9	; 0x09
    260c:	3a 85       	ldd	r19, Y+10	; 0x0a
    260e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2610:	5c 85       	ldd	r21, Y+12	; 0x0c
    2612:	c7 01       	movw	r24, r14
    2614:	b6 01       	movw	r22, r12
    2616:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    261a:	9b 01       	movw	r18, r22
    261c:	ac 01       	movw	r20, r24
    261e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2620:	78 a1       	ldd	r23, Y+32	; 0x20
    2622:	89 a1       	ldd	r24, Y+33	; 0x21
    2624:	9a a1       	ldd	r25, Y+34	; 0x22
    2626:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    262a:	6f 8f       	std	Y+31, r22	; 0x1f
    262c:	78 a3       	std	Y+32, r23	; 0x20
    262e:	89 a3       	std	Y+33, r24	; 0x21
    2630:	9a a3       	std	Y+34, r25	; 0x22
    2632:	2d 85       	ldd	r18, Y+13	; 0x0d
    2634:	3e 85       	ldd	r19, Y+14	; 0x0e
    2636:	4f 85       	ldd	r20, Y+15	; 0x0f
    2638:	58 89       	ldd	r21, Y+16	; 0x10
    263a:	c3 01       	movw	r24, r6
    263c:	b2 01       	movw	r22, r4
    263e:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2642:	2b 01       	movw	r4, r22
    2644:	3c 01       	movw	r6, r24
    2646:	29 89       	ldd	r18, Y+17	; 0x11
    2648:	3a 89       	ldd	r19, Y+18	; 0x12
    264a:	4b 89       	ldd	r20, Y+19	; 0x13
    264c:	5c 89       	ldd	r21, Y+20	; 0x14
    264e:	c5 01       	movw	r24, r10
    2650:	b4 01       	movw	r22, r8
    2652:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2656:	9b 01       	movw	r18, r22
    2658:	ac 01       	movw	r20, r24
    265a:	c3 01       	movw	r24, r6
    265c:	b2 01       	movw	r22, r4
    265e:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    2662:	4b 01       	movw	r8, r22
    2664:	5c 01       	movw	r10, r24
    2666:	2d 89       	ldd	r18, Y+21	; 0x15
    2668:	3e 89       	ldd	r19, Y+22	; 0x16
    266a:	4f 89       	ldd	r20, Y+23	; 0x17
    266c:	58 8d       	ldd	r21, Y+24	; 0x18
    266e:	c7 01       	movw	r24, r14
    2670:	b6 01       	movw	r22, r12
    2672:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    2676:	9b 01       	movw	r18, r22
    2678:	ac 01       	movw	r20, r24
    267a:	c5 01       	movw	r24, r10
    267c:	b4 01       	movw	r22, r8
    267e:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    2682:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2684:	38 a1       	ldd	r19, Y+32	; 0x20
    2686:	49 a1       	ldd	r20, Y+33	; 0x21
    2688:	5a a1       	ldd	r21, Y+34	; 0x22
    268a:	0e 94 07 20 	call	0x400e	; 0x400e <atan2>
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	44 e3       	ldi	r20, 0x34	; 52
    2694:	53 e4       	ldi	r21, 0x43	; 67
    2696:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    269a:	2b ed       	ldi	r18, 0xDB	; 219
    269c:	3f e0       	ldi	r19, 0x0F	; 15
    269e:	49 e4       	ldi	r20, 0x49	; 73
    26a0:	50 e4       	ldi	r21, 0x40	; 64
    26a2:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__divsf3>
    26a6:	6b 01       	movw	r12, r22
    26a8:	7c 01       	movw	r14, r24
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	a9 01       	movw	r20, r18
    26b0:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__cmpsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	54 f4       	brge	.+20     	; 0x26cc <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x4bc>
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	44 eb       	ldi	r20, 0xB4	; 180
    26be:	53 e4       	ldi	r21, 0x43	; 67
    26c0:	c7 01       	movw	r24, r14
    26c2:	b6 01       	movw	r22, r12
    26c4:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__addsf3>
    26c8:	6b 01       	movw	r12, r22
    26ca:	7c 01       	movw	r14, r24
    26cc:	c7 01       	movw	r24, r14
    26ce:	b6 01       	movw	r22, r12
    26d0:	aa 96       	adiw	r28, 0x2a	; 42
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	7f 90       	pop	r7
    26f6:	6f 90       	pop	r6
    26f8:	5f 90       	pop	r5
    26fa:	4f 90       	pop	r4
    26fc:	08 95       	ret

000026fe <_ZN6LSM3037headingEv>:
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	2c 97       	sbiw	r28, 0x0c	; 12
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	fc 01       	movw	r30, r24
    2714:	21 8d       	ldd	r18, Z+25	; 0x19
    2716:	23 30       	cpi	r18, 0x03	; 3
    2718:	79 f4       	brne	.+30     	; 0x2738 <_ZN6LSM3037headingEv+0x3a>
    271a:	31 e0       	ldi	r19, 0x01	; 1
    271c:	23 2f       	mov	r18, r19
    271e:	3f 83       	std	Y+7, r19	; 0x07
    2720:	18 86       	std	Y+8, r1	; 0x08
    2722:	1a 86       	std	Y+10, r1	; 0x0a
    2724:	19 86       	std	Y+9, r1	; 0x09
    2726:	1c 86       	std	Y+12, r1	; 0x0c
    2728:	1b 86       	std	Y+11, r1	; 0x0b
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	6d dd       	rcall	.-1318   	; 0x2210 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>
    2736:	0e c0       	rjmp	.+28     	; 0x2754 <_ZN6LSM3037headingEv+0x56>
    2738:	1a 82       	std	Y+2, r1	; 0x02
    273a:	19 82       	std	Y+1, r1	; 0x01
    273c:	2f ef       	ldi	r18, 0xFF	; 255
    273e:	42 2f       	mov	r20, r18
    2740:	2b 83       	std	Y+3, r18	; 0x03
    2742:	2c 83       	std	Y+4, r18	; 0x04
    2744:	1e 82       	std	Y+6, r1	; 0x06
    2746:	1d 82       	std	Y+5, r1	; 0x05
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3a 81       	ldd	r19, Y+2	; 0x02
    274c:	5f ef       	ldi	r21, 0xFF	; 255
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	7e 81       	ldd	r23, Y+6	; 0x06
    2752:	5e dd       	rcall	.-1348   	; 0x2210 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>
    2754:	2c 96       	adiw	r28, 0x0c	; 12
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <_ZN6LSM30311writeAccRegEhh>:
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	ec 01       	movw	r28, r24
    2770:	06 2f       	mov	r16, r22
    2772:	14 2f       	mov	r17, r20
    2774:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2776:	86 e1       	ldi	r24, 0x16	; 22
    2778:	9f e0       	ldi	r25, 0x0F	; 15
    277a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    277e:	60 2f       	mov	r22, r16
    2780:	86 e1       	ldi	r24, 0x16	; 22
    2782:	9f e0       	ldi	r25, 0x0F	; 15
    2784:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    2788:	61 2f       	mov	r22, r17
    278a:	86 e1       	ldi	r24, 0x16	; 22
    278c:	9f e0       	ldi	r25, 0x0F	; 15
    278e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    2792:	86 e1       	ldi	r24, 0x16	; 22
    2794:	9f e0       	ldi	r25, 0x0F	; 15
    2796:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    279a:	88 8f       	std	Y+24, r24	; 0x18
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <_ZN6LSM30311writeMagRegEhh>:
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	06 2f       	mov	r16, r22
    27b2:	14 2f       	mov	r17, r20
    27b4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    27b6:	86 e1       	ldi	r24, 0x16	; 22
    27b8:	9f e0       	ldi	r25, 0x0F	; 15
    27ba:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    27be:	60 2f       	mov	r22, r16
    27c0:	86 e1       	ldi	r24, 0x16	; 22
    27c2:	9f e0       	ldi	r25, 0x0F	; 15
    27c4:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    27c8:	61 2f       	mov	r22, r17
    27ca:	86 e1       	ldi	r24, 0x16	; 22
    27cc:	9f e0       	ldi	r25, 0x0F	; 15
    27ce:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
    27d2:	86 e1       	ldi	r24, 0x16	; 22
    27d4:	9f e0       	ldi	r25, 0x0F	; 15
    27d6:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    27da:	88 8f       	std	Y+24, r24	; 0x18
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	08 95       	ret

000027e6 <_ZN6LSM3038writeRegEhh>:
    27e6:	fc 01       	movw	r30, r24
    27e8:	21 8d       	ldd	r18, Z+25	; 0x19
    27ea:	23 30       	cpi	r18, 0x03	; 3
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <_ZN6LSM3038writeRegEhh+0xc>
    27ee:	60 32       	cpi	r22, 0x20	; 32
    27f0:	10 f4       	brcc	.+4      	; 0x27f6 <_ZN6LSM3038writeRegEhh+0x10>
    27f2:	d9 cf       	rjmp	.-78     	; 0x27a6 <_ZN6LSM30311writeMagRegEhh>
    27f4:	08 95       	ret
    27f6:	b7 cf       	rjmp	.-146    	; 0x2766 <_ZN6LSM30311writeAccRegEhh>
    27f8:	08 95       	ret

000027fa <_ZN6LSM30313enableDefaultEv>:
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	ec 01       	movw	r28, r24
    2800:	89 8d       	ldd	r24, Y+25	; 0x19
    2802:	83 30       	cpi	r24, 0x03	; 3
    2804:	a9 f4       	brne	.+42     	; 0x2830 <_ZN6LSM30313enableDefaultEv+0x36>
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	61 e2       	ldi	r22, 0x21	; 33
    280a:	ce 01       	movw	r24, r28
    280c:	ec df       	rcall	.-40     	; 0x27e6 <_ZN6LSM3038writeRegEhh>
    280e:	47 e5       	ldi	r20, 0x57	; 87
    2810:	60 e2       	ldi	r22, 0x20	; 32
    2812:	ce 01       	movw	r24, r28
    2814:	e8 df       	rcall	.-48     	; 0x27e6 <_ZN6LSM3038writeRegEhh>
    2816:	44 e6       	ldi	r20, 0x64	; 100
    2818:	64 e2       	ldi	r22, 0x24	; 36
    281a:	ce 01       	movw	r24, r28
    281c:	e4 df       	rcall	.-56     	; 0x27e6 <_ZN6LSM3038writeRegEhh>
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	65 e2       	ldi	r22, 0x25	; 37
    2822:	ce 01       	movw	r24, r28
    2824:	e0 df       	rcall	.-64     	; 0x27e6 <_ZN6LSM3038writeRegEhh>
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	66 e2       	ldi	r22, 0x26	; 38
    282a:	ce 01       	movw	r24, r28
    282c:	dc df       	rcall	.-72     	; 0x27e6 <_ZN6LSM3038writeRegEhh>
    282e:	1f c0       	rjmp	.+62     	; 0x286e <_ZN6LSM30313enableDefaultEv+0x74>
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	49 f4       	brne	.+18     	; 0x2846 <_ZN6LSM30313enableDefaultEv+0x4c>
    2834:	48 e0       	ldi	r20, 0x08	; 8
    2836:	63 e2       	ldi	r22, 0x23	; 35
    2838:	ce 01       	movw	r24, r28
    283a:	95 df       	rcall	.-214    	; 0x2766 <_ZN6LSM30311writeAccRegEhh>
    283c:	47 e4       	ldi	r20, 0x47	; 71
    283e:	60 e2       	ldi	r22, 0x20	; 32
    2840:	ce 01       	movw	r24, r28
    2842:	91 df       	rcall	.-222    	; 0x2766 <_ZN6LSM30311writeAccRegEhh>
    2844:	08 c0       	rjmp	.+16     	; 0x2856 <_ZN6LSM30313enableDefaultEv+0x5c>
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	63 e2       	ldi	r22, 0x23	; 35
    284a:	ce 01       	movw	r24, r28
    284c:	8c df       	rcall	.-232    	; 0x2766 <_ZN6LSM30311writeAccRegEhh>
    284e:	47 e2       	ldi	r20, 0x27	; 39
    2850:	60 e2       	ldi	r22, 0x20	; 32
    2852:	ce 01       	movw	r24, r28
    2854:	88 df       	rcall	.-240    	; 0x2766 <_ZN6LSM30311writeAccRegEhh>
    2856:	4c e0       	ldi	r20, 0x0C	; 12
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	ce 01       	movw	r24, r28
    285c:	a4 df       	rcall	.-184    	; 0x27a6 <_ZN6LSM30311writeMagRegEhh>
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	ce 01       	movw	r24, r28
    2864:	a0 df       	rcall	.-192    	; 0x27a6 <_ZN6LSM30311writeMagRegEhh>
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	ce 01       	movw	r24, r28
    286c:	9c df       	rcall	.-200    	; 0x27a6 <_ZN6LSM30311writeMagRegEhh>
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	08 95       	ret

00002874 <_ZN6LSM3037readAccEv>:
    2874:	9f 92       	push	r9
    2876:	af 92       	push	r10
    2878:	bf 92       	push	r11
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	ec 01       	movw	r28, r24
    288c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    288e:	86 e1       	ldi	r24, 0x16	; 22
    2890:	9f e0       	ldi	r25, 0x0F	; 15
    2892:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    2896:	e0 91 16 0f 	lds	r30, 0x0F16
    289a:	f0 91 17 0f 	lds	r31, 0x0F17
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	68 ea       	ldi	r22, 0xA8	; 168
    28a6:	86 e1       	ldi	r24, 0x16	; 22
    28a8:	9f e0       	ldi	r25, 0x0F	; 15
    28aa:	19 95       	eicall
    28ac:	86 e1       	ldi	r24, 0x16	; 22
    28ae:	9f e0       	ldi	r25, 0x0F	; 15
    28b0:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    28b4:	88 8f       	std	Y+24, r24	; 0x18
    28b6:	46 e0       	ldi	r20, 0x06	; 6
    28b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    28ba:	86 e1       	ldi	r24, 0x16	; 22
    28bc:	9f e0       	ldi	r25, 0x0F	; 15
    28be:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN7TwoWire11requestFromEhh>
    28c2:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    28c6:	8b 01       	movw	r16, r22
    28c8:	10 c0       	rjmp	.+32     	; 0x28ea <_ZN6LSM3037readAccEv+0x76>
    28ca:	8b a1       	ldd	r24, Y+35	; 0x23
    28cc:	9c a1       	ldd	r25, Y+36	; 0x24
    28ce:	89 2b       	or	r24, r25
    28d0:	61 f0       	breq	.+24     	; 0x28ea <_ZN6LSM3037readAccEv+0x76>
    28d2:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    28d6:	60 1b       	sub	r22, r16
    28d8:	71 0b       	sbc	r23, r17
    28da:	8b a1       	ldd	r24, Y+35	; 0x23
    28dc:	9c a1       	ldd	r25, Y+36	; 0x24
    28de:	86 17       	cp	r24, r22
    28e0:	97 07       	cpc	r25, r23
    28e2:	18 f4       	brcc	.+6      	; 0x28ea <_ZN6LSM3037readAccEv+0x76>
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	8d a3       	std	Y+37, r24	; 0x25
    28e8:	32 c0       	rjmp	.+100    	; 0x294e <_ZN6LSM3037readAccEv+0xda>
    28ea:	86 e1       	ldi	r24, 0x16	; 22
    28ec:	9f e0       	ldi	r25, 0x0F	; 15
    28ee:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire9availableEv>
    28f2:	06 97       	sbiw	r24, 0x06	; 6
    28f4:	54 f3       	brlt	.-44     	; 0x28ca <_ZN6LSM3037readAccEv+0x56>
    28f6:	86 e1       	ldi	r24, 0x16	; 22
    28f8:	9f e0       	ldi	r25, 0x0F	; 15
    28fa:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    28fe:	a8 2e       	mov	r10, r24
    2900:	86 e1       	ldi	r24, 0x16	; 22
    2902:	9f e0       	ldi	r25, 0x0F	; 15
    2904:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2908:	98 2e       	mov	r9, r24
    290a:	86 e1       	ldi	r24, 0x16	; 22
    290c:	9f e0       	ldi	r25, 0x0F	; 15
    290e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2912:	08 2f       	mov	r16, r24
    2914:	86 e1       	ldi	r24, 0x16	; 22
    2916:	9f e0       	ldi	r25, 0x0F	; 15
    2918:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    291c:	b8 2e       	mov	r11, r24
    291e:	86 e1       	ldi	r24, 0x16	; 22
    2920:	9f e0       	ldi	r25, 0x0F	; 15
    2922:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2926:	18 2f       	mov	r17, r24
    2928:	86 e1       	ldi	r24, 0x16	; 22
    292a:	9f e0       	ldi	r25, 0x0F	; 15
    292c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2930:	d9 2c       	mov	r13, r9
    2932:	c1 2c       	mov	r12, r1
    2934:	ca 28       	or	r12, r10
    2936:	d9 82       	std	Y+1, r13	; 0x01
    2938:	c8 82       	st	Y, r12
    293a:	fb 2c       	mov	r15, r11
    293c:	e1 2c       	mov	r14, r1
    293e:	e0 2a       	or	r14, r16
    2940:	fb 82       	std	Y+3, r15	; 0x03
    2942:	ea 82       	std	Y+2, r14	; 0x02
    2944:	98 2f       	mov	r25, r24
    2946:	88 27       	eor	r24, r24
    2948:	81 2b       	or	r24, r17
    294a:	9d 83       	std	Y+5, r25	; 0x05
    294c:	8c 83       	std	Y+4, r24	; 0x04
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	df 90       	pop	r13
    295c:	cf 90       	pop	r12
    295e:	bf 90       	pop	r11
    2960:	af 90       	pop	r10
    2962:	9f 90       	pop	r9
    2964:	08 95       	ret

00002966 <_ZN6LSM3037readMagEv>:
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	ec 01       	movw	r28, r24
    2978:	6b 8d       	ldd	r22, Y+27	; 0x1b
    297a:	86 e1       	ldi	r24, 0x16	; 22
    297c:	9f e0       	ldi	r25, 0x0F	; 15
    297e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
    2982:	89 8d       	ldd	r24, Y+25	; 0x19
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	31 f4       	brne	.+12     	; 0x2994 <_ZN6LSM3037readMagEv+0x2e>
    2988:	6e 8d       	ldd	r22, Y+30	; 0x1e
    298a:	77 27       	eor	r23, r23
    298c:	67 fd       	sbrc	r22, 7
    298e:	70 95       	com	r23
    2990:	60 68       	ori	r22, 0x80	; 128
    2992:	04 c0       	rjmp	.+8      	; 0x299c <_ZN6LSM3037readMagEv+0x36>
    2994:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2996:	77 27       	eor	r23, r23
    2998:	67 fd       	sbrc	r22, 7
    299a:	70 95       	com	r23
    299c:	e0 91 16 0f 	lds	r30, 0x0F16
    29a0:	f0 91 17 0f 	lds	r31, 0x0F17
    29a4:	01 90       	ld	r0, Z+
    29a6:	f0 81       	ld	r31, Z
    29a8:	e0 2d       	mov	r30, r0
    29aa:	86 e1       	ldi	r24, 0x16	; 22
    29ac:	9f e0       	ldi	r25, 0x0F	; 15
    29ae:	19 95       	eicall
    29b0:	86 e1       	ldi	r24, 0x16	; 22
    29b2:	9f e0       	ldi	r25, 0x0F	; 15
    29b4:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    29b8:	88 8f       	std	Y+24, r24	; 0x18
    29ba:	46 e0       	ldi	r20, 0x06	; 6
    29bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    29be:	86 e1       	ldi	r24, 0x16	; 22
    29c0:	9f e0       	ldi	r25, 0x0F	; 15
    29c2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN7TwoWire11requestFromEhh>
    29c6:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    29ca:	8b 01       	movw	r16, r22
    29cc:	10 c0       	rjmp	.+32     	; 0x29ee <_ZN6LSM3037readMagEv+0x88>
    29ce:	8b a1       	ldd	r24, Y+35	; 0x23
    29d0:	9c a1       	ldd	r25, Y+36	; 0x24
    29d2:	89 2b       	or	r24, r25
    29d4:	61 f0       	breq	.+24     	; 0x29ee <_ZN6LSM3037readMagEv+0x88>
    29d6:	0e 94 64 29 	call	0x52c8	; 0x52c8 <millis>
    29da:	60 1b       	sub	r22, r16
    29dc:	71 0b       	sbc	r23, r17
    29de:	8b a1       	ldd	r24, Y+35	; 0x23
    29e0:	9c a1       	ldd	r25, Y+36	; 0x24
    29e2:	86 17       	cp	r24, r22
    29e4:	97 07       	cpc	r25, r23
    29e6:	18 f4       	brcc	.+6      	; 0x29ee <_ZN6LSM3037readMagEv+0x88>
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	8d a3       	std	Y+37, r24	; 0x25
    29ec:	6e c0       	rjmp	.+220    	; 0x2aca <_ZN6LSM3037readMagEv+0x164>
    29ee:	86 e1       	ldi	r24, 0x16	; 22
    29f0:	9f e0       	ldi	r25, 0x0F	; 15
    29f2:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire9availableEv>
    29f6:	06 97       	sbiw	r24, 0x06	; 6
    29f8:	54 f3       	brlt	.-44     	; 0x29ce <_ZN6LSM3037readMagEv+0x68>
    29fa:	89 8d       	ldd	r24, Y+25	; 0x19
    29fc:	83 30       	cpi	r24, 0x03	; 3
    29fe:	f9 f4       	brne	.+62     	; 0x2a3e <_ZN6LSM3037readMagEv+0xd8>
    2a00:	86 e1       	ldi	r24, 0x16	; 22
    2a02:	9f e0       	ldi	r25, 0x0F	; 15
    2a04:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a08:	c8 2e       	mov	r12, r24
    2a0a:	86 e1       	ldi	r24, 0x16	; 22
    2a0c:	9f e0       	ldi	r25, 0x0F	; 15
    2a0e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a12:	d8 2e       	mov	r13, r24
    2a14:	86 e1       	ldi	r24, 0x16	; 22
    2a16:	9f e0       	ldi	r25, 0x0F	; 15
    2a18:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a1c:	e8 2e       	mov	r14, r24
    2a1e:	86 e1       	ldi	r24, 0x16	; 22
    2a20:	9f e0       	ldi	r25, 0x0F	; 15
    2a22:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a26:	f8 2e       	mov	r15, r24
    2a28:	86 e1       	ldi	r24, 0x16	; 22
    2a2a:	9f e0       	ldi	r25, 0x0F	; 15
    2a2c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a30:	08 2f       	mov	r16, r24
    2a32:	86 e1       	ldi	r24, 0x16	; 22
    2a34:	9f e0       	ldi	r25, 0x0F	; 15
    2a36:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a3a:	18 2f       	mov	r17, r24
    2a3c:	36 c0       	rjmp	.+108    	; 0x2aaa <_ZN6LSM3037readMagEv+0x144>
    2a3e:	86 e1       	ldi	r24, 0x16	; 22
    2a40:	9f e0       	ldi	r25, 0x0F	; 15
    2a42:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a46:	d8 2e       	mov	r13, r24
    2a48:	86 e1       	ldi	r24, 0x16	; 22
    2a4a:	9f e0       	ldi	r25, 0x0F	; 15
    2a4c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a50:	c8 2e       	mov	r12, r24
    2a52:	89 8d       	ldd	r24, Y+25	; 0x19
    2a54:	81 11       	cpse	r24, r1
    2a56:	15 c0       	rjmp	.+42     	; 0x2a82 <_ZN6LSM3037readMagEv+0x11c>
    2a58:	86 e1       	ldi	r24, 0x16	; 22
    2a5a:	9f e0       	ldi	r25, 0x0F	; 15
    2a5c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a60:	f8 2e       	mov	r15, r24
    2a62:	86 e1       	ldi	r24, 0x16	; 22
    2a64:	9f e0       	ldi	r25, 0x0F	; 15
    2a66:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a6a:	e8 2e       	mov	r14, r24
    2a6c:	86 e1       	ldi	r24, 0x16	; 22
    2a6e:	9f e0       	ldi	r25, 0x0F	; 15
    2a70:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a74:	18 2f       	mov	r17, r24
    2a76:	86 e1       	ldi	r24, 0x16	; 22
    2a78:	9f e0       	ldi	r25, 0x0F	; 15
    2a7a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a7e:	08 2f       	mov	r16, r24
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <_ZN6LSM3037readMagEv+0x144>
    2a82:	86 e1       	ldi	r24, 0x16	; 22
    2a84:	9f e0       	ldi	r25, 0x0F	; 15
    2a86:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a8a:	18 2f       	mov	r17, r24
    2a8c:	86 e1       	ldi	r24, 0x16	; 22
    2a8e:	9f e0       	ldi	r25, 0x0F	; 15
    2a90:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a94:	08 2f       	mov	r16, r24
    2a96:	86 e1       	ldi	r24, 0x16	; 22
    2a98:	9f e0       	ldi	r25, 0x0F	; 15
    2a9a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2a9e:	f8 2e       	mov	r15, r24
    2aa0:	86 e1       	ldi	r24, 0x16	; 22
    2aa2:	9f e0       	ldi	r25, 0x0F	; 15
    2aa4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2aa8:	e8 2e       	mov	r14, r24
    2aaa:	6c 2d       	mov	r22, r12
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	7d 29       	or	r23, r13
    2ab0:	7f 83       	std	Y+7, r23	; 0x07
    2ab2:	6e 83       	std	Y+6, r22	; 0x06
    2ab4:	4e 2d       	mov	r20, r14
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	5f 29       	or	r21, r15
    2aba:	59 87       	std	Y+9, r21	; 0x09
    2abc:	48 87       	std	Y+8, r20	; 0x08
    2abe:	20 2f       	mov	r18, r16
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	c9 01       	movw	r24, r18
    2ac4:	91 2b       	or	r25, r17
    2ac6:	9b 87       	std	Y+11, r25	; 0x0b
    2ac8:	8a 87       	std	Y+10, r24	; 0x0a
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	08 95       	ret

00002adc <_ZN6LSM3037testRegEhNS_7regAddrE>:
}

// Private Methods //////////////////////////////////////////////////////////////

int LSM303::testReg(byte address, regAddr reg)
{
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	c6 2f       	mov	r28, r22
    2ae2:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    2ae4:	86 e1       	ldi	r24, 0x16	; 22
    2ae6:	9f e0       	ldi	r25, 0x0F	; 15
    2ae8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    2aec:	6d 2f       	mov	r22, r29
    2aee:	86 e1       	ldi	r24, 0x16	; 22
    2af0:	9f e0       	ldi	r25, 0x0F	; 15
    2af2:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    2af6:	86 e1       	ldi	r24, 0x16	; 22
    2af8:	9f e0       	ldi	r25, 0x0F	; 15
    2afa:	0e 94 75 1f 	call	0x3eea	; 0x3eea <_ZN7TwoWire15endTransmissionEv>
    2afe:	81 11       	cpse	r24, r1
    2b00:	11 c0       	rjmp	.+34     	; 0x2b24 <_ZN6LSM3037testRegEhNS_7regAddrE+0x48>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    2b02:	41 e0       	ldi	r20, 0x01	; 1
    2b04:	6c 2f       	mov	r22, r28
    2b06:	86 e1       	ldi	r24, 0x16	; 22
    2b08:	9f e0       	ldi	r25, 0x0F	; 15
    2b0a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    2b0e:	86 e1       	ldi	r24, 0x16	; 22
    2b10:	9f e0       	ldi	r25, 0x0F	; 15
    2b12:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire9availableEv>
    2b16:	89 2b       	or	r24, r25
    2b18:	41 f0       	breq	.+16     	; 0x2b2a <_ZN6LSM3037testRegEhNS_7regAddrE+0x4e>
  {
    return Wire.read();
    2b1a:	86 e1       	ldi	r24, 0x16	; 22
    2b1c:	9f e0       	ldi	r25, 0x0F	; 15
    2b1e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN7TwoWire4readEv>
    2b22:	05 c0       	rjmp	.+10     	; 0x2b2e <_ZN6LSM3037testRegEhNS_7regAddrE+0x52>
{
  Wire.beginTransmission(address);
  Wire.write((byte)reg);
  if (Wire.endTransmission() != 0)
  {
    return TEST_REG_ERROR;
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <_ZN6LSM3037testRegEhNS_7regAddrE+0x52>
  {
    return Wire.read();
  }
  else
  {
    return TEST_REG_ERROR;
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	9f ef       	ldi	r25, 0xFF	; 255
  }
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool LSM303::init(deviceType device, sa0State sa0)
{
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	ec 01       	movw	r28, r24
    2b3e:	16 2f       	mov	r17, r22
    2b40:	04 2f       	mov	r16, r20
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    2b42:	64 30       	cpi	r22, 0x04	; 4
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x14>
    2b46:	ad c0       	rjmp	.+346    	; 0x2ca2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
    2b48:	42 30       	cpi	r20, 0x02	; 2
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1a>
    2b4c:	47 c0       	rjmp	.+142    	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    2b4e:	ad c0       	rjmp	.+346    	; 0x2caa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x176>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2b50:	4f e0       	ldi	r20, 0x0F	; 15
    2b52:	6d e1       	ldi	r22, 0x1D	; 29
    2b54:	ce 01       	movw	r24, r28
    2b56:	c2 df       	rcall	.-124    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2b58:	89 34       	cpi	r24, 0x49	; 73
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x2c>
    2b5e:	ab c0       	rjmp	.+342    	; 0x2cb6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x182>
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2b60:	01 30       	cpi	r16, 0x01	; 1
    2b62:	41 f0       	breq	.+16     	; 0x2b74 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x40>
    2b64:	4f e0       	ldi	r20, 0x0F	; 15
    2b66:	6e e1       	ldi	r22, 0x1E	; 30
    2b68:	ce 01       	movw	r24, r28
    2b6a:	b8 df       	rcall	.-144    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2b6c:	89 34       	cpi	r24, 0x49	; 73
    2b6e:	91 05       	cpc	r25, r1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x40>
    2b72:	a3 c0       	rjmp	.+326    	; 0x2cba <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x186>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    2b74:	14 30       	cpi	r17, 0x04	; 4
    2b76:	11 f0       	breq	.+4      	; 0x2b7c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x48>
    2b78:	13 30       	cpi	r17, 0x03	; 3
    2b7a:	68 f5       	brcc	.+90     	; 0x2bd6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    2b7c:	00 23       	and	r16, r16
    2b7e:	a9 f0       	breq	.+42     	; 0x2baa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	69 e1       	ldi	r22, 0x19	; 25
    2b84:	ce 01       	movw	r24, r28
    2b86:	aa df       	rcall	.-172    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	69 f0       	breq	.+26     	; 0x2ba6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x72>
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
        if (device == device_auto)
    2b8c:	14 30       	cpi	r17, 0x04	; 4
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    2b90:	99 c0       	rjmp	.+306    	; 0x2cc4 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x190>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    2b92:	4f e0       	ldi	r20, 0x0F	; 15
    2b94:	6e e1       	ldi	r22, 0x1E	; 30
    2b96:	ce 01       	movw	r24, r28
    2b98:	a1 df       	rcall	.-190    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2b9a:	cc 97       	sbiw	r24, 0x3c	; 60
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x6c>
    2b9e:	94 c0       	rjmp	.+296    	; 0x2cc8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x194>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    2ba0:	01 e0       	ldi	r16, 0x01	; 1
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    2ba2:	12 e0       	ldi	r17, 0x02	; 2
    2ba4:	1b c0       	rjmp	.+54     	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    2ba6:	01 30       	cpi	r16, 0x01	; 1
    2ba8:	99 f0       	breq	.+38     	; 0x2bd0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x9c>
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	68 e1       	ldi	r22, 0x18	; 24
    2bae:	ce 01       	movw	r24, r28
    2bb0:	95 df       	rcall	.-214    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	69 f0       	breq	.+26     	; 0x2bd0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x9c>
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
        if (device == device_auto)
    2bb6:	14 30       	cpi	r17, 0x04	; 4
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x88>
    2bba:	89 c0       	rjmp	.+274    	; 0x2cce <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x19a>
        {
          // use magnetometer WHO_AM_I register to determine device type
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLM : device_DLH;
    2bbc:	4f e0       	ldi	r20, 0x0F	; 15
    2bbe:	6e e1       	ldi	r22, 0x1E	; 30
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	8c df       	rcall	.-232    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2bc4:	11 e0       	ldi	r17, 0x01	; 1
    2bc6:	cc 97       	sbiw	r24, 0x3c	; 60
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
    2bca:	10 e0       	ldi	r17, 0x00	; 0
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    2bcc:	00 e0       	ldi	r16, 0x00	; 0
    2bce:	06 c0       	rjmp	.+12     	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    2bd0:	14 30       	cpi	r17, 0x04	; 4
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    2bd4:	60 c0       	rjmp	.+192    	; 0x2c96 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x162>
    2bd6:	02 30       	cpi	r16, 0x02	; 2
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    2bda:	5f c0       	rjmp	.+190    	; 0x2c9a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x166>
    {
      return false;
    }
  }
  
  _device = device;
    2bdc:	19 8f       	std	Y+25, r17	; 0x19
  
  // set device addresses and translated register addresses
  switch (device)
    2bde:	11 30       	cpi	r17, 0x01	; 1
    2be0:	71 f1       	breq	.+92     	; 0x2c3e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x10a>
    2be2:	08 f4       	brcc	.+2      	; 0x2be6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb2>
    2be4:	42 c0       	rjmp	.+132    	; 0x2c6a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
    2be6:	12 30       	cpi	r17, 0x02	; 2
    2be8:	c1 f0       	breq	.+48     	; 0x2c1a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xe6>
    2bea:	13 30       	cpi	r17, 0x03	; 3
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xbc>
    2bee:	57 c0       	rjmp	.+174    	; 0x2c9e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16a>
  {
    case device_D:
      acc_address = mag_address = (sa0 == sa0_high) ? D_SA0_HIGH_ADDRESS : D_SA0_LOW_ADDRESS;
    2bf0:	01 30       	cpi	r16, 0x01	; 1
    2bf2:	11 f4       	brne	.+4      	; 0x2bf8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xc4>
    2bf4:	8d e1       	ldi	r24, 0x1D	; 29
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xc6>
    2bf8:	8e e1       	ldi	r24, 0x1E	; 30
    2bfa:	8b 8f       	std	Y+27, r24	; 0x1b
    2bfc:	8a 8f       	std	Y+26, r24	; 0x1a
      translated_regs[-OUT_X_L_M] = D_OUT_X_L_M;
    2bfe:	88 e0       	ldi	r24, 0x08	; 8
    2c00:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
    2c02:	89 e0       	ldi	r24, 0x09	; 9
    2c04:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
    2c06:	8a e0       	ldi	r24, 0x0A	; 10
    2c08:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
    2c0a:	8b e0       	ldi	r24, 0x0B	; 11
    2c0c:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
    2c0e:	8c e0       	ldi	r24, 0x0C	; 12
    2c10:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
    2c12:	8d e0       	ldi	r24, 0x0D	; 13
    2c14:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
      break;
    2c18:	64 c0       	rjmp	.+200    	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLHC:
      acc_address = DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS; // DLHC doesn't have configurable SA0 but uses same acc address as DLM/DLH with SA0 high
    2c1a:	89 e1       	ldi	r24, 0x19	; 25
    2c1c:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    2c1e:	8e e1       	ldi	r24, 0x1E	; 30
    2c20:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLHC_OUT_X_H_M;
    2c22:	83 e0       	ldi	r24, 0x03	; 3
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLHC_OUT_X_L_M;
    2c26:	84 e0       	ldi	r24, 0x04	; 4
    2c28:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLHC_OUT_Y_H_M;
    2c2a:	87 e0       	ldi	r24, 0x07	; 7
    2c2c:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLHC_OUT_Y_L_M;
    2c2e:	88 e0       	ldi	r24, 0x08	; 8
    2c30:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
    2c32:	85 e0       	ldi	r24, 0x05	; 5
    2c34:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
    2c36:	86 e0       	ldi	r24, 0x06	; 6
    2c38:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLHC_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLHC_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLHC_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;
    2c3c:	52 c0       	rjmp	.+164    	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    2c3e:	01 30       	cpi	r16, 0x01	; 1
    2c40:	11 f4       	brne	.+4      	; 0x2c46 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x112>
    2c42:	89 e1       	ldi	r24, 0x19	; 25
    2c44:	01 c0       	rjmp	.+2      	; 0x2c48 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x114>
    2c46:	88 e1       	ldi	r24, 0x18	; 24
    2c48:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    2c4a:	8e e1       	ldi	r24, 0x1E	; 30
    2c4c:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLM_OUT_X_H_M;
    2c4e:	83 e0       	ldi	r24, 0x03	; 3
    2c50:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
    2c52:	84 e0       	ldi	r24, 0x04	; 4
    2c54:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
    2c56:	87 e0       	ldi	r24, 0x07	; 7
    2c58:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
    2c5a:	88 e0       	ldi	r24, 0x08	; 8
    2c5c:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
    2c5e:	85 e0       	ldi	r24, 0x05	; 5
    2c60:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
    2c62:	86 e0       	ldi	r24, 0x06	; 6
    2c64:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
      break;
    2c68:	3c c0       	rjmp	.+120    	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    2c6a:	01 30       	cpi	r16, 0x01	; 1
    2c6c:	11 f4       	brne	.+4      	; 0x2c72 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x13e>
    2c6e:	89 e1       	ldi	r24, 0x19	; 25
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x140>
    2c72:	88 e1       	ldi	r24, 0x18	; 24
    2c74:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    2c76:	8e e1       	ldi	r24, 0x1E	; 30
    2c78:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLH_OUT_X_H_M;
    2c7a:	83 e0       	ldi	r24, 0x03	; 3
    2c7c:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
    2c7e:	84 e0       	ldi	r24, 0x04	; 4
    2c80:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
    2c82:	85 e0       	ldi	r24, 0x05	; 5
    2c84:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
    2c86:	86 e0       	ldi	r24, 0x06	; 6
    2c88:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
    2c8a:	87 e0       	ldi	r24, 0x07	; 7
    2c8c:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
    2c8e:	88 e0       	ldi	r24, 0x08	; 8
    2c90:	8a a3       	std	Y+34, r24	; 0x22
      break;
  }
  
  return true;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
    2c94:	26 c0       	rjmp	.+76     	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    {
      return false;
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	24 c0       	rjmp	.+72     	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	22 c0       	rjmp	.+68     	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	20 c0       	rjmp	.+64     	; 0x2ce2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2ca2:	44 23       	and	r20, r20
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x174>
    2ca6:	5e cf       	rjmp	.-324    	; 0x2b64 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x30>
    2ca8:	53 cf       	rjmp	.-346    	; 0x2b50 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1c>
{
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    2caa:	8d ef       	ldi	r24, 0xFD	; 253
    2cac:	86 0f       	add	r24, r22
    2cae:	82 30       	cpi	r24, 0x02	; 2
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x180>
    2cb2:	62 cf       	rjmp	.-316    	; 0x2b78 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x44>
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x19e>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    2cb6:	01 e0       	ldi	r16, 0x01	; 1
    2cb8:	03 c0       	rjmp	.+6      	; 0x2cc0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18c>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011110 with D ID; it's a D with SA0 low
        device = device_D;
        sa0 = sa0_low;
    2cba:	00 e0       	ldi	r16, 0x00	; 0
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18c>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    2cbe:	01 e0       	ldi	r16, 0x01	; 1
    2cc0:	13 e0       	ldi	r17, 0x03	; 3
    2cc2:	89 cf       	rjmp	.-238    	; 0x2bd6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    2cc4:	01 e0       	ldi	r16, 0x01	; 1
    2cc6:	8a cf       	rjmp	.-236    	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    2cc8:	01 e0       	ldi	r16, 0x01	; 1
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    2cca:	10 e0       	ldi	r17, 0x00	; 0
    2ccc:	87 cf       	rjmp	.-242    	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    2cce:	00 e0       	ldi	r16, 0x00	; 0
    2cd0:	85 cf       	rjmp	.-246    	; 0x2bdc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2cd2:	4f e0       	ldi	r20, 0x0F	; 15
    2cd4:	6d e1       	ldi	r22, 0x1D	; 29
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	01 df       	rcall	.-510    	; 0x2adc <_ZN6LSM3037testRegEhNS_7regAddrE>
    2cda:	89 34       	cpi	r24, 0x49	; 73
    2cdc:	91 05       	cpc	r25, r1
    2cde:	79 f3       	breq	.-34     	; 0x2cbe <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18a>
    2ce0:	41 cf       	rjmp	.-382    	; 0x2b64 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x30>
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
}
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	08 95       	ret

00002cec <_ZN7NewPingC1Ehhj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO) // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000);  // Set timer to 1ms (1000 uS).
#else
	OCR0A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK0 |= (1<<OCIE0A); // Enable Timer2 interrupt.
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	70 e0       	ldi	r23, 0x00	; 0
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	e6 5f       	subi	r30, 0xF6	; 246
    2cf8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cfa:	e4 91       	lpm	r30, Z
    2cfc:	14 96       	adiw	r26, 0x04	; 4
    2cfe:	ec 93       	st	X, r30
    2d00:	14 97       	sbiw	r26, 0x04	; 4
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	fa 01       	movw	r30, r20
    2d06:	e6 5f       	subi	r30, 0xF6	; 246
    2d08:	fb 4f       	sbci	r31, 0xFB	; 251
    2d0a:	e4 91       	lpm	r30, Z
    2d0c:	15 96       	adiw	r26, 0x05	; 5
    2d0e:	ec 93       	st	X, r30
    2d10:	15 97       	sbiw	r26, 0x05	; 5
    2d12:	60 5b       	subi	r22, 0xB0	; 176
    2d14:	7b 4f       	sbci	r23, 0xFB	; 251
    2d16:	fb 01       	movw	r30, r22
    2d18:	84 91       	lpm	r24, Z
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	80 55       	subi	r24, 0x50	; 80
    2d22:	9b 4f       	sbci	r25, 0xFB	; 251
    2d24:	fc 01       	movw	r30, r24
    2d26:	c5 91       	lpm	r28, Z+
    2d28:	d4 91       	lpm	r29, Z
    2d2a:	17 96       	adiw	r26, 0x07	; 7
    2d2c:	dc 93       	st	X, r29
    2d2e:	ce 93       	st	-X, r28
    2d30:	16 97       	sbiw	r26, 0x06	; 6
    2d32:	fa 01       	movw	r30, r20
    2d34:	e0 5b       	subi	r30, 0xB0	; 176
    2d36:	fb 4f       	sbci	r31, 0xFB	; 251
    2d38:	84 91       	lpm	r24, Z
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	8a 56       	subi	r24, 0x6A	; 106
    2d42:	9b 4f       	sbci	r25, 0xFB	; 251
    2d44:	fc 01       	movw	r30, r24
    2d46:	45 91       	lpm	r20, Z+
    2d48:	54 91       	lpm	r21, Z
    2d4a:	19 96       	adiw	r26, 0x09	; 9
    2d4c:	5c 93       	st	X, r21
    2d4e:	4e 93       	st	-X, r20
    2d50:	18 97       	sbiw	r26, 0x08	; 8
    2d52:	fb 01       	movw	r30, r22
    2d54:	64 91       	lpm	r22, Z
    2d56:	e6 2f       	mov	r30, r22
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	ee 0f       	add	r30, r30
    2d5c:	ff 1f       	adc	r31, r31
    2d5e:	e6 53       	subi	r30, 0x36	; 54
    2d60:	fb 4f       	sbci	r31, 0xFB	; 251
    2d62:	85 91       	lpm	r24, Z+
    2d64:	94 91       	lpm	r25, Z
    2d66:	1b 96       	adiw	r26, 0x0b	; 11
    2d68:	9c 93       	st	X, r25
    2d6a:	8e 93       	st	-X, r24
    2d6c:	1a 97       	sbiw	r26, 0x0a	; 10
    2d6e:	2f 5f       	subi	r18, 0xFF	; 255
    2d70:	3f 4f       	sbci	r19, 0xFF	; 255
    2d72:	49 e3       	ldi	r20, 0x39	; 57
    2d74:	42 9f       	mul	r20, r18
    2d76:	c0 01       	movw	r24, r0
    2d78:	43 9f       	mul	r20, r19
    2d7a:	90 0d       	add	r25, r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	8e 38       	cpi	r24, 0x8E	; 142
    2d80:	ff e6       	ldi	r31, 0x6F	; 111
    2d82:	9f 07       	cpc	r25, r31
    2d84:	10 f0       	brcs	.+4      	; 0x2d8a <_ZN7NewPingC1Ehhj+0x9e>
    2d86:	8d e8       	ldi	r24, 0x8D	; 141
    2d88:	9f e6       	ldi	r25, 0x6F	; 111
    2d8a:	1d 96       	adiw	r26, 0x0d	; 13
    2d8c:	9c 93       	st	X, r25
    2d8e:	8e 93       	st	-X, r24
    2d90:	1c 97       	sbiw	r26, 0x0c	; 12
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	08 95       	ret

00002d98 <_ZN7NewPing12ping_triggerEv>:
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	ec 01       	movw	r28, r24
    2da2:	ea 85       	ldd	r30, Y+10	; 0x0a
    2da4:	fb 85       	ldd	r31, Y+11	; 0x0b
    2da6:	90 81       	ld	r25, Z
    2da8:	8c 81       	ldd	r24, Y+4	; 0x04
    2daa:	89 2b       	or	r24, r25
    2dac:	80 83       	st	Z, r24
    2dae:	ee 81       	ldd	r30, Y+6	; 0x06
    2db0:	ff 81       	ldd	r31, Y+7	; 0x07
    2db2:	90 81       	ld	r25, Z
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	80 95       	com	r24
    2db8:	89 23       	and	r24, r25
    2dba:	80 83       	st	Z, r24
    2dbc:	84 e0       	ldi	r24, 0x04	; 4
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 be 29 	call	0x537c	; 0x537c <delayMicroseconds>
    2dc4:	ee 81       	ldd	r30, Y+6	; 0x06
    2dc6:	ff 81       	ldd	r31, Y+7	; 0x07
    2dc8:	90 81       	ld	r25, Z
    2dca:	8c 81       	ldd	r24, Y+4	; 0x04
    2dcc:	89 2b       	or	r24, r25
    2dce:	80 83       	st	Z, r24
    2dd0:	8a e0       	ldi	r24, 0x0A	; 10
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 be 29 	call	0x537c	; 0x537c <delayMicroseconds>
    2dd8:	ee 81       	ldd	r30, Y+6	; 0x06
    2dda:	ff 81       	ldd	r31, Y+7	; 0x07
    2ddc:	90 81       	ld	r25, Z
    2dde:	8c 81       	ldd	r24, Y+4	; 0x04
    2de0:	80 95       	com	r24
    2de2:	89 23       	and	r24, r25
    2de4:	80 83       	st	Z, r24
    2de6:	ea 85       	ldd	r30, Y+10	; 0x0a
    2de8:	fb 85       	ldd	r31, Y+11	; 0x0b
    2dea:	90 81       	ld	r25, Z
    2dec:	8c 81       	ldd	r24, Y+4	; 0x04
    2dee:	80 95       	com	r24
    2df0:	89 23       	and	r24, r25
    2df2:	80 83       	st	Z, r24
    2df4:	e8 85       	ldd	r30, Y+8	; 0x08
    2df6:	f9 85       	ldd	r31, Y+9	; 0x09
    2df8:	90 81       	ld	r25, Z
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	89 23       	and	r24, r25
    2dfe:	b1 f5       	brne	.+108    	; 0x2e6c <_ZN7NewPing12ping_triggerEv+0xd4>
    2e00:	0e 94 70 29 	call	0x52e0	; 0x52e0 <micros>
    2e04:	0c 85       	ldd	r16, Y+12	; 0x0c
    2e06:	1d 85       	ldd	r17, Y+13	; 0x0d
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	08 55       	subi	r16, 0x58	; 88
    2e0e:	19 4e       	sbci	r17, 0xE9	; 233
    2e10:	2f 4f       	sbci	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	80 0f       	add	r24, r16
    2e1a:	91 1f       	adc	r25, r17
    2e1c:	a2 1f       	adc	r26, r18
    2e1e:	b3 1f       	adc	r27, r19
    2e20:	8e 87       	std	Y+14, r24	; 0x0e
    2e22:	9f 87       	std	Y+15, r25	; 0x0f
    2e24:	a8 8b       	std	Y+16, r26	; 0x10
    2e26:	b9 8b       	std	Y+17, r27	; 0x11
    2e28:	0b c0       	rjmp	.+22     	; 0x2e40 <_ZN7NewPing12ping_triggerEv+0xa8>
    2e2a:	0e 94 70 29 	call	0x52e0	; 0x52e0 <micros>
    2e2e:	0e 85       	ldd	r16, Y+14	; 0x0e
    2e30:	1f 85       	ldd	r17, Y+15	; 0x0f
    2e32:	28 89       	ldd	r18, Y+16	; 0x10
    2e34:	39 89       	ldd	r19, Y+17	; 0x11
    2e36:	06 17       	cp	r16, r22
    2e38:	17 07       	cpc	r17, r23
    2e3a:	28 07       	cpc	r18, r24
    2e3c:	39 07       	cpc	r19, r25
    2e3e:	c0 f0       	brcs	.+48     	; 0x2e70 <_ZN7NewPing12ping_triggerEv+0xd8>
    2e40:	e8 85       	ldd	r30, Y+8	; 0x08
    2e42:	f9 85       	ldd	r31, Y+9	; 0x09
    2e44:	90 81       	ld	r25, Z
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	89 23       	and	r24, r25
    2e4a:	79 f3       	breq	.-34     	; 0x2e2a <_ZN7NewPing12ping_triggerEv+0x92>
    2e4c:	0e 94 70 29 	call	0x52e0	; 0x52e0 <micros>
    2e50:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e52:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	82 0f       	add	r24, r18
    2e5a:	93 1f       	adc	r25, r19
    2e5c:	a1 1d       	adc	r26, r1
    2e5e:	b1 1d       	adc	r27, r1
    2e60:	8e 87       	std	Y+14, r24	; 0x0e
    2e62:	9f 87       	std	Y+15, r25	; 0x0f
    2e64:	a8 8b       	std	Y+16, r26	; 0x10
    2e66:	b9 8b       	std	Y+17, r27	; 0x11
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	03 c0       	rjmp	.+6      	; 0x2e72 <_ZN7NewPing12ping_triggerEv+0xda>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <_ZN7NewPing12ping_triggerEv+0xda>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	08 95       	ret

00002e7c <_ZN7NewPing4pingEv>:
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	ec 01       	movw	r28, r24
    2e86:	88 df       	rcall	.-240    	; 0x2d98 <_ZN7NewPing12ping_triggerEv>
    2e88:	81 11       	cpse	r24, r1
    2e8a:	0c c0       	rjmp	.+24     	; 0x2ea4 <_ZN7NewPing4pingEv+0x28>
    2e8c:	1f c0       	rjmp	.+62     	; 0x2ecc <_ZN7NewPing4pingEv+0x50>
    2e8e:	0e 94 70 29 	call	0x52e0	; 0x52e0 <micros>
    2e92:	0e 85       	ldd	r16, Y+14	; 0x0e
    2e94:	1f 85       	ldd	r17, Y+15	; 0x0f
    2e96:	28 89       	ldd	r18, Y+16	; 0x10
    2e98:	39 89       	ldd	r19, Y+17	; 0x11
    2e9a:	06 17       	cp	r16, r22
    2e9c:	17 07       	cpc	r17, r23
    2e9e:	28 07       	cpc	r18, r24
    2ea0:	39 07       	cpc	r19, r25
    2ea2:	b8 f0       	brcs	.+46     	; 0x2ed2 <_ZN7NewPing4pingEv+0x56>
    2ea4:	e8 85       	ldd	r30, Y+8	; 0x08
    2ea6:	f9 85       	ldd	r31, Y+9	; 0x09
    2ea8:	90 81       	ld	r25, Z
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	89 23       	and	r24, r25
    2eae:	79 f7       	brne	.-34     	; 0x2e8e <_ZN7NewPing4pingEv+0x12>
    2eb0:	0e 94 70 29 	call	0x52e0	; 0x52e0 <micros>
    2eb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eb6:	3d 85       	ldd	r19, Y+13	; 0x0d
    2eb8:	25 50       	subi	r18, 0x05	; 5
    2eba:	31 09       	sbc	r19, r1
    2ebc:	4e 85       	ldd	r20, Y+14	; 0x0e
    2ebe:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ec0:	24 1b       	sub	r18, r20
    2ec2:	35 0b       	sbc	r19, r21
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	86 0f       	add	r24, r22
    2ec8:	97 1f       	adc	r25, r23
    2eca:	05 c0       	rjmp	.+10     	; 0x2ed6 <_ZN7NewPing4pingEv+0x5a>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <_ZN7NewPing4pingEv+0x5a>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

00002ee0 <__vector_21>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER0_COMPA_vect) {
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	0b b6       	in	r0, 0x3b	; 59
    2eec:	0f 92       	push	r0
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    2f06:	e0 91 4d 0e 	lds	r30, 0x0E4D
    2f0a:	f0 91 4e 0e 	lds	r31, 0x0E4E
    2f0e:	19 95       	eicall
}
    2f10:	ff 91       	pop	r31
    2f12:	ef 91       	pop	r30
    2f14:	bf 91       	pop	r27
    2f16:	af 91       	pop	r26
    2f18:	9f 91       	pop	r25
    2f1a:	8f 91       	pop	r24
    2f1c:	7f 91       	pop	r23
    2f1e:	6f 91       	pop	r22
    2f20:	5f 91       	pop	r21
    2f22:	4f 91       	pop	r20
    2f24:	3f 91       	pop	r19
    2f26:	2f 91       	pop	r18
    2f28:	0f 90       	pop	r0
    2f2a:	0b be       	out	0x3b, r0	; 59
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	1f 90       	pop	r1
    2f34:	18 95       	reti

00002f36 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2f36:	31 e1       	ldi	r19, 0x11	; 17
    2f38:	fc 01       	movw	r30, r24
    2f3a:	30 83       	st	Z, r19
    2f3c:	31 97       	sbiw	r30, 0x01	; 1
    2f3e:	22 e2       	ldi	r18, 0x22	; 34
    2f40:	20 83       	st	Z, r18
    2f42:	31 97       	sbiw	r30, 0x01	; 1
    2f44:	a3 e3       	ldi	r26, 0x33	; 51
    2f46:	a0 83       	st	Z, r26
    2f48:	31 97       	sbiw	r30, 0x01	; 1
    2f4a:	60 83       	st	Z, r22
    2f4c:	31 97       	sbiw	r30, 0x01	; 1
    2f4e:	70 83       	st	Z, r23
    2f50:	31 97       	sbiw	r30, 0x01	; 1
    2f52:	10 82       	st	Z, r1
    2f54:	31 97       	sbiw	r30, 0x01	; 1
    2f56:	10 82       	st	Z, r1
    2f58:	31 97       	sbiw	r30, 0x01	; 1
    2f5a:	60 e8       	ldi	r22, 0x80	; 128
    2f5c:	60 83       	st	Z, r22
    2f5e:	31 97       	sbiw	r30, 0x01	; 1
    2f60:	10 82       	st	Z, r1
    2f62:	31 97       	sbiw	r30, 0x01	; 1
    2f64:	10 82       	st	Z, r1
    2f66:	31 97       	sbiw	r30, 0x01	; 1
    2f68:	10 82       	st	Z, r1
    2f6a:	31 97       	sbiw	r30, 0x01	; 1
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	60 83       	st	Z, r22
    2f70:	31 97       	sbiw	r30, 0x01	; 1
    2f72:	63 e0       	ldi	r22, 0x03	; 3
    2f74:	60 83       	st	Z, r22
    2f76:	31 97       	sbiw	r30, 0x01	; 1
    2f78:	64 e0       	ldi	r22, 0x04	; 4
    2f7a:	60 83       	st	Z, r22
    2f7c:	31 97       	sbiw	r30, 0x01	; 1
    2f7e:	65 e0       	ldi	r22, 0x05	; 5
    2f80:	60 83       	st	Z, r22
    2f82:	31 97       	sbiw	r30, 0x01	; 1
    2f84:	66 e0       	ldi	r22, 0x06	; 6
    2f86:	60 83       	st	Z, r22
    2f88:	31 97       	sbiw	r30, 0x01	; 1
    2f8a:	67 e0       	ldi	r22, 0x07	; 7
    2f8c:	60 83       	st	Z, r22
    2f8e:	31 97       	sbiw	r30, 0x01	; 1
    2f90:	68 e0       	ldi	r22, 0x08	; 8
    2f92:	60 83       	st	Z, r22
    2f94:	31 97       	sbiw	r30, 0x01	; 1
    2f96:	69 e0       	ldi	r22, 0x09	; 9
    2f98:	60 83       	st	Z, r22
    2f9a:	31 97       	sbiw	r30, 0x01	; 1
    2f9c:	60 e1       	ldi	r22, 0x10	; 16
    2f9e:	60 83       	st	Z, r22
    2fa0:	31 97       	sbiw	r30, 0x01	; 1
    2fa2:	30 83       	st	Z, r19
    2fa4:	31 97       	sbiw	r30, 0x01	; 1
    2fa6:	32 e1       	ldi	r19, 0x12	; 18
    2fa8:	30 83       	st	Z, r19
    2faa:	31 97       	sbiw	r30, 0x01	; 1
    2fac:	33 e1       	ldi	r19, 0x13	; 19
    2fae:	30 83       	st	Z, r19
    2fb0:	31 97       	sbiw	r30, 0x01	; 1
    2fb2:	34 e1       	ldi	r19, 0x14	; 20
    2fb4:	30 83       	st	Z, r19
    2fb6:	31 97       	sbiw	r30, 0x01	; 1
    2fb8:	35 e1       	ldi	r19, 0x15	; 21
    2fba:	30 83       	st	Z, r19
    2fbc:	31 97       	sbiw	r30, 0x01	; 1
    2fbe:	36 e1       	ldi	r19, 0x16	; 22
    2fc0:	30 83       	st	Z, r19
    2fc2:	31 97       	sbiw	r30, 0x01	; 1
    2fc4:	37 e1       	ldi	r19, 0x17	; 23
    2fc6:	30 83       	st	Z, r19
    2fc8:	31 97       	sbiw	r30, 0x01	; 1
    2fca:	38 e1       	ldi	r19, 0x18	; 24
    2fcc:	30 83       	st	Z, r19
    2fce:	31 97       	sbiw	r30, 0x01	; 1
    2fd0:	39 e1       	ldi	r19, 0x19	; 25
    2fd2:	30 83       	st	Z, r19
    2fd4:	31 97       	sbiw	r30, 0x01	; 1
    2fd6:	30 e2       	ldi	r19, 0x20	; 32
    2fd8:	30 83       	st	Z, r19
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	31 e2       	ldi	r19, 0x21	; 33
    2fde:	30 83       	st	Z, r19
    2fe0:	31 97       	sbiw	r30, 0x01	; 1
    2fe2:	20 83       	st	Z, r18
    2fe4:	31 97       	sbiw	r30, 0x01	; 1
    2fe6:	23 e2       	ldi	r18, 0x23	; 35
    2fe8:	20 83       	st	Z, r18
    2fea:	31 97       	sbiw	r30, 0x01	; 1
    2fec:	40 83       	st	Z, r20
    2fee:	31 97       	sbiw	r30, 0x01	; 1
    2ff0:	50 83       	st	Z, r21
    2ff2:	31 97       	sbiw	r30, 0x01	; 1
    2ff4:	26 e2       	ldi	r18, 0x26	; 38
    2ff6:	20 83       	st	Z, r18
    2ff8:	31 97       	sbiw	r30, 0x01	; 1
    2ffa:	27 e2       	ldi	r18, 0x27	; 39
    2ffc:	20 83       	st	Z, r18
    2ffe:	31 97       	sbiw	r30, 0x01	; 1
    3000:	28 e2       	ldi	r18, 0x28	; 40
    3002:	20 83       	st	Z, r18
    3004:	31 97       	sbiw	r30, 0x01	; 1
    3006:	29 e2       	ldi	r18, 0x29	; 41
    3008:	20 83       	st	Z, r18
    300a:	31 97       	sbiw	r30, 0x01	; 1
    300c:	20 e3       	ldi	r18, 0x30	; 48
    300e:	20 83       	st	Z, r18
    3010:	31 97       	sbiw	r30, 0x01	; 1
    3012:	21 e3       	ldi	r18, 0x31	; 49
    3014:	20 83       	st	Z, r18
    3016:	89 97       	sbiw	r24, 0x29	; 41
    3018:	08 95       	ret

0000301a <xPortStartScheduler>:
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	80 93 b0 00 	sts	0x00B0, r24
    3020:	10 92 b2 00 	sts	0x00B2, r1
    3024:	80 e3       	ldi	r24, 0x30	; 48
    3026:	80 93 b3 00 	sts	0x00B3, r24
    302a:	e0 e7       	ldi	r30, 0x70	; 112
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	82 60       	ori	r24, 0x02	; 2
    3032:	80 83       	st	Z, r24
    3034:	84 e0       	ldi	r24, 0x04	; 4
    3036:	80 93 b1 00 	sts	0x00B1, r24
    303a:	a0 91 a6 0e 	lds	r26, 0x0EA6
    303e:	b0 91 a7 0e 	lds	r27, 0x0EA7
    3042:	cd 91       	ld	r28, X+
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	dd 91       	ld	r29, X+
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	bf 91       	pop	r27
    3054:	af 91       	pop	r26
    3056:	9f 91       	pop	r25
    3058:	8f 91       	pop	r24
    305a:	7f 91       	pop	r23
    305c:	6f 91       	pop	r22
    305e:	5f 91       	pop	r21
    3060:	4f 91       	pop	r20
    3062:	3f 91       	pop	r19
    3064:	2f 91       	pop	r18
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	df 90       	pop	r13
    3070:	cf 90       	pop	r12
    3072:	bf 90       	pop	r11
    3074:	af 90       	pop	r10
    3076:	9f 90       	pop	r9
    3078:	8f 90       	pop	r8
    307a:	7f 90       	pop	r7
    307c:	6f 90       	pop	r6
    307e:	5f 90       	pop	r5
    3080:	4f 90       	pop	r4
    3082:	3f 90       	pop	r3
    3084:	2f 90       	pop	r2
    3086:	1f 90       	pop	r1
    3088:	0f 90       	pop	r0
    308a:	0c be       	out	0x3c, r0	; 60
    308c:	0f 90       	pop	r0
    308e:	0b be       	out	0x3b, r0	; 59
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	08 95       	ret
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	08 95       	ret

0000309c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    309c:	0f 92       	push	r0
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	0f 92       	push	r0
    30a4:	0b b6       	in	r0, 0x3b	; 59
    30a6:	0f 92       	push	r0
    30a8:	0c b6       	in	r0, 0x3c	; 60
    30aa:	0f 92       	push	r0
    30ac:	1f 92       	push	r1
    30ae:	11 24       	eor	r1, r1
    30b0:	2f 92       	push	r2
    30b2:	3f 92       	push	r3
    30b4:	4f 92       	push	r4
    30b6:	5f 92       	push	r5
    30b8:	6f 92       	push	r6
    30ba:	7f 92       	push	r7
    30bc:	8f 92       	push	r8
    30be:	9f 92       	push	r9
    30c0:	af 92       	push	r10
    30c2:	bf 92       	push	r11
    30c4:	cf 92       	push	r12
    30c6:	df 92       	push	r13
    30c8:	ef 92       	push	r14
    30ca:	ff 92       	push	r15
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	2f 93       	push	r18
    30d2:	3f 93       	push	r19
    30d4:	4f 93       	push	r20
    30d6:	5f 93       	push	r21
    30d8:	6f 93       	push	r22
    30da:	7f 93       	push	r23
    30dc:	8f 93       	push	r24
    30de:	9f 93       	push	r25
    30e0:	af 93       	push	r26
    30e2:	bf 93       	push	r27
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	a0 91 a6 0e 	lds	r26, 0x0EA6
    30f0:	b0 91 a7 0e 	lds	r27, 0x0EA7
    30f4:	0d b6       	in	r0, 0x3d	; 61
    30f6:	0d 92       	st	X+, r0
    30f8:	0e b6       	in	r0, 0x3e	; 62
    30fa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    30fc:	b4 d3       	rcall	.+1896   	; 0x3866 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    30fe:	a0 91 a6 0e 	lds	r26, 0x0EA6
    3102:	b0 91 a7 0e 	lds	r27, 0x0EA7
    3106:	cd 91       	ld	r28, X+
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	dd 91       	ld	r29, X+
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	ff 91       	pop	r31
    3110:	ef 91       	pop	r30
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	bf 91       	pop	r27
    3118:	af 91       	pop	r26
    311a:	9f 91       	pop	r25
    311c:	8f 91       	pop	r24
    311e:	7f 91       	pop	r23
    3120:	6f 91       	pop	r22
    3122:	5f 91       	pop	r21
    3124:	4f 91       	pop	r20
    3126:	3f 91       	pop	r19
    3128:	2f 91       	pop	r18
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	bf 90       	pop	r11
    3138:	af 90       	pop	r10
    313a:	9f 90       	pop	r9
    313c:	8f 90       	pop	r8
    313e:	7f 90       	pop	r7
    3140:	6f 90       	pop	r6
    3142:	5f 90       	pop	r5
    3144:	4f 90       	pop	r4
    3146:	3f 90       	pop	r3
    3148:	2f 90       	pop	r2
    314a:	1f 90       	pop	r1
    314c:	0f 90       	pop	r0
    314e:	0c be       	out	0x3c, r0	; 60
    3150:	0f 90       	pop	r0
    3152:	0b be       	out	0x3b, r0	; 59
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	0f 90       	pop	r0

	asm volatile ( "ret" );
    315a:	08 95       	ret

0000315c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    315c:	0f 92       	push	r0
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	0f 92       	push	r0
    3164:	0b b6       	in	r0, 0x3b	; 59
    3166:	0f 92       	push	r0
    3168:	0c b6       	in	r0, 0x3c	; 60
    316a:	0f 92       	push	r0
    316c:	1f 92       	push	r1
    316e:	11 24       	eor	r1, r1
    3170:	2f 92       	push	r2
    3172:	3f 92       	push	r3
    3174:	4f 92       	push	r4
    3176:	5f 92       	push	r5
    3178:	6f 92       	push	r6
    317a:	7f 92       	push	r7
    317c:	8f 92       	push	r8
    317e:	9f 92       	push	r9
    3180:	af 92       	push	r10
    3182:	bf 92       	push	r11
    3184:	cf 92       	push	r12
    3186:	df 92       	push	r13
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	2f 93       	push	r18
    3192:	3f 93       	push	r19
    3194:	4f 93       	push	r20
    3196:	5f 93       	push	r21
    3198:	6f 93       	push	r22
    319a:	7f 93       	push	r23
    319c:	8f 93       	push	r24
    319e:	9f 93       	push	r25
    31a0:	af 93       	push	r26
    31a2:	bf 93       	push	r27
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	ef 93       	push	r30
    31aa:	ff 93       	push	r31
    31ac:	a0 91 a6 0e 	lds	r26, 0x0EA6
    31b0:	b0 91 a7 0e 	lds	r27, 0x0EA7
    31b4:	0d b6       	in	r0, 0x3d	; 61
    31b6:	0d 92       	st	X+, r0
    31b8:	0e b6       	in	r0, 0x3e	; 62
    31ba:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    31bc:	c0 d1       	rcall	.+896    	; 0x353e <xTaskIncrementTick>
    31be:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    31c0:	52 d3       	rcall	.+1700   	; 0x3866 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    31c2:	a0 91 a6 0e 	lds	r26, 0x0EA6
    31c6:	b0 91 a7 0e 	lds	r27, 0x0EA7
    31ca:	cd 91       	ld	r28, X+
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	dd 91       	ld	r29, X+
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	ff 91       	pop	r31
    31d4:	ef 91       	pop	r30
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	bf 91       	pop	r27
    31dc:	af 91       	pop	r26
    31de:	9f 91       	pop	r25
    31e0:	8f 91       	pop	r24
    31e2:	7f 91       	pop	r23
    31e4:	6f 91       	pop	r22
    31e6:	5f 91       	pop	r21
    31e8:	4f 91       	pop	r20
    31ea:	3f 91       	pop	r19
    31ec:	2f 91       	pop	r18
    31ee:	1f 91       	pop	r17
    31f0:	0f 91       	pop	r16
    31f2:	ff 90       	pop	r15
    31f4:	ef 90       	pop	r14
    31f6:	df 90       	pop	r13
    31f8:	cf 90       	pop	r12
    31fa:	bf 90       	pop	r11
    31fc:	af 90       	pop	r10
    31fe:	9f 90       	pop	r9
    3200:	8f 90       	pop	r8
    3202:	7f 90       	pop	r7
    3204:	6f 90       	pop	r6
    3206:	5f 90       	pop	r5
    3208:	4f 90       	pop	r4
    320a:	3f 90       	pop	r3
    320c:	2f 90       	pop	r2
    320e:	1f 90       	pop	r1
    3210:	0f 90       	pop	r0
    3212:	0c be       	out	0x3c, r0	; 60
    3214:	0f 90       	pop	r0
    3216:	0b be       	out	0x3b, r0	; 59
    3218:	0f 90       	pop	r0
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    321e:	08 95       	ret

00003220 <__vector_13>:
*	the	context	is	saved	at	the	start	of	vPortYieldFromTick().		The	tick
*	count	is	incremented	after	the	context	is	saved.
*/
ISR(TIMER2_COMPA_vect,	ISR_NAKED)
{
	vPortYieldFromTick();
    3220:	9d df       	rcall	.-198    	; 0x315c <vPortYieldFromTick>
	asm	volatile	(	"reti"	);
    3222:	18 95       	reti

00003224 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3224:	e0 91 6e 0e 	lds	r30, 0x0E6E
    3228:	f0 91 6f 0e 	lds	r31, 0x0E6F
    322c:	80 81       	ld	r24, Z
    322e:	81 11       	cpse	r24, r1
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <prvResetNextTaskUnblockTime+0x1c>
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	9f ef       	ldi	r25, 0xFF	; 255
    3236:	90 93 5f 02 	sts	0x025F, r25
    323a:	80 93 5e 02 	sts	0x025E, r24
    323e:	08 95       	ret
    3240:	e0 91 6e 0e 	lds	r30, 0x0E6E
    3244:	f0 91 6f 0e 	lds	r31, 0x0E6F
    3248:	05 80       	ldd	r0, Z+5	; 0x05
    324a:	f6 81       	ldd	r31, Z+6	; 0x06
    324c:	e0 2d       	mov	r30, r0
    324e:	06 80       	ldd	r0, Z+6	; 0x06
    3250:	f7 81       	ldd	r31, Z+7	; 0x07
    3252:	e0 2d       	mov	r30, r0
    3254:	82 81       	ldd	r24, Z+2	; 0x02
    3256:	93 81       	ldd	r25, Z+3	; 0x03
    3258:	90 93 5f 02 	sts	0x025F, r25
    325c:	80 93 5e 02 	sts	0x025E, r24
    3260:	08 95       	ret

00003262 <prvAddCurrentTaskToDelayedList>:
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	ec 01       	movw	r28, r24
    3268:	e0 91 a6 0e 	lds	r30, 0x0EA6
    326c:	f0 91 a7 0e 	lds	r31, 0x0EA7
    3270:	93 83       	std	Z+3, r25	; 0x03
    3272:	82 83       	std	Z+2, r24	; 0x02
    3274:	80 91 56 0e 	lds	r24, 0x0E56
    3278:	90 91 57 0e 	lds	r25, 0x0E57
    327c:	c8 17       	cp	r28, r24
    327e:	d9 07       	cpc	r29, r25
    3280:	68 f4       	brcc	.+26     	; 0x329c <prvAddCurrentTaskToDelayedList+0x3a>
    3282:	60 91 a6 0e 	lds	r22, 0x0EA6
    3286:	70 91 a7 0e 	lds	r23, 0x0EA7
    328a:	80 91 6c 0e 	lds	r24, 0x0E6C
    328e:	90 91 6d 0e 	lds	r25, 0x0E6D
    3292:	6e 5f       	subi	r22, 0xFE	; 254
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	0e 94 07 10 	call	0x200e	; 0x200e <vListInsert>
    329a:	17 c0       	rjmp	.+46     	; 0x32ca <prvAddCurrentTaskToDelayedList+0x68>
    329c:	60 91 a6 0e 	lds	r22, 0x0EA6
    32a0:	70 91 a7 0e 	lds	r23, 0x0EA7
    32a4:	80 91 6e 0e 	lds	r24, 0x0E6E
    32a8:	90 91 6f 0e 	lds	r25, 0x0E6F
    32ac:	6e 5f       	subi	r22, 0xFE	; 254
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	0e 94 07 10 	call	0x200e	; 0x200e <vListInsert>
    32b4:	80 91 5e 02 	lds	r24, 0x025E
    32b8:	90 91 5f 02 	lds	r25, 0x025F
    32bc:	c8 17       	cp	r28, r24
    32be:	d9 07       	cpc	r29, r25
    32c0:	20 f4       	brcc	.+8      	; 0x32ca <prvAddCurrentTaskToDelayedList+0x68>
    32c2:	d0 93 5f 02 	sts	0x025F, r29
    32c6:	c0 93 5e 02 	sts	0x025E, r28
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <xTaskGenericCreate>:
    32d0:	4f 92       	push	r4
    32d2:	5f 92       	push	r5
    32d4:	6f 92       	push	r6
    32d6:	7f 92       	push	r7
    32d8:	8f 92       	push	r8
    32da:	9f 92       	push	r9
    32dc:	af 92       	push	r10
    32de:	bf 92       	push	r11
    32e0:	cf 92       	push	r12
    32e2:	df 92       	push	r13
    32e4:	ef 92       	push	r14
    32e6:	ff 92       	push	r15
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	4c 01       	movw	r8, r24
    32f2:	5b 01       	movw	r10, r22
    32f4:	2a 01       	movw	r4, r20
    32f6:	39 01       	movw	r6, r18
    32f8:	81 e2       	ldi	r24, 0x21	; 33
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <pvPortMalloc>
    3300:	ec 01       	movw	r28, r24
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	09 f4       	brne	.+2      	; 0x3308 <xTaskGenericCreate+0x38>
    3306:	da c0       	rjmp	.+436    	; 0x34bc <xTaskGenericCreate+0x1ec>
    3308:	c1 14       	cp	r12, r1
    330a:	d1 04       	cpc	r13, r1
    330c:	09 f0       	breq	.+2      	; 0x3310 <xTaskGenericCreate+0x40>
    330e:	bf c0       	rjmp	.+382    	; 0x348e <xTaskGenericCreate+0x1be>
    3310:	c2 01       	movw	r24, r4
    3312:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <pvPortMalloc>
    3316:	98 8f       	std	Y+24, r25	; 0x18
    3318:	8f 8b       	std	Y+23, r24	; 0x17
    331a:	89 2b       	or	r24, r25
    331c:	09 f0       	breq	.+2      	; 0x3320 <xTaskGenericCreate+0x50>
    331e:	b9 c0       	rjmp	.+370    	; 0x3492 <xTaskGenericCreate+0x1c2>
    3320:	ce 01       	movw	r24, r28
    3322:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vPortFree>
    3326:	ca c0       	rjmp	.+404    	; 0x34bc <xTaskGenericCreate+0x1ec>
    3328:	cf 01       	movw	r24, r30
    332a:	31 91       	ld	r19, Z+
    332c:	da 01       	movw	r26, r20
    332e:	3d 93       	st	X+, r19
    3330:	ad 01       	movw	r20, r26
    3332:	dc 01       	movw	r26, r24
    3334:	8c 91       	ld	r24, X
    3336:	88 23       	and	r24, r24
    3338:	11 f0       	breq	.+4      	; 0x333e <xTaskGenericCreate+0x6e>
    333a:	21 50       	subi	r18, 0x01	; 1
    333c:	a9 f7       	brne	.-22     	; 0x3328 <xTaskGenericCreate+0x58>
    333e:	18 a2       	std	Y+32, r1	; 0x20
    3340:	10 2f       	mov	r17, r16
    3342:	04 30       	cpi	r16, 0x04	; 4
    3344:	08 f0       	brcs	.+2      	; 0x3348 <xTaskGenericCreate+0x78>
    3346:	13 e0       	ldi	r17, 0x03	; 3
    3348:	1e 8b       	std	Y+22, r17	; 0x16
    334a:	5e 01       	movw	r10, r28
    334c:	b2 e0       	ldi	r27, 0x02	; 2
    334e:	ab 0e       	add	r10, r27
    3350:	b1 1c       	adc	r11, r1
    3352:	c5 01       	movw	r24, r10
    3354:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vListInitialiseItem>
    3358:	ce 01       	movw	r24, r28
    335a:	0c 96       	adiw	r24, 0x0c	; 12
    335c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vListInitialiseItem>
    3360:	d9 87       	std	Y+9, r29	; 0x09
    3362:	c8 87       	std	Y+8, r28	; 0x08
    3364:	84 e0       	ldi	r24, 0x04	; 4
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	81 1b       	sub	r24, r17
    336a:	91 09       	sbc	r25, r1
    336c:	9d 87       	std	Y+13, r25	; 0x0d
    336e:	8c 87       	std	Y+12, r24	; 0x0c
    3370:	db 8b       	std	Y+19, r29	; 0x13
    3372:	ca 8b       	std	Y+18, r28	; 0x12
    3374:	a3 01       	movw	r20, r6
    3376:	b4 01       	movw	r22, r8
    3378:	c6 01       	movw	r24, r12
    337a:	dd dd       	rcall	.-1094   	; 0x2f36 <pxPortInitialiseStack>
    337c:	99 83       	std	Y+1, r25	; 0x01
    337e:	88 83       	st	Y, r24
    3380:	e1 14       	cp	r14, r1
    3382:	f1 04       	cpc	r15, r1
    3384:	19 f0       	breq	.+6      	; 0x338c <xTaskGenericCreate+0xbc>
    3386:	f7 01       	movw	r30, r14
    3388:	d1 83       	std	Z+1, r29	; 0x01
    338a:	c0 83       	st	Z, r28
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	0f 92       	push	r0
    3392:	80 91 58 0e 	lds	r24, 0x0E58
    3396:	8f 5f       	subi	r24, 0xFF	; 255
    3398:	80 93 58 0e 	sts	0x0E58, r24
    339c:	80 91 a6 0e 	lds	r24, 0x0EA6
    33a0:	90 91 a7 0e 	lds	r25, 0x0EA7
    33a4:	89 2b       	or	r24, r25
    33a6:	a9 f5       	brne	.+106    	; 0x3412 <xTaskGenericCreate+0x142>
    33a8:	d0 93 a7 0e 	sts	0x0EA7, r29
    33ac:	c0 93 a6 0e 	sts	0x0EA6, r28
    33b0:	80 91 58 0e 	lds	r24, 0x0E58
    33b4:	81 30       	cpi	r24, 0x01	; 1
    33b6:	e1 f5       	brne	.+120    	; 0x3430 <xTaskGenericCreate+0x160>
    33b8:	82 e8       	ldi	r24, 0x82	; 130
    33ba:	9e e0       	ldi	r25, 0x0E	; 14
    33bc:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33c0:	8b e8       	ldi	r24, 0x8B	; 139
    33c2:	9e e0       	ldi	r25, 0x0E	; 14
    33c4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33c8:	84 e9       	ldi	r24, 0x94	; 148
    33ca:	9e e0       	ldi	r25, 0x0E	; 14
    33cc:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33d0:	8d e9       	ldi	r24, 0x9D	; 157
    33d2:	9e e0       	ldi	r25, 0x0E	; 14
    33d4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33d8:	89 e7       	ldi	r24, 0x79	; 121
    33da:	9e e0       	ldi	r25, 0x0E	; 14
    33dc:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33e0:	80 e7       	ldi	r24, 0x70	; 112
    33e2:	9e e0       	ldi	r25, 0x0E	; 14
    33e4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33e8:	83 e6       	ldi	r24, 0x63	; 99
    33ea:	9e e0       	ldi	r25, 0x0E	; 14
    33ec:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33f0:	8a e5       	ldi	r24, 0x5A	; 90
    33f2:	9e e0       	ldi	r25, 0x0E	; 14
    33f4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <vListInitialise>
    33f8:	89 e7       	ldi	r24, 0x79	; 121
    33fa:	9e e0       	ldi	r25, 0x0E	; 14
    33fc:	90 93 6f 0e 	sts	0x0E6F, r25
    3400:	80 93 6e 0e 	sts	0x0E6E, r24
    3404:	80 e7       	ldi	r24, 0x70	; 112
    3406:	9e e0       	ldi	r25, 0x0E	; 14
    3408:	90 93 6d 0e 	sts	0x0E6D, r25
    340c:	80 93 6c 0e 	sts	0x0E6C, r24
    3410:	0f c0       	rjmp	.+30     	; 0x3430 <xTaskGenericCreate+0x160>
    3412:	80 91 54 0e 	lds	r24, 0x0E54
    3416:	81 11       	cpse	r24, r1
    3418:	0b c0       	rjmp	.+22     	; 0x3430 <xTaskGenericCreate+0x160>
    341a:	e0 91 a6 0e 	lds	r30, 0x0EA6
    341e:	f0 91 a7 0e 	lds	r31, 0x0EA7
    3422:	86 89       	ldd	r24, Z+22	; 0x16
    3424:	08 17       	cp	r16, r24
    3426:	20 f0       	brcs	.+8      	; 0x3430 <xTaskGenericCreate+0x160>
    3428:	d0 93 a7 0e 	sts	0x0EA7, r29
    342c:	c0 93 a6 0e 	sts	0x0EA6, r28
    3430:	80 91 50 0e 	lds	r24, 0x0E50
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	80 93 50 0e 	sts	0x0E50, r24
    343a:	8e 89       	ldd	r24, Y+22	; 0x16
    343c:	90 91 55 0e 	lds	r25, 0x0E55
    3440:	98 17       	cp	r25, r24
    3442:	10 f4       	brcc	.+4      	; 0x3448 <xTaskGenericCreate+0x178>
    3444:	80 93 55 0e 	sts	0x0E55, r24
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	9c 01       	movw	r18, r24
    344c:	22 0f       	add	r18, r18
    344e:	33 1f       	adc	r19, r19
    3450:	22 0f       	add	r18, r18
    3452:	33 1f       	adc	r19, r19
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	b5 01       	movw	r22, r10
    345e:	8e 57       	subi	r24, 0x7E	; 126
    3460:	91 4f       	sbci	r25, 0xF1	; 241
    3462:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <vListInsertEnd>
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	80 91 54 0e 	lds	r24, 0x0E54
    346e:	88 23       	and	r24, r24
    3470:	51 f0       	breq	.+20     	; 0x3486 <xTaskGenericCreate+0x1b6>
    3472:	e0 91 a6 0e 	lds	r30, 0x0EA6
    3476:	f0 91 a7 0e 	lds	r31, 0x0EA7
    347a:	86 89       	ldd	r24, Z+22	; 0x16
    347c:	80 17       	cp	r24, r16
    347e:	28 f4       	brcc	.+10     	; 0x348a <xTaskGenericCreate+0x1ba>
    3480:	0d de       	rcall	.-998    	; 0x309c <vPortYield>
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	1c c0       	rjmp	.+56     	; 0x34be <xTaskGenericCreate+0x1ee>
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	1a c0       	rjmp	.+52     	; 0x34be <xTaskGenericCreate+0x1ee>
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	18 c0       	rjmp	.+48     	; 0x34be <xTaskGenericCreate+0x1ee>
    348e:	d8 8e       	std	Y+24, r13	; 0x18
    3490:	cf 8a       	std	Y+23, r12	; 0x17
    3492:	f1 e0       	ldi	r31, 0x01	; 1
    3494:	4f 1a       	sub	r4, r31
    3496:	51 08       	sbc	r5, r1
    3498:	cf 88       	ldd	r12, Y+23	; 0x17
    349a:	d8 8c       	ldd	r13, Y+24	; 0x18
    349c:	c4 0c       	add	r12, r4
    349e:	d5 1c       	adc	r13, r5
    34a0:	d5 01       	movw	r26, r10
    34a2:	8c 91       	ld	r24, X
    34a4:	89 8f       	std	Y+25, r24	; 0x19
    34a6:	8c 91       	ld	r24, X
    34a8:	88 23       	and	r24, r24
    34aa:	09 f4       	brne	.+2      	; 0x34ae <xTaskGenericCreate+0x1de>
    34ac:	48 cf       	rjmp	.-368    	; 0x333e <xTaskGenericCreate+0x6e>
    34ae:	ae 01       	movw	r20, r28
    34b0:	46 5e       	subi	r20, 0xE6	; 230
    34b2:	5f 4f       	sbci	r21, 0xFF	; 255
    34b4:	f5 01       	movw	r30, r10
    34b6:	31 96       	adiw	r30, 0x01	; 1
    34b8:	27 e0       	ldi	r18, 0x07	; 7
    34ba:	36 cf       	rjmp	.-404    	; 0x3328 <xTaskGenericCreate+0x58>
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	df 90       	pop	r13
    34cc:	cf 90       	pop	r12
    34ce:	bf 90       	pop	r11
    34d0:	af 90       	pop	r10
    34d2:	9f 90       	pop	r9
    34d4:	8f 90       	pop	r8
    34d6:	7f 90       	pop	r7
    34d8:	6f 90       	pop	r6
    34da:	5f 90       	pop	r5
    34dc:	4f 90       	pop	r4
    34de:	08 95       	ret

000034e0 <vTaskStartScheduler>:
    34e0:	af 92       	push	r10
    34e2:	bf 92       	push	r11
    34e4:	cf 92       	push	r12
    34e6:	df 92       	push	r13
    34e8:	ef 92       	push	r14
    34ea:	ff 92       	push	r15
    34ec:	0f 93       	push	r16
    34ee:	a1 2c       	mov	r10, r1
    34f0:	b1 2c       	mov	r11, r1
    34f2:	c1 2c       	mov	r12, r1
    34f4:	d1 2c       	mov	r13, r1
    34f6:	e1 2c       	mov	r14, r1
    34f8:	f1 2c       	mov	r15, r1
    34fa:	00 e0       	ldi	r16, 0x00	; 0
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	45 e5       	ldi	r20, 0x55	; 85
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	68 eb       	ldi	r22, 0xB8	; 184
    3506:	72 e0       	ldi	r23, 0x02	; 2
    3508:	8a ef       	ldi	r24, 0xFA	; 250
    350a:	9b e1       	ldi	r25, 0x1B	; 27
    350c:	e1 de       	rcall	.-574    	; 0x32d0 <xTaskGenericCreate>
    350e:	81 30       	cpi	r24, 0x01	; 1
    3510:	41 f4       	brne	.+16     	; 0x3522 <vTaskStartScheduler+0x42>
    3512:	f8 94       	cli
    3514:	80 93 54 0e 	sts	0x0E54, r24
    3518:	10 92 57 0e 	sts	0x0E57, r1
    351c:	10 92 56 0e 	sts	0x0E56, r1
    3520:	7c dd       	rcall	.-1288   	; 0x301a <xPortStartScheduler>
    3522:	0f 91       	pop	r16
    3524:	ff 90       	pop	r15
    3526:	ef 90       	pop	r14
    3528:	df 90       	pop	r13
    352a:	cf 90       	pop	r12
    352c:	bf 90       	pop	r11
    352e:	af 90       	pop	r10
    3530:	08 95       	ret

00003532 <vTaskSuspendAll>:
    3532:	80 91 4f 0e 	lds	r24, 0x0E4F
    3536:	8f 5f       	subi	r24, 0xFF	; 255
    3538:	80 93 4f 0e 	sts	0x0E4F, r24
    353c:	08 95       	ret

0000353e <xTaskIncrementTick>:
    353e:	cf 92       	push	r12
    3540:	df 92       	push	r13
    3542:	ef 92       	push	r14
    3544:	ff 92       	push	r15
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	80 91 4f 0e 	lds	r24, 0x0E4F
    3552:	81 11       	cpse	r24, r1
    3554:	99 c0       	rjmp	.+306    	; 0x3688 <xTaskIncrementTick+0x14a>
    3556:	80 91 56 0e 	lds	r24, 0x0E56
    355a:	90 91 57 0e 	lds	r25, 0x0E57
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	90 93 57 0e 	sts	0x0E57, r25
    3564:	80 93 56 0e 	sts	0x0E56, r24
    3568:	e0 90 56 0e 	lds	r14, 0x0E56
    356c:	f0 90 57 0e 	lds	r15, 0x0E57
    3570:	e1 14       	cp	r14, r1
    3572:	f1 04       	cpc	r15, r1
    3574:	b1 f4       	brne	.+44     	; 0x35a2 <xTaskIncrementTick+0x64>
    3576:	80 91 6e 0e 	lds	r24, 0x0E6E
    357a:	90 91 6f 0e 	lds	r25, 0x0E6F
    357e:	20 91 6c 0e 	lds	r18, 0x0E6C
    3582:	30 91 6d 0e 	lds	r19, 0x0E6D
    3586:	30 93 6f 0e 	sts	0x0E6F, r19
    358a:	20 93 6e 0e 	sts	0x0E6E, r18
    358e:	90 93 6d 0e 	sts	0x0E6D, r25
    3592:	80 93 6c 0e 	sts	0x0E6C, r24
    3596:	80 91 51 0e 	lds	r24, 0x0E51
    359a:	8f 5f       	subi	r24, 0xFF	; 255
    359c:	80 93 51 0e 	sts	0x0E51, r24
    35a0:	41 de       	rcall	.-894    	; 0x3224 <prvResetNextTaskUnblockTime>
    35a2:	80 91 5e 02 	lds	r24, 0x025E
    35a6:	90 91 5f 02 	lds	r25, 0x025F
    35aa:	e8 16       	cp	r14, r24
    35ac:	f9 06       	cpc	r15, r25
    35ae:	08 f4       	brcc	.+2      	; 0x35b2 <xTaskIncrementTick+0x74>
    35b0:	54 c0       	rjmp	.+168    	; 0x365a <xTaskIncrementTick+0x11c>
    35b2:	d1 2c       	mov	r13, r1
    35b4:	cc 24       	eor	r12, r12
    35b6:	c3 94       	inc	r12
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <xTaskIncrementTick+0x7e>
    35ba:	dc 2c       	mov	r13, r12
    35bc:	e0 91 6e 0e 	lds	r30, 0x0E6E
    35c0:	f0 91 6f 0e 	lds	r31, 0x0E6F
    35c4:	80 81       	ld	r24, Z
    35c6:	81 11       	cpse	r24, r1
    35c8:	07 c0       	rjmp	.+14     	; 0x35d8 <xTaskIncrementTick+0x9a>
    35ca:	8f ef       	ldi	r24, 0xFF	; 255
    35cc:	9f ef       	ldi	r25, 0xFF	; 255
    35ce:	90 93 5f 02 	sts	0x025F, r25
    35d2:	80 93 5e 02 	sts	0x025E, r24
    35d6:	42 c0       	rjmp	.+132    	; 0x365c <xTaskIncrementTick+0x11e>
    35d8:	e0 91 6e 0e 	lds	r30, 0x0E6E
    35dc:	f0 91 6f 0e 	lds	r31, 0x0E6F
    35e0:	05 80       	ldd	r0, Z+5	; 0x05
    35e2:	f6 81       	ldd	r31, Z+6	; 0x06
    35e4:	e0 2d       	mov	r30, r0
    35e6:	c6 81       	ldd	r28, Z+6	; 0x06
    35e8:	d7 81       	ldd	r29, Z+7	; 0x07
    35ea:	2a 81       	ldd	r18, Y+2	; 0x02
    35ec:	3b 81       	ldd	r19, Y+3	; 0x03
    35ee:	e2 16       	cp	r14, r18
    35f0:	f3 06       	cpc	r15, r19
    35f2:	28 f4       	brcc	.+10     	; 0x35fe <xTaskIncrementTick+0xc0>
    35f4:	30 93 5f 02 	sts	0x025F, r19
    35f8:	20 93 5e 02 	sts	0x025E, r18
    35fc:	2f c0       	rjmp	.+94     	; 0x365c <xTaskIncrementTick+0x11e>
    35fe:	8e 01       	movw	r16, r28
    3600:	0e 5f       	subi	r16, 0xFE	; 254
    3602:	1f 4f       	sbci	r17, 0xFF	; 255
    3604:	c8 01       	movw	r24, r16
    3606:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
    360a:	8c 89       	ldd	r24, Y+20	; 0x14
    360c:	9d 89       	ldd	r25, Y+21	; 0x15
    360e:	89 2b       	or	r24, r25
    3610:	21 f0       	breq	.+8      	; 0x361a <xTaskIncrementTick+0xdc>
    3612:	ce 01       	movw	r24, r28
    3614:	0c 96       	adiw	r24, 0x0c	; 12
    3616:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
    361a:	2e 89       	ldd	r18, Y+22	; 0x16
    361c:	80 91 55 0e 	lds	r24, 0x0E55
    3620:	82 17       	cp	r24, r18
    3622:	10 f4       	brcc	.+4      	; 0x3628 <xTaskIncrementTick+0xea>
    3624:	20 93 55 0e 	sts	0x0E55, r18
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	c9 01       	movw	r24, r18
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	82 0f       	add	r24, r18
    363a:	93 1f       	adc	r25, r19
    363c:	b8 01       	movw	r22, r16
    363e:	8e 57       	subi	r24, 0x7E	; 126
    3640:	91 4f       	sbci	r25, 0xF1	; 241
    3642:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <vListInsertEnd>
    3646:	e0 91 a6 0e 	lds	r30, 0x0EA6
    364a:	f0 91 a7 0e 	lds	r31, 0x0EA7
    364e:	9e 89       	ldd	r25, Y+22	; 0x16
    3650:	86 89       	ldd	r24, Z+22	; 0x16
    3652:	98 17       	cp	r25, r24
    3654:	08 f0       	brcs	.+2      	; 0x3658 <xTaskIncrementTick+0x11a>
    3656:	b1 cf       	rjmp	.-158    	; 0x35ba <xTaskIncrementTick+0x7c>
    3658:	b1 cf       	rjmp	.-158    	; 0x35bc <xTaskIncrementTick+0x7e>
    365a:	d1 2c       	mov	r13, r1
    365c:	e0 91 a6 0e 	lds	r30, 0x0EA6
    3660:	f0 91 a7 0e 	lds	r31, 0x0EA7
    3664:	86 89       	ldd	r24, Z+22	; 0x16
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	fc 01       	movw	r30, r24
    366a:	ee 0f       	add	r30, r30
    366c:	ff 1f       	adc	r31, r31
    366e:	ee 0f       	add	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	8e 0f       	add	r24, r30
    3678:	9f 1f       	adc	r25, r31
    367a:	fc 01       	movw	r30, r24
    367c:	ee 57       	subi	r30, 0x7E	; 126
    367e:	f1 4f       	sbci	r31, 0xF1	; 241
    3680:	80 81       	ld	r24, Z
    3682:	82 30       	cpi	r24, 0x02	; 2
    3684:	40 f4       	brcc	.+16     	; 0x3696 <xTaskIncrementTick+0x158>
    3686:	09 c0       	rjmp	.+18     	; 0x369a <xTaskIncrementTick+0x15c>
    3688:	80 91 53 0e 	lds	r24, 0x0E53
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	80 93 53 0e 	sts	0x0E53, r24
    3692:	d1 2c       	mov	r13, r1
    3694:	02 c0       	rjmp	.+4      	; 0x369a <xTaskIncrementTick+0x15c>
    3696:	dd 24       	eor	r13, r13
    3698:	d3 94       	inc	r13
    369a:	80 91 52 0e 	lds	r24, 0x0E52
    369e:	88 23       	and	r24, r24
    36a0:	11 f0       	breq	.+4      	; 0x36a6 <xTaskIncrementTick+0x168>
    36a2:	dd 24       	eor	r13, r13
    36a4:	d3 94       	inc	r13
    36a6:	8d 2d       	mov	r24, r13
    36a8:	df 91       	pop	r29
    36aa:	cf 91       	pop	r28
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	ff 90       	pop	r15
    36b2:	ef 90       	pop	r14
    36b4:	df 90       	pop	r13
    36b6:	cf 90       	pop	r12
    36b8:	08 95       	ret

000036ba <xTaskResumeAll>:
    36ba:	df 92       	push	r13
    36bc:	ef 92       	push	r14
    36be:	ff 92       	push	r15
    36c0:	0f 93       	push	r16
    36c2:	1f 93       	push	r17
    36c4:	cf 93       	push	r28
    36c6:	df 93       	push	r29
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	0f 92       	push	r0
    36ce:	80 91 4f 0e 	lds	r24, 0x0E4F
    36d2:	81 50       	subi	r24, 0x01	; 1
    36d4:	80 93 4f 0e 	sts	0x0E4F, r24
    36d8:	80 91 4f 0e 	lds	r24, 0x0E4F
    36dc:	81 11       	cpse	r24, r1
    36de:	5f c0       	rjmp	.+190    	; 0x379e <xTaskResumeAll+0xe4>
    36e0:	80 91 58 0e 	lds	r24, 0x0E58
    36e4:	88 23       	and	r24, r24
    36e6:	09 f4       	brne	.+2      	; 0x36ea <xTaskResumeAll+0x30>
    36e8:	5c c0       	rjmp	.+184    	; 0x37a2 <xTaskResumeAll+0xe8>
    36ea:	0f 2e       	mov	r0, r31
    36ec:	f3 e6       	ldi	r31, 0x63	; 99
    36ee:	ef 2e       	mov	r14, r31
    36f0:	fe e0       	ldi	r31, 0x0E	; 14
    36f2:	ff 2e       	mov	r15, r31
    36f4:	f0 2d       	mov	r31, r0
    36f6:	dd 24       	eor	r13, r13
    36f8:	d3 94       	inc	r13
    36fa:	30 c0       	rjmp	.+96     	; 0x375c <xTaskResumeAll+0xa2>
    36fc:	e0 91 68 0e 	lds	r30, 0x0E68
    3700:	f0 91 69 0e 	lds	r31, 0x0E69
    3704:	c6 81       	ldd	r28, Z+6	; 0x06
    3706:	d7 81       	ldd	r29, Z+7	; 0x07
    3708:	ce 01       	movw	r24, r28
    370a:	0c 96       	adiw	r24, 0x0c	; 12
    370c:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
    3710:	8e 01       	movw	r16, r28
    3712:	0e 5f       	subi	r16, 0xFE	; 254
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
    3716:	c8 01       	movw	r24, r16
    3718:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
    371c:	8e 89       	ldd	r24, Y+22	; 0x16
    371e:	90 91 55 0e 	lds	r25, 0x0E55
    3722:	98 17       	cp	r25, r24
    3724:	10 f4       	brcc	.+4      	; 0x372a <xTaskResumeAll+0x70>
    3726:	80 93 55 0e 	sts	0x0E55, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9c 01       	movw	r18, r24
    372e:	22 0f       	add	r18, r18
    3730:	33 1f       	adc	r19, r19
    3732:	22 0f       	add	r18, r18
    3734:	33 1f       	adc	r19, r19
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	82 0f       	add	r24, r18
    373c:	93 1f       	adc	r25, r19
    373e:	b8 01       	movw	r22, r16
    3740:	8e 57       	subi	r24, 0x7E	; 126
    3742:	91 4f       	sbci	r25, 0xF1	; 241
    3744:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <vListInsertEnd>
    3748:	e0 91 a6 0e 	lds	r30, 0x0EA6
    374c:	f0 91 a7 0e 	lds	r31, 0x0EA7
    3750:	9e 89       	ldd	r25, Y+22	; 0x16
    3752:	86 89       	ldd	r24, Z+22	; 0x16
    3754:	98 17       	cp	r25, r24
    3756:	10 f0       	brcs	.+4      	; 0x375c <xTaskResumeAll+0xa2>
    3758:	d0 92 52 0e 	sts	0x0E52, r13
    375c:	f7 01       	movw	r30, r14
    375e:	80 81       	ld	r24, Z
    3760:	81 11       	cpse	r24, r1
    3762:	cc cf       	rjmp	.-104    	; 0x36fc <xTaskResumeAll+0x42>
    3764:	80 91 53 0e 	lds	r24, 0x0E53
    3768:	88 23       	and	r24, r24
    376a:	91 f0       	breq	.+36     	; 0x3790 <xTaskResumeAll+0xd6>
    376c:	80 91 53 0e 	lds	r24, 0x0E53
    3770:	88 23       	and	r24, r24
    3772:	71 f0       	breq	.+28     	; 0x3790 <xTaskResumeAll+0xd6>
    3774:	c1 e0       	ldi	r28, 0x01	; 1
    3776:	e3 de       	rcall	.-570    	; 0x353e <xTaskIncrementTick>
    3778:	81 11       	cpse	r24, r1
    377a:	c0 93 52 0e 	sts	0x0E52, r28
    377e:	80 91 53 0e 	lds	r24, 0x0E53
    3782:	81 50       	subi	r24, 0x01	; 1
    3784:	80 93 53 0e 	sts	0x0E53, r24
    3788:	80 91 53 0e 	lds	r24, 0x0E53
    378c:	81 11       	cpse	r24, r1
    378e:	f3 cf       	rjmp	.-26     	; 0x3776 <xTaskResumeAll+0xbc>
    3790:	80 91 52 0e 	lds	r24, 0x0E52
    3794:	81 30       	cpi	r24, 0x01	; 1
    3796:	39 f4       	brne	.+14     	; 0x37a6 <xTaskResumeAll+0xec>
    3798:	81 dc       	rcall	.-1790   	; 0x309c <vPortYield>
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	05 c0       	rjmp	.+10     	; 0x37a8 <xTaskResumeAll+0xee>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	03 c0       	rjmp	.+6      	; 0x37a8 <xTaskResumeAll+0xee>
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <xTaskResumeAll+0xee>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	0f 90       	pop	r0
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	08 95       	ret

000037bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	99 f0       	breq	.+38     	; 0x37ec <vTaskDelay+0x30>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    37c6:	b5 de       	rcall	.-662    	; 0x3532 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    37c8:	80 91 56 0e 	lds	r24, 0x0E56
    37cc:	90 91 57 0e 	lds	r25, 0x0E57
    37d0:	c8 0f       	add	r28, r24
    37d2:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    37d4:	80 91 a6 0e 	lds	r24, 0x0EA6
    37d8:	90 91 a7 0e 	lds	r25, 0x0EA7
    37dc:	02 96       	adiw	r24, 0x02	; 2
    37de:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    37e2:	ce 01       	movw	r24, r28
    37e4:	3e dd       	rcall	.-1412   	; 0x3262 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    37e6:	69 df       	rcall	.-302    	; 0x36ba <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    37e8:	81 11       	cpse	r24, r1
    37ea:	01 c0       	rjmp	.+2      	; 0x37ee <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    37ec:	57 dc       	rcall	.-1874   	; 0x309c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	08 95       	ret

000037f4 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    37f4:	0f 2e       	mov	r0, r31
    37f6:	f2 e8       	ldi	r31, 0x82	; 130
    37f8:	ef 2e       	mov	r14, r31
    37fa:	fe e0       	ldi	r31, 0x0E	; 14
    37fc:	ff 2e       	mov	r15, r31
    37fe:	f0 2d       	mov	r31, r0
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3800:	ca e5       	ldi	r28, 0x5A	; 90
    3802:	de e0       	ldi	r29, 0x0E	; 14
    3804:	26 c0       	rjmp	.+76     	; 0x3852 <prvIdleTask+0x5e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    3806:	95 de       	rcall	.-726    	; 0x3532 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3808:	18 81       	ld	r17, Y
			}
			( void ) xTaskResumeAll();
    380a:	57 df       	rcall	.-338    	; 0x36ba <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    380c:	11 23       	and	r17, r17
    380e:	09 f1       	breq	.+66     	; 0x3852 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3816:	e0 91 5f 0e 	lds	r30, 0x0E5F
    381a:	f0 91 60 0e 	lds	r31, 0x0E60
    381e:	06 81       	ldd	r16, Z+6	; 0x06
    3820:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3822:	c8 01       	movw	r24, r16
    3824:	02 96       	adiw	r24, 0x02	; 2
    3826:	0e 94 38 10 	call	0x2070	; 0x2070 <uxListRemove>
					--uxCurrentNumberOfTasks;
    382a:	80 91 58 0e 	lds	r24, 0x0E58
    382e:	81 50       	subi	r24, 0x01	; 1
    3830:	80 93 58 0e 	sts	0x0E58, r24
					--uxTasksDeleted;
    3834:	80 91 59 0e 	lds	r24, 0x0E59
    3838:	81 50       	subi	r24, 0x01	; 1
    383a:	80 93 59 0e 	sts	0x0E59, r24
				}
				taskEXIT_CRITICAL();
    383e:	0f 90       	pop	r0
    3840:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3842:	f8 01       	movw	r30, r16
    3844:	87 89       	ldd	r24, Z+23	; 0x17
    3846:	90 8d       	ldd	r25, Z+24	; 0x18
    3848:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vPortFree>
		vPortFree( pxTCB );
    384c:	c8 01       	movw	r24, r16
    384e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3852:	80 91 59 0e 	lds	r24, 0x0E59
    3856:	81 11       	cpse	r24, r1
    3858:	d6 cf       	rjmp	.-84     	; 0x3806 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    385a:	f7 01       	movw	r30, r14
    385c:	80 81       	ld	r24, Z
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	c0 f3       	brcs	.-16     	; 0x3852 <prvIdleTask+0x5e>
			{
				taskYIELD();
    3862:	1c dc       	rcall	.-1992   	; 0x309c <vPortYield>
    3864:	f6 cf       	rjmp	.-20     	; 0x3852 <prvIdleTask+0x5e>

00003866 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3866:	80 91 4f 0e 	lds	r24, 0x0E4F
    386a:	88 23       	and	r24, r24
    386c:	21 f0       	breq	.+8      	; 0x3876 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	80 93 52 0e 	sts	0x0E52, r24
    3874:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    3876:	10 92 52 0e 	sts	0x0E52, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    387a:	80 91 55 0e 	lds	r24, 0x0E55
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	fc 01       	movw	r30, r24
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	ee 0f       	add	r30, r30
    3888:	ff 1f       	adc	r31, r31
    388a:	ee 0f       	add	r30, r30
    388c:	ff 1f       	adc	r31, r31
    388e:	8e 0f       	add	r24, r30
    3890:	9f 1f       	adc	r25, r31
    3892:	fc 01       	movw	r30, r24
    3894:	ee 57       	subi	r30, 0x7E	; 126
    3896:	f1 4f       	sbci	r31, 0xF1	; 241
    3898:	80 81       	ld	r24, Z
    389a:	81 11       	cpse	r24, r1
    389c:	17 c0       	rjmp	.+46     	; 0x38cc <vTaskSwitchContext+0x66>
    389e:	80 91 55 0e 	lds	r24, 0x0E55
    38a2:	81 50       	subi	r24, 0x01	; 1
    38a4:	80 93 55 0e 	sts	0x0E55, r24
    38a8:	80 91 55 0e 	lds	r24, 0x0E55
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	fc 01       	movw	r30, r24
    38b0:	ee 0f       	add	r30, r30
    38b2:	ff 1f       	adc	r31, r31
    38b4:	ee 0f       	add	r30, r30
    38b6:	ff 1f       	adc	r31, r31
    38b8:	ee 0f       	add	r30, r30
    38ba:	ff 1f       	adc	r31, r31
    38bc:	8e 0f       	add	r24, r30
    38be:	9f 1f       	adc	r25, r31
    38c0:	fc 01       	movw	r30, r24
    38c2:	ee 57       	subi	r30, 0x7E	; 126
    38c4:	f1 4f       	sbci	r31, 0xF1	; 241
    38c6:	80 81       	ld	r24, Z
    38c8:	88 23       	and	r24, r24
    38ca:	49 f3       	breq	.-46     	; 0x389e <vTaskSwitchContext+0x38>
    38cc:	e0 91 55 0e 	lds	r30, 0x0E55
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	cf 01       	movw	r24, r30
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	e8 0f       	add	r30, r24
    38e2:	f9 1f       	adc	r31, r25
    38e4:	ee 57       	subi	r30, 0x7E	; 126
    38e6:	f1 4f       	sbci	r31, 0xF1	; 241
    38e8:	a1 81       	ldd	r26, Z+1	; 0x01
    38ea:	b2 81       	ldd	r27, Z+2	; 0x02
    38ec:	12 96       	adiw	r26, 0x02	; 2
    38ee:	0d 90       	ld	r0, X+
    38f0:	bc 91       	ld	r27, X
    38f2:	a0 2d       	mov	r26, r0
    38f4:	b2 83       	std	Z+2, r27	; 0x02
    38f6:	a1 83       	std	Z+1, r26	; 0x01
    38f8:	cf 01       	movw	r24, r30
    38fa:	03 96       	adiw	r24, 0x03	; 3
    38fc:	a8 17       	cp	r26, r24
    38fe:	b9 07       	cpc	r27, r25
    3900:	31 f4       	brne	.+12     	; 0x390e <vTaskSwitchContext+0xa8>
    3902:	12 96       	adiw	r26, 0x02	; 2
    3904:	8d 91       	ld	r24, X+
    3906:	9c 91       	ld	r25, X
    3908:	13 97       	sbiw	r26, 0x03	; 3
    390a:	92 83       	std	Z+2, r25	; 0x02
    390c:	81 83       	std	Z+1, r24	; 0x01
    390e:	01 80       	ldd	r0, Z+1	; 0x01
    3910:	f2 81       	ldd	r31, Z+2	; 0x02
    3912:	e0 2d       	mov	r30, r0
    3914:	86 81       	ldd	r24, Z+6	; 0x06
    3916:	97 81       	ldd	r25, Z+7	; 0x07
    3918:	90 93 a7 0e 	sts	0x0EA7, r25
    391c:	80 93 a6 0e 	sts	0x0EA6, r24
    3920:	08 95       	ret

00003922 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3922:	10 92 15 0f 	sts	0x0F15, r1
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 13 0f 	sts	0x0F13, r24
    392c:	10 92 12 0f 	sts	0x0F12, r1
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	84 e1       	ldi	r24, 0x14	; 20
    3934:	0e 94 aa 2b 	call	0x5754	; 0x5754 <digitalWrite>
    3938:	61 e0       	ldi	r22, 0x01	; 1
    393a:	85 e1       	ldi	r24, 0x15	; 21
    393c:	0e 94 aa 2b 	call	0x5754	; 0x5754 <digitalWrite>
    3940:	e9 eb       	ldi	r30, 0xB9	; 185
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	8e 7f       	andi	r24, 0xFE	; 254
    3948:	80 83       	st	Z, r24
    394a:	80 81       	ld	r24, Z
    394c:	8d 7f       	andi	r24, 0xFD	; 253
    394e:	80 83       	st	Z, r24
    3950:	88 e4       	ldi	r24, 0x48	; 72
    3952:	80 93 b8 00 	sts	0x00B8, r24
    3956:	85 e4       	ldi	r24, 0x45	; 69
    3958:	80 93 bc 00 	sts	0x00BC, r24
    395c:	08 95       	ret

0000395e <twi_readFrom>:
    395e:	41 32       	cpi	r20, 0x21	; 33
    3960:	08 f0       	brcs	.+2      	; 0x3964 <twi_readFrom+0x6>
    3962:	45 c0       	rjmp	.+138    	; 0x39ee <twi_readFrom+0x90>
    3964:	90 91 15 0f 	lds	r25, 0x0F15
    3968:	91 11       	cpse	r25, r1
    396a:	fc cf       	rjmp	.-8      	; 0x3964 <twi_readFrom+0x6>
    396c:	91 e0       	ldi	r25, 0x01	; 1
    396e:	90 93 15 0f 	sts	0x0F15, r25
    3972:	20 93 13 0f 	sts	0x0F13, r18
    3976:	2f ef       	ldi	r18, 0xFF	; 255
    3978:	20 93 a8 0e 	sts	0x0EA8, r18
    397c:	10 92 ed 0e 	sts	0x0EED, r1
    3980:	24 0f       	add	r18, r20
    3982:	20 93 ec 0e 	sts	0x0EEC, r18
    3986:	90 93 14 0f 	sts	0x0F14, r25
    398a:	90 91 14 0f 	lds	r25, 0x0F14
    398e:	88 0f       	add	r24, r24
    3990:	89 2b       	or	r24, r25
    3992:	80 93 14 0f 	sts	0x0F14, r24
    3996:	80 91 12 0f 	lds	r24, 0x0F12
    399a:	81 30       	cpi	r24, 0x01	; 1
    399c:	51 f4       	brne	.+20     	; 0x39b2 <twi_readFrom+0x54>
    399e:	10 92 12 0f 	sts	0x0F12, r1
    39a2:	80 91 14 0f 	lds	r24, 0x0F14
    39a6:	80 93 bb 00 	sts	0x00BB, r24
    39aa:	85 ec       	ldi	r24, 0xC5	; 197
    39ac:	80 93 bc 00 	sts	0x00BC, r24
    39b0:	03 c0       	rjmp	.+6      	; 0x39b8 <twi_readFrom+0x5a>
    39b2:	85 ee       	ldi	r24, 0xE5	; 229
    39b4:	80 93 bc 00 	sts	0x00BC, r24
    39b8:	80 91 15 0f 	lds	r24, 0x0F15
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	e1 f3       	breq	.-8      	; 0x39b8 <twi_readFrom+0x5a>
    39c0:	80 91 ed 0e 	lds	r24, 0x0EED
    39c4:	84 17       	cp	r24, r20
    39c6:	10 f4       	brcc	.+4      	; 0x39cc <twi_readFrom+0x6e>
    39c8:	40 91 ed 0e 	lds	r20, 0x0EED
    39cc:	44 23       	and	r20, r20
    39ce:	89 f0       	breq	.+34     	; 0x39f2 <twi_readFrom+0x94>
    39d0:	ee ee       	ldi	r30, 0xEE	; 238
    39d2:	fe e0       	ldi	r31, 0x0E	; 14
    39d4:	a6 2f       	mov	r26, r22
    39d6:	b7 2f       	mov	r27, r23
    39d8:	2f ef       	ldi	r18, 0xFF	; 255
    39da:	24 0f       	add	r18, r20
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	21 51       	subi	r18, 0x11	; 17
    39e0:	31 4f       	sbci	r19, 0xF1	; 241
    39e2:	91 91       	ld	r25, Z+
    39e4:	9d 93       	st	X+, r25
    39e6:	e2 17       	cp	r30, r18
    39e8:	f3 07       	cpc	r31, r19
    39ea:	d9 f7       	brne	.-10     	; 0x39e2 <twi_readFrom+0x84>
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <twi_readFrom+0x98>
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	08 95       	ret
    39f2:	84 2f       	mov	r24, r20
    39f4:	08 95       	ret
    39f6:	84 2f       	mov	r24, r20
    39f8:	08 95       	ret

000039fa <twi_writeTo>:
    39fa:	0f 93       	push	r16
    39fc:	41 32       	cpi	r20, 0x21	; 33
    39fe:	08 f0       	brcs	.+2      	; 0x3a02 <twi_writeTo+0x8>
    3a00:	50 c0       	rjmp	.+160    	; 0x3aa2 <twi_writeTo+0xa8>
    3a02:	90 91 15 0f 	lds	r25, 0x0F15
    3a06:	91 11       	cpse	r25, r1
    3a08:	fc cf       	rjmp	.-8      	; 0x3a02 <twi_writeTo+0x8>
    3a0a:	92 e0       	ldi	r25, 0x02	; 2
    3a0c:	90 93 15 0f 	sts	0x0F15, r25
    3a10:	00 93 13 0f 	sts	0x0F13, r16
    3a14:	9f ef       	ldi	r25, 0xFF	; 255
    3a16:	90 93 a8 0e 	sts	0x0EA8, r25
    3a1a:	10 92 ed 0e 	sts	0x0EED, r1
    3a1e:	40 93 ec 0e 	sts	0x0EEC, r20
    3a22:	44 23       	and	r20, r20
    3a24:	69 f0       	breq	.+26     	; 0x3a40 <twi_writeTo+0x46>
    3a26:	fb 01       	movw	r30, r22
    3a28:	ae ee       	ldi	r26, 0xEE	; 238
    3a2a:	be e0       	ldi	r27, 0x0E	; 14
    3a2c:	6f 5f       	subi	r22, 0xFF	; 255
    3a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a30:	41 50       	subi	r20, 0x01	; 1
    3a32:	64 0f       	add	r22, r20
    3a34:	71 1d       	adc	r23, r1
    3a36:	91 91       	ld	r25, Z+
    3a38:	9d 93       	st	X+, r25
    3a3a:	e6 17       	cp	r30, r22
    3a3c:	f7 07       	cpc	r31, r23
    3a3e:	d9 f7       	brne	.-10     	; 0x3a36 <twi_writeTo+0x3c>
    3a40:	10 92 14 0f 	sts	0x0F14, r1
    3a44:	90 91 14 0f 	lds	r25, 0x0F14
    3a48:	88 0f       	add	r24, r24
    3a4a:	89 2b       	or	r24, r25
    3a4c:	80 93 14 0f 	sts	0x0F14, r24
    3a50:	80 91 12 0f 	lds	r24, 0x0F12
    3a54:	81 30       	cpi	r24, 0x01	; 1
    3a56:	51 f4       	brne	.+20     	; 0x3a6c <twi_writeTo+0x72>
    3a58:	10 92 12 0f 	sts	0x0F12, r1
    3a5c:	80 91 14 0f 	lds	r24, 0x0F14
    3a60:	80 93 bb 00 	sts	0x00BB, r24
    3a64:	85 ec       	ldi	r24, 0xC5	; 197
    3a66:	80 93 bc 00 	sts	0x00BC, r24
    3a6a:	03 c0       	rjmp	.+6      	; 0x3a72 <twi_writeTo+0x78>
    3a6c:	85 ee       	ldi	r24, 0xE5	; 229
    3a6e:	80 93 bc 00 	sts	0x00BC, r24
    3a72:	22 23       	and	r18, r18
    3a74:	41 f0       	breq	.+16     	; 0x3a86 <twi_writeTo+0x8c>
    3a76:	80 91 15 0f 	lds	r24, 0x0F15
    3a7a:	82 30       	cpi	r24, 0x02	; 2
    3a7c:	21 f4       	brne	.+8      	; 0x3a86 <twi_writeTo+0x8c>
    3a7e:	80 91 15 0f 	lds	r24, 0x0F15
    3a82:	82 30       	cpi	r24, 0x02	; 2
    3a84:	e1 f3       	breq	.-8      	; 0x3a7e <twi_writeTo+0x84>
    3a86:	80 91 a8 0e 	lds	r24, 0x0EA8
    3a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a8c:	61 f0       	breq	.+24     	; 0x3aa6 <twi_writeTo+0xac>
    3a8e:	80 91 a8 0e 	lds	r24, 0x0EA8
    3a92:	80 32       	cpi	r24, 0x20	; 32
    3a94:	51 f0       	breq	.+20     	; 0x3aaa <twi_writeTo+0xb0>
    3a96:	80 91 a8 0e 	lds	r24, 0x0EA8
    3a9a:	80 33       	cpi	r24, 0x30	; 48
    3a9c:	41 f4       	brne	.+16     	; 0x3aae <twi_writeTo+0xb4>
    3a9e:	83 e0       	ldi	r24, 0x03	; 3
    3aa0:	07 c0       	rjmp	.+14     	; 0x3ab0 <twi_writeTo+0xb6>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	05 c0       	rjmp	.+10     	; 0x3ab0 <twi_writeTo+0xb6>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	03 c0       	rjmp	.+6      	; 0x3ab0 <twi_writeTo+0xb6>
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <twi_writeTo+0xb6>
    3aae:	84 e0       	ldi	r24, 0x04	; 4
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <twi_transmit>:
    3ab4:	61 32       	cpi	r22, 0x21	; 33
    3ab6:	a8 f4       	brcc	.+42     	; 0x3ae2 <twi_transmit+0x2e>
    3ab8:	20 91 15 0f 	lds	r18, 0x0F15
    3abc:	24 30       	cpi	r18, 0x04	; 4
    3abe:	99 f4       	brne	.+38     	; 0x3ae6 <twi_transmit+0x32>
    3ac0:	60 93 ca 0e 	sts	0x0ECA, r22
    3ac4:	66 23       	and	r22, r22
    3ac6:	89 f0       	breq	.+34     	; 0x3aea <twi_transmit+0x36>
    3ac8:	fc 01       	movw	r30, r24
    3aca:	ac ec       	ldi	r26, 0xCC	; 204
    3acc:	be e0       	ldi	r27, 0x0E	; 14
    3ace:	01 96       	adiw	r24, 0x01	; 1
    3ad0:	61 50       	subi	r22, 0x01	; 1
    3ad2:	86 0f       	add	r24, r22
    3ad4:	91 1d       	adc	r25, r1
    3ad6:	21 91       	ld	r18, Z+
    3ad8:	2d 93       	st	X+, r18
    3ada:	e8 17       	cp	r30, r24
    3adc:	f9 07       	cpc	r31, r25
    3ade:	d9 f7       	brne	.-10     	; 0x3ad6 <twi_transmit+0x22>
    3ae0:	06 c0       	rjmp	.+12     	; 0x3aee <twi_transmit+0x3a>
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	08 95       	ret
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	08 95       	ret
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	08 95       	ret
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	08 95       	ret

00003af2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3af2:	85 ed       	ldi	r24, 0xD5	; 213
    3af4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3af8:	ec eb       	ldi	r30, 0xBC	; 188
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	84 fd       	sbrc	r24, 4
    3b00:	fd cf       	rjmp	.-6      	; 0x3afc <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3b02:	10 92 15 0f 	sts	0x0F15, r1
    3b06:	08 95       	ret

00003b08 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3b08:	85 ec       	ldi	r24, 0xC5	; 197
    3b0a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3b0e:	10 92 15 0f 	sts	0x0F15, r1
    3b12:	08 95       	ret

00003b14 <__vector_39>:
}

ISR(TWI_vect)
{
    3b14:	1f 92       	push	r1
    3b16:	0f 92       	push	r0
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	0f 92       	push	r0
    3b1c:	11 24       	eor	r1, r1
    3b1e:	0b b6       	in	r0, 0x3b	; 59
    3b20:	0f 92       	push	r0
    3b22:	2f 93       	push	r18
    3b24:	3f 93       	push	r19
    3b26:	4f 93       	push	r20
    3b28:	5f 93       	push	r21
    3b2a:	6f 93       	push	r22
    3b2c:	7f 93       	push	r23
    3b2e:	8f 93       	push	r24
    3b30:	9f 93       	push	r25
    3b32:	af 93       	push	r26
    3b34:	bf 93       	push	r27
    3b36:	ef 93       	push	r30
    3b38:	ff 93       	push	r31
  switch(TW_STATUS){
    3b3a:	80 91 b9 00 	lds	r24, 0x00B9
    3b3e:	88 7f       	andi	r24, 0xF8	; 248
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	89 3c       	cpi	r24, 0xC9	; 201
    3b44:	91 05       	cpc	r25, r1
    3b46:	08 f0       	brcs	.+2      	; 0x3b4a <__vector_39+0x36>
    3b48:	ee c0       	rjmp	.+476    	; 0x3d26 <__vector_39+0x212>
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	ee 58       	subi	r30, 0x8E	; 142
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3b54:	80 91 14 0f 	lds	r24, 0x0F14
    3b58:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b5c:	85 ec       	ldi	r24, 0xC5	; 197
    3b5e:	80 93 bc 00 	sts	0x00BC, r24
    3b62:	e1 c0       	rjmp	.+450    	; 0x3d26 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3b64:	90 91 ed 0e 	lds	r25, 0x0EED
    3b68:	80 91 ec 0e 	lds	r24, 0x0EEC
    3b6c:	98 17       	cp	r25, r24
    3b6e:	80 f4       	brcc	.+32     	; 0x3b90 <__vector_39+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3b70:	e0 91 ed 0e 	lds	r30, 0x0EED
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	8e 0f       	add	r24, r30
    3b78:	80 93 ed 0e 	sts	0x0EED, r24
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	e2 51       	subi	r30, 0x12	; 18
    3b80:	f1 4f       	sbci	r31, 0xF1	; 241
    3b82:	80 81       	ld	r24, Z
    3b84:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b88:	85 ec       	ldi	r24, 0xC5	; 197
    3b8a:	80 93 bc 00 	sts	0x00BC, r24
    3b8e:	cb c0       	rjmp	.+406    	; 0x3d26 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3b90:	80 91 13 0f 	lds	r24, 0x0F13
    3b94:	88 23       	and	r24, r24
    3b96:	11 f0       	breq	.+4      	; 0x3b9c <__vector_39+0x88>
          twi_stop();
    3b98:	ac df       	rcall	.-168    	; 0x3af2 <twi_stop>
    3b9a:	c5 c0       	rjmp	.+394    	; 0x3d26 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	80 93 12 0f 	sts	0x0F12, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3ba2:	84 ea       	ldi	r24, 0xA4	; 164
    3ba4:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3ba8:	10 92 15 0f 	sts	0x0F15, r1
    3bac:	bc c0       	rjmp	.+376    	; 0x3d26 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3bae:	80 e2       	ldi	r24, 0x20	; 32
    3bb0:	80 93 a8 0e 	sts	0x0EA8, r24
      twi_stop();
    3bb4:	9e df       	rcall	.-196    	; 0x3af2 <twi_stop>
      break;
    3bb6:	b7 c0       	rjmp	.+366    	; 0x3d26 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3bb8:	80 e3       	ldi	r24, 0x30	; 48
    3bba:	80 93 a8 0e 	sts	0x0EA8, r24
      twi_stop();
    3bbe:	99 df       	rcall	.-206    	; 0x3af2 <twi_stop>
      break;
    3bc0:	b2 c0       	rjmp	.+356    	; 0x3d26 <__vector_39+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3bc2:	88 e3       	ldi	r24, 0x38	; 56
    3bc4:	80 93 a8 0e 	sts	0x0EA8, r24
      twi_releaseBus();
    3bc8:	9f df       	rcall	.-194    	; 0x3b08 <twi_releaseBus>
      break;
    3bca:	ad c0       	rjmp	.+346    	; 0x3d26 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3bcc:	e0 91 ed 0e 	lds	r30, 0x0EED
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	8e 0f       	add	r24, r30
    3bd4:	80 93 ed 0e 	sts	0x0EED, r24
    3bd8:	80 91 bb 00 	lds	r24, 0x00BB
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	e2 51       	subi	r30, 0x12	; 18
    3be0:	f1 4f       	sbci	r31, 0xF1	; 241
    3be2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3be4:	90 91 ed 0e 	lds	r25, 0x0EED
    3be8:	80 91 ec 0e 	lds	r24, 0x0EEC
    3bec:	98 17       	cp	r25, r24
    3bee:	20 f4       	brcc	.+8      	; 0x3bf8 <__vector_39+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3bf0:	85 ec       	ldi	r24, 0xC5	; 197
    3bf2:	80 93 bc 00 	sts	0x00BC, r24
    3bf6:	97 c0       	rjmp	.+302    	; 0x3d26 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3bf8:	85 e8       	ldi	r24, 0x85	; 133
    3bfa:	80 93 bc 00 	sts	0x00BC, r24
    3bfe:	93 c0       	rjmp	.+294    	; 0x3d26 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c00:	e0 91 ed 0e 	lds	r30, 0x0EED
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	8e 0f       	add	r24, r30
    3c08:	80 93 ed 0e 	sts	0x0EED, r24
    3c0c:	80 91 bb 00 	lds	r24, 0x00BB
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	e2 51       	subi	r30, 0x12	; 18
    3c14:	f1 4f       	sbci	r31, 0xF1	; 241
    3c16:	80 83       	st	Z, r24
	if (twi_sendStop)
    3c18:	80 91 13 0f 	lds	r24, 0x0F13
    3c1c:	88 23       	and	r24, r24
    3c1e:	11 f0       	breq	.+4      	; 0x3c24 <__vector_39+0x110>
          twi_stop();
    3c20:	68 df       	rcall	.-304    	; 0x3af2 <twi_stop>
    3c22:	81 c0       	rjmp	.+258    	; 0x3d26 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	80 93 12 0f 	sts	0x0F12, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3c2a:	84 ea       	ldi	r24, 0xA4	; 164
    3c2c:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3c30:	10 92 15 0f 	sts	0x0F15, r1
    3c34:	78 c0       	rjmp	.+240    	; 0x3d26 <__vector_39+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3c36:	5d df       	rcall	.-326    	; 0x3af2 <twi_stop>
      break;
    3c38:	76 c0       	rjmp	.+236    	; 0x3d26 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3c3a:	83 e0       	ldi	r24, 0x03	; 3
    3c3c:	80 93 15 0f 	sts	0x0F15, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3c40:	10 92 a9 0e 	sts	0x0EA9, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c44:	85 ec       	ldi	r24, 0xC5	; 197
    3c46:	80 93 bc 00 	sts	0x00BC, r24
    3c4a:	6d c0       	rjmp	.+218    	; 0x3d26 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c4c:	80 91 a9 0e 	lds	r24, 0x0EA9
    3c50:	80 32       	cpi	r24, 0x20	; 32
    3c52:	80 f4       	brcc	.+32     	; 0x3c74 <__vector_39+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3c54:	e0 91 a9 0e 	lds	r30, 0x0EA9
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	8e 0f       	add	r24, r30
    3c5c:	80 93 a9 0e 	sts	0x0EA9, r24
    3c60:	80 91 bb 00 	lds	r24, 0x00BB
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	e6 55       	subi	r30, 0x56	; 86
    3c68:	f1 4f       	sbci	r31, 0xF1	; 241
    3c6a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c6c:	85 ec       	ldi	r24, 0xC5	; 197
    3c6e:	80 93 bc 00 	sts	0x00BC, r24
    3c72:	59 c0       	rjmp	.+178    	; 0x3d26 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3c74:	85 e8       	ldi	r24, 0x85	; 133
    3c76:	80 93 bc 00 	sts	0x00BC, r24
    3c7a:	55 c0       	rjmp	.+170    	; 0x3d26 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c7c:	80 91 a9 0e 	lds	r24, 0x0EA9
    3c80:	80 32       	cpi	r24, 0x20	; 32
    3c82:	30 f4       	brcc	.+12     	; 0x3c90 <__vector_39+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3c84:	e0 91 a9 0e 	lds	r30, 0x0EA9
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	e6 55       	subi	r30, 0x56	; 86
    3c8c:	f1 4f       	sbci	r31, 0xF1	; 241
    3c8e:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    3c90:	30 df       	rcall	.-416    	; 0x3af2 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3c92:	60 91 a9 0e 	lds	r22, 0x0EA9
    3c96:	70 e0       	ldi	r23, 0x00	; 0
    3c98:	e0 91 0e 0f 	lds	r30, 0x0F0E
    3c9c:	f0 91 0f 0f 	lds	r31, 0x0F0F
    3ca0:	8a ea       	ldi	r24, 0xAA	; 170
    3ca2:	9e e0       	ldi	r25, 0x0E	; 14
    3ca4:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3ca6:	10 92 a9 0e 	sts	0x0EA9, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3caa:	2e df       	rcall	.-420    	; 0x3b08 <twi_releaseBus>
      break;
    3cac:	3c c0       	rjmp	.+120    	; 0x3d26 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3cae:	85 e8       	ldi	r24, 0x85	; 133
    3cb0:	80 93 bc 00 	sts	0x00BC, r24
    3cb4:	38 c0       	rjmp	.+112    	; 0x3d26 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3cb6:	84 e0       	ldi	r24, 0x04	; 4
    3cb8:	80 93 15 0f 	sts	0x0F15, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3cbc:	10 92 cb 0e 	sts	0x0ECB, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3cc0:	10 92 ca 0e 	sts	0x0ECA, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3cc4:	e0 91 10 0f 	lds	r30, 0x0F10
    3cc8:	f0 91 11 0f 	lds	r31, 0x0F11
    3ccc:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3cce:	80 91 ca 0e 	lds	r24, 0x0ECA
    3cd2:	81 11       	cpse	r24, r1
    3cd4:	05 c0       	rjmp	.+10     	; 0x3ce0 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	80 93 ca 0e 	sts	0x0ECA, r24
        twi_txBuffer[0] = 0x00;
    3cdc:	10 92 cc 0e 	sts	0x0ECC, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3ce0:	e0 91 cb 0e 	lds	r30, 0x0ECB
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	8e 0f       	add	r24, r30
    3ce8:	80 93 cb 0e 	sts	0x0ECB, r24
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	e4 53       	subi	r30, 0x34	; 52
    3cf0:	f1 4f       	sbci	r31, 0xF1	; 241
    3cf2:	80 81       	ld	r24, Z
    3cf4:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3cf8:	90 91 cb 0e 	lds	r25, 0x0ECB
    3cfc:	80 91 ca 0e 	lds	r24, 0x0ECA
    3d00:	98 17       	cp	r25, r24
    3d02:	20 f4       	brcc	.+8      	; 0x3d0c <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d04:	85 ec       	ldi	r24, 0xC5	; 197
    3d06:	80 93 bc 00 	sts	0x00BC, r24
    3d0a:	0d c0       	rjmp	.+26     	; 0x3d26 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3d0c:	85 e8       	ldi	r24, 0x85	; 133
    3d0e:	80 93 bc 00 	sts	0x00BC, r24
    3d12:	09 c0       	rjmp	.+18     	; 0x3d26 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d14:	85 ec       	ldi	r24, 0xC5	; 197
    3d16:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3d1a:	10 92 15 0f 	sts	0x0F15, r1
      break;
    3d1e:	03 c0       	rjmp	.+6      	; 0x3d26 <__vector_39+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3d20:	10 92 a8 0e 	sts	0x0EA8, r1
      twi_stop();
    3d24:	e6 de       	rcall	.-564    	; 0x3af2 <twi_stop>
      break;
  }
}
    3d26:	ff 91       	pop	r31
    3d28:	ef 91       	pop	r30
    3d2a:	bf 91       	pop	r27
    3d2c:	af 91       	pop	r26
    3d2e:	9f 91       	pop	r25
    3d30:	8f 91       	pop	r24
    3d32:	7f 91       	pop	r23
    3d34:	6f 91       	pop	r22
    3d36:	5f 91       	pop	r21
    3d38:	4f 91       	pop	r20
    3d3a:	3f 91       	pop	r19
    3d3c:	2f 91       	pop	r18
    3d3e:	0f 90       	pop	r0
    3d40:	0b be       	out	0x3b, r0	; 59
    3d42:	0f 90       	pop	r0
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	0f 90       	pop	r0
    3d48:	1f 90       	pop	r1
    3d4a:	18 95       	reti

00003d4c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3d4c:	80 91 46 0f 	lds	r24, 0x0F46
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	20 91 47 0f 	lds	r18, 0x0F47
    3d56:	82 1b       	sub	r24, r18
    3d58:	91 09       	sbc	r25, r1
    3d5a:	08 95       	ret

00003d5c <_ZN7TwoWire4readEv>:
    3d5c:	20 91 47 0f 	lds	r18, 0x0F47
    3d60:	80 91 46 0f 	lds	r24, 0x0F46
    3d64:	28 17       	cp	r18, r24
    3d66:	50 f4       	brcc	.+20     	; 0x3d7c <_ZN7TwoWire4readEv+0x20>
    3d68:	e2 2f       	mov	r30, r18
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	e8 5b       	subi	r30, 0xB8	; 184
    3d6e:	f0 4f       	sbci	r31, 0xF0	; 240
    3d70:	80 81       	ld	r24, Z
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	2f 5f       	subi	r18, 0xFF	; 255
    3d76:	20 93 47 0f 	sts	0x0F47, r18
    3d7a:	08 95       	ret
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	9f ef       	ldi	r25, 0xFF	; 255
    3d80:	08 95       	ret

00003d82 <_ZN7TwoWire4peekEv>:
    3d82:	e0 91 47 0f 	lds	r30, 0x0F47
    3d86:	80 91 46 0f 	lds	r24, 0x0F46
    3d8a:	e8 17       	cp	r30, r24
    3d8c:	30 f4       	brcc	.+12     	; 0x3d9a <_ZN7TwoWire4peekEv+0x18>
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	e8 5b       	subi	r30, 0xB8	; 184
    3d92:	f0 4f       	sbci	r31, 0xF0	; 240
    3d94:	80 81       	ld	r24, Z
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	08 95       	ret
    3d9a:	8f ef       	ldi	r24, 0xFF	; 255
    3d9c:	9f ef       	ldi	r25, 0xFF	; 255
    3d9e:	08 95       	ret

00003da0 <_ZN7TwoWire5flushEv>:
    3da0:	08 95       	ret

00003da2 <_ZN7TwoWire5writeEPKhj>:
    3da2:	cf 92       	push	r12
    3da4:	df 92       	push	r13
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	8c 01       	movw	r16, r24
    3db4:	7b 01       	movw	r14, r22
    3db6:	6a 01       	movw	r12, r20
    3db8:	80 91 22 0f 	lds	r24, 0x0F22
    3dbc:	88 23       	and	r24, r24
    3dbe:	99 f0       	breq	.+38     	; 0x3de6 <_ZN7TwoWire5writeEPKhj+0x44>
    3dc0:	41 15       	cp	r20, r1
    3dc2:	51 05       	cpc	r21, r1
    3dc4:	99 f0       	breq	.+38     	; 0x3dec <_ZN7TwoWire5writeEPKhj+0x4a>
    3dc6:	eb 01       	movw	r28, r22
    3dc8:	e4 0e       	add	r14, r20
    3dca:	f5 1e       	adc	r15, r21
    3dcc:	69 91       	ld	r22, Y+
    3dce:	d8 01       	movw	r26, r16
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	01 90       	ld	r0, Z+
    3dd6:	f0 81       	ld	r31, Z
    3dd8:	e0 2d       	mov	r30, r0
    3dda:	c8 01       	movw	r24, r16
    3ddc:	19 95       	eicall
    3dde:	ce 15       	cp	r28, r14
    3de0:	df 05       	cpc	r29, r15
    3de2:	a1 f7       	brne	.-24     	; 0x3dcc <_ZN7TwoWire5writeEPKhj+0x2a>
    3de4:	03 c0       	rjmp	.+6      	; 0x3dec <_ZN7TwoWire5writeEPKhj+0x4a>
    3de6:	64 2f       	mov	r22, r20
    3de8:	c7 01       	movw	r24, r14
    3dea:	64 de       	rcall	.-824    	; 0x3ab4 <twi_transmit>
    3dec:	c6 01       	movw	r24, r12
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	df 90       	pop	r13
    3dfc:	cf 90       	pop	r12
    3dfe:	08 95       	ret

00003e00 <_ZN7TwoWire5writeEh>:
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	1f 92       	push	r1
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	69 83       	std	Y+1, r22	; 0x01
    3e0c:	20 91 22 0f 	lds	r18, 0x0F22
    3e10:	22 23       	and	r18, r18
    3e12:	e1 f0       	breq	.+56     	; 0x3e4c <_ZN7TwoWire5writeEh+0x4c>
    3e14:	20 91 23 0f 	lds	r18, 0x0F23
    3e18:	20 32       	cpi	r18, 0x20	; 32
    3e1a:	40 f0       	brcs	.+16     	; 0x3e2c <_ZN7TwoWire5writeEh+0x2c>
    3e1c:	21 e0       	ldi	r18, 0x01	; 1
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	fc 01       	movw	r30, r24
    3e22:	33 83       	std	Z+3, r19	; 0x03
    3e24:	22 83       	std	Z+2, r18	; 0x02
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	16 c0       	rjmp	.+44     	; 0x3e58 <_ZN7TwoWire5writeEh+0x58>
    3e2c:	80 91 24 0f 	lds	r24, 0x0F24
    3e30:	e8 2f       	mov	r30, r24
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	eb 5d       	subi	r30, 0xDB	; 219
    3e36:	f0 4f       	sbci	r31, 0xF0	; 240
    3e38:	99 81       	ldd	r25, Y+1	; 0x01
    3e3a:	90 83       	st	Z, r25
    3e3c:	8f 5f       	subi	r24, 0xFF	; 255
    3e3e:	80 93 24 0f 	sts	0x0F24, r24
    3e42:	80 93 23 0f 	sts	0x0F23, r24
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	06 c0       	rjmp	.+12     	; 0x3e58 <_ZN7TwoWire5writeEh+0x58>
    3e4c:	61 e0       	ldi	r22, 0x01	; 1
    3e4e:	ce 01       	movw	r24, r28
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	30 de       	rcall	.-928    	; 0x3ab4 <twi_transmit>
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0f 90       	pop	r0
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	08 95       	ret

00003e60 <_ZN7TwoWireC1Ev>:
    3e60:	fc 01       	movw	r30, r24
    3e62:	13 82       	std	Z+3, r1	; 0x03
    3e64:	12 82       	std	Z+2, r1	; 0x02
    3e66:	48 ee       	ldi	r20, 0xE8	; 232
    3e68:	53 e0       	ldi	r21, 0x03	; 3
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	70 e0       	ldi	r23, 0x00	; 0
    3e6e:	44 83       	std	Z+4, r20	; 0x04
    3e70:	55 83       	std	Z+5, r21	; 0x05
    3e72:	66 83       	std	Z+6, r22	; 0x06
    3e74:	77 83       	std	Z+7, r23	; 0x07
    3e76:	81 ec       	ldi	r24, 0xC1	; 193
    3e78:	92 e0       	ldi	r25, 0x02	; 2
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	08 95       	ret

00003e80 <_ZN7TwoWire5beginEv>:
    3e80:	10 92 47 0f 	sts	0x0F47, r1
    3e84:	10 92 46 0f 	sts	0x0F46, r1
    3e88:	10 92 24 0f 	sts	0x0F24, r1
    3e8c:	10 92 23 0f 	sts	0x0F23, r1
    3e90:	48 cd       	rjmp	.-1392   	; 0x3922 <twi_init>
    3e92:	08 95       	ret

00003e94 <_ZN7TwoWire11requestFromEhhh>:
    3e94:	86 2f       	mov	r24, r22
    3e96:	41 32       	cpi	r20, 0x21	; 33
    3e98:	08 f0       	brcs	.+2      	; 0x3e9c <_ZN7TwoWire11requestFromEhhh+0x8>
    3e9a:	40 e2       	ldi	r20, 0x20	; 32
    3e9c:	68 e4       	ldi	r22, 0x48	; 72
    3e9e:	7f e0       	ldi	r23, 0x0F	; 15
    3ea0:	5e dd       	rcall	.-1348   	; 0x395e <twi_readFrom>
    3ea2:	10 92 47 0f 	sts	0x0F47, r1
    3ea6:	80 93 46 0f 	sts	0x0F46, r24
    3eaa:	08 95       	ret

00003eac <_ZN7TwoWire11requestFromEhh>:
    3eac:	21 e0       	ldi	r18, 0x01	; 1
    3eae:	f2 cf       	rjmp	.-28     	; 0x3e94 <_ZN7TwoWire11requestFromEhhh>
    3eb0:	08 95       	ret

00003eb2 <_ZN7TwoWire17beginTransmissionEh>:
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	80 93 22 0f 	sts	0x0F22, r24
    3eb8:	60 93 45 0f 	sts	0x0F45, r22
    3ebc:	10 92 24 0f 	sts	0x0F24, r1
    3ec0:	10 92 23 0f 	sts	0x0F23, r1
    3ec4:	08 95       	ret

00003ec6 <_ZN7TwoWire15endTransmissionEh>:
    3ec6:	0f 93       	push	r16
    3ec8:	06 2f       	mov	r16, r22
    3eca:	21 e0       	ldi	r18, 0x01	; 1
    3ecc:	40 91 23 0f 	lds	r20, 0x0F23
    3ed0:	65 e2       	ldi	r22, 0x25	; 37
    3ed2:	7f e0       	ldi	r23, 0x0F	; 15
    3ed4:	80 91 45 0f 	lds	r24, 0x0F45
    3ed8:	90 dd       	rcall	.-1248   	; 0x39fa <twi_writeTo>
    3eda:	10 92 24 0f 	sts	0x0F24, r1
    3ede:	10 92 23 0f 	sts	0x0F23, r1
    3ee2:	10 92 22 0f 	sts	0x0F22, r1
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <_ZN7TwoWire15endTransmissionEv>:
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	ec cf       	rjmp	.-40     	; 0x3ec6 <_ZN7TwoWire15endTransmissionEh>
    3eee:	08 95       	ret

00003ef0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3ef0:	86 e1       	ldi	r24, 0x16	; 22
    3ef2:	9f e0       	ldi	r25, 0x0F	; 15
    3ef4:	b5 cf       	rjmp	.-150    	; 0x3e60 <_ZN7TwoWireC1Ev>
    3ef6:	08 95       	ret

00003ef8 <__subsf3>:
    3ef8:	50 58       	subi	r21, 0x80	; 128

00003efa <__addsf3>:
    3efa:	bb 27       	eor	r27, r27
    3efc:	aa 27       	eor	r26, r26
    3efe:	0e d0       	rcall	.+28     	; 0x3f1c <__addsf3x>
    3f00:	6a c2       	rjmp	.+1236   	; 0x43d6 <__fp_round>
    3f02:	33 d2       	rcall	.+1126   	; 0x436a <__fp_pscA>
    3f04:	30 f0       	brcs	.+12     	; 0x3f12 <__addsf3+0x18>
    3f06:	38 d2       	rcall	.+1136   	; 0x4378 <__fp_pscB>
    3f08:	20 f0       	brcs	.+8      	; 0x3f12 <__addsf3+0x18>
    3f0a:	31 f4       	brne	.+12     	; 0x3f18 <__addsf3+0x1e>
    3f0c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f0e:	11 f4       	brne	.+4      	; 0x3f14 <__addsf3+0x1a>
    3f10:	1e f4       	brtc	.+6      	; 0x3f18 <__addsf3+0x1e>
    3f12:	f2 c1       	rjmp	.+996    	; 0x42f8 <__fp_nan>
    3f14:	0e f4       	brtc	.+2      	; 0x3f18 <__addsf3+0x1e>
    3f16:	e0 95       	com	r30
    3f18:	e7 fb       	bst	r30, 7
    3f1a:	e8 c1       	rjmp	.+976    	; 0x42ec <__fp_inf>

00003f1c <__addsf3x>:
    3f1c:	e9 2f       	mov	r30, r25
    3f1e:	7d d2       	rcall	.+1274   	; 0x441a <__fp_split3>
    3f20:	80 f3       	brcs	.-32     	; 0x3f02 <__addsf3+0x8>
    3f22:	ba 17       	cp	r27, r26
    3f24:	62 07       	cpc	r22, r18
    3f26:	73 07       	cpc	r23, r19
    3f28:	84 07       	cpc	r24, r20
    3f2a:	95 07       	cpc	r25, r21
    3f2c:	18 f0       	brcs	.+6      	; 0x3f34 <__addsf3x+0x18>
    3f2e:	71 f4       	brne	.+28     	; 0x3f4c <__addsf3x+0x30>
    3f30:	9e f5       	brtc	.+102    	; 0x3f98 <__addsf3x+0x7c>
    3f32:	95 c2       	rjmp	.+1322   	; 0x445e <__fp_zero>
    3f34:	0e f4       	brtc	.+2      	; 0x3f38 <__addsf3x+0x1c>
    3f36:	e0 95       	com	r30
    3f38:	0b 2e       	mov	r0, r27
    3f3a:	ba 2f       	mov	r27, r26
    3f3c:	a0 2d       	mov	r26, r0
    3f3e:	0b 01       	movw	r0, r22
    3f40:	b9 01       	movw	r22, r18
    3f42:	90 01       	movw	r18, r0
    3f44:	0c 01       	movw	r0, r24
    3f46:	ca 01       	movw	r24, r20
    3f48:	a0 01       	movw	r20, r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	ff 27       	eor	r31, r31
    3f4e:	59 1b       	sub	r21, r25
    3f50:	99 f0       	breq	.+38     	; 0x3f78 <__addsf3x+0x5c>
    3f52:	59 3f       	cpi	r21, 0xF9	; 249
    3f54:	50 f4       	brcc	.+20     	; 0x3f6a <__addsf3x+0x4e>
    3f56:	50 3e       	cpi	r21, 0xE0	; 224
    3f58:	68 f1       	brcs	.+90     	; 0x3fb4 <__addsf3x+0x98>
    3f5a:	1a 16       	cp	r1, r26
    3f5c:	f0 40       	sbci	r31, 0x00	; 0
    3f5e:	a2 2f       	mov	r26, r18
    3f60:	23 2f       	mov	r18, r19
    3f62:	34 2f       	mov	r19, r20
    3f64:	44 27       	eor	r20, r20
    3f66:	58 5f       	subi	r21, 0xF8	; 248
    3f68:	f3 cf       	rjmp	.-26     	; 0x3f50 <__addsf3x+0x34>
    3f6a:	46 95       	lsr	r20
    3f6c:	37 95       	ror	r19
    3f6e:	27 95       	ror	r18
    3f70:	a7 95       	ror	r26
    3f72:	f0 40       	sbci	r31, 0x00	; 0
    3f74:	53 95       	inc	r21
    3f76:	c9 f7       	brne	.-14     	; 0x3f6a <__addsf3x+0x4e>
    3f78:	7e f4       	brtc	.+30     	; 0x3f98 <__addsf3x+0x7c>
    3f7a:	1f 16       	cp	r1, r31
    3f7c:	ba 0b       	sbc	r27, r26
    3f7e:	62 0b       	sbc	r22, r18
    3f80:	73 0b       	sbc	r23, r19
    3f82:	84 0b       	sbc	r24, r20
    3f84:	ba f0       	brmi	.+46     	; 0x3fb4 <__addsf3x+0x98>
    3f86:	91 50       	subi	r25, 0x01	; 1
    3f88:	a1 f0       	breq	.+40     	; 0x3fb2 <__addsf3x+0x96>
    3f8a:	ff 0f       	add	r31, r31
    3f8c:	bb 1f       	adc	r27, r27
    3f8e:	66 1f       	adc	r22, r22
    3f90:	77 1f       	adc	r23, r23
    3f92:	88 1f       	adc	r24, r24
    3f94:	c2 f7       	brpl	.-16     	; 0x3f86 <__addsf3x+0x6a>
    3f96:	0e c0       	rjmp	.+28     	; 0x3fb4 <__addsf3x+0x98>
    3f98:	ba 0f       	add	r27, r26
    3f9a:	62 1f       	adc	r22, r18
    3f9c:	73 1f       	adc	r23, r19
    3f9e:	84 1f       	adc	r24, r20
    3fa0:	48 f4       	brcc	.+18     	; 0x3fb4 <__addsf3x+0x98>
    3fa2:	87 95       	ror	r24
    3fa4:	77 95       	ror	r23
    3fa6:	67 95       	ror	r22
    3fa8:	b7 95       	ror	r27
    3faa:	f7 95       	ror	r31
    3fac:	9e 3f       	cpi	r25, 0xFE	; 254
    3fae:	08 f0       	brcs	.+2      	; 0x3fb2 <__addsf3x+0x96>
    3fb0:	b3 cf       	rjmp	.-154    	; 0x3f18 <__addsf3+0x1e>
    3fb2:	93 95       	inc	r25
    3fb4:	88 0f       	add	r24, r24
    3fb6:	08 f0       	brcs	.+2      	; 0x3fba <__addsf3x+0x9e>
    3fb8:	99 27       	eor	r25, r25
    3fba:	ee 0f       	add	r30, r30
    3fbc:	97 95       	ror	r25
    3fbe:	87 95       	ror	r24
    3fc0:	08 95       	ret

00003fc2 <asin>:
    3fc2:	9f 93       	push	r25
    3fc4:	9f 77       	andi	r25, 0x7F	; 127
    3fc6:	ee e3       	ldi	r30, 0x3E	; 62
    3fc8:	89 37       	cpi	r24, 0x79	; 121
    3fca:	9e 07       	cpc	r25, r30
    3fcc:	20 f4       	brcc	.+8      	; 0x3fd6 <asin+0x14>
    3fce:	e6 e7       	ldi	r30, 0x76	; 118
    3fd0:	f2 e0       	ldi	r31, 0x02	; 2
    3fd2:	ba d1       	rcall	.+884    	; 0x4348 <__fp_powsodd>
    3fd4:	09 c0       	rjmp	.+18     	; 0x3fe8 <asin+0x26>
    3fd6:	4b d1       	rcall	.+662    	; 0x426e <__fp_arccos>
    3fd8:	90 58       	subi	r25, 0x80	; 128
    3fda:	a2 ea       	ldi	r26, 0xA2	; 162
    3fdc:	2a ed       	ldi	r18, 0xDA	; 218
    3fde:	3f e0       	ldi	r19, 0x0F	; 15
    3fe0:	49 ec       	ldi	r20, 0xC9	; 201
    3fe2:	5f e3       	ldi	r21, 0x3F	; 63
    3fe4:	9b df       	rcall	.-202    	; 0x3f1c <__addsf3x>
    3fe6:	f7 d1       	rcall	.+1006   	; 0x43d6 <__fp_round>
    3fe8:	0f 90       	pop	r0
    3fea:	07 fc       	sbrc	r0, 7
    3fec:	90 58       	subi	r25, 0x80	; 128
    3fee:	08 95       	ret
    3ff0:	bc d1       	rcall	.+888    	; 0x436a <__fp_pscA>
    3ff2:	58 f0       	brcs	.+22     	; 0x400a <asin+0x48>
    3ff4:	80 e8       	ldi	r24, 0x80	; 128
    3ff6:	91 e0       	ldi	r25, 0x01	; 1
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <asin+0x3a>
    3ffa:	9e ef       	ldi	r25, 0xFE	; 254
    3ffc:	bd d1       	rcall	.+890    	; 0x4378 <__fp_pscB>
    3ffe:	28 f0       	brcs	.+10     	; 0x400a <asin+0x48>
    4000:	40 e8       	ldi	r20, 0x80	; 128
    4002:	51 e0       	ldi	r21, 0x01	; 1
    4004:	59 f4       	brne	.+22     	; 0x401c <atan2+0xe>
    4006:	5e ef       	ldi	r21, 0xFE	; 254
    4008:	09 c0       	rjmp	.+18     	; 0x401c <atan2+0xe>
    400a:	76 c1       	rjmp	.+748    	; 0x42f8 <__fp_nan>
    400c:	28 c2       	rjmp	.+1104   	; 0x445e <__fp_zero>

0000400e <atan2>:
    400e:	e9 2f       	mov	r30, r25
    4010:	e0 78       	andi	r30, 0x80	; 128
    4012:	03 d2       	rcall	.+1030   	; 0x441a <__fp_split3>
    4014:	68 f3       	brcs	.-38     	; 0x3ff0 <asin+0x2e>
    4016:	09 2e       	mov	r0, r25
    4018:	05 2a       	or	r0, r21
    401a:	c1 f3       	breq	.-16     	; 0x400c <asin+0x4a>
    401c:	26 17       	cp	r18, r22
    401e:	37 07       	cpc	r19, r23
    4020:	48 07       	cpc	r20, r24
    4022:	59 07       	cpc	r21, r25
    4024:	38 f0       	brcs	.+14     	; 0x4034 <atan2+0x26>
    4026:	0e 2e       	mov	r0, r30
    4028:	07 f8       	bld	r0, 7
    402a:	e0 25       	eor	r30, r0
    402c:	69 f0       	breq	.+26     	; 0x4048 <atan2+0x3a>
    402e:	e0 25       	eor	r30, r0
    4030:	e0 64       	ori	r30, 0x40	; 64
    4032:	0a c0       	rjmp	.+20     	; 0x4048 <atan2+0x3a>
    4034:	ef 63       	ori	r30, 0x3F	; 63
    4036:	07 f8       	bld	r0, 7
    4038:	00 94       	com	r0
    403a:	07 fa       	bst	r0, 7
    403c:	db 01       	movw	r26, r22
    403e:	b9 01       	movw	r22, r18
    4040:	9d 01       	movw	r18, r26
    4042:	dc 01       	movw	r26, r24
    4044:	ca 01       	movw	r24, r20
    4046:	ad 01       	movw	r20, r26
    4048:	ef 93       	push	r30
    404a:	4a d0       	rcall	.+148    	; 0x40e0 <__divsf3_pse>
    404c:	c4 d1       	rcall	.+904    	; 0x43d6 <__fp_round>
    404e:	0a d0       	rcall	.+20     	; 0x4064 <atan>
    4050:	5f 91       	pop	r21
    4052:	55 23       	and	r21, r21
    4054:	31 f0       	breq	.+12     	; 0x4062 <atan2+0x54>
    4056:	2b ed       	ldi	r18, 0xDB	; 219
    4058:	3f e0       	ldi	r19, 0x0F	; 15
    405a:	49 e4       	ldi	r20, 0x49	; 73
    405c:	50 fd       	sbrc	r21, 0
    405e:	49 ec       	ldi	r20, 0xC9	; 201
    4060:	4c cf       	rjmp	.-360    	; 0x3efa <__addsf3>
    4062:	08 95       	ret

00004064 <atan>:
    4064:	df 93       	push	r29
    4066:	dd 27       	eor	r29, r29
    4068:	b9 2f       	mov	r27, r25
    406a:	bf 77       	andi	r27, 0x7F	; 127
    406c:	40 e8       	ldi	r20, 0x80	; 128
    406e:	5f e3       	ldi	r21, 0x3F	; 63
    4070:	16 16       	cp	r1, r22
    4072:	17 06       	cpc	r1, r23
    4074:	48 07       	cpc	r20, r24
    4076:	5b 07       	cpc	r21, r27
    4078:	10 f4       	brcc	.+4      	; 0x407e <atan+0x1a>
    407a:	d9 2f       	mov	r29, r25
    407c:	fb d1       	rcall	.+1014   	; 0x4474 <inverse>
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	7f 93       	push	r23
    4084:	6f 93       	push	r22
    4086:	f4 d2       	rcall	.+1512   	; 0x4670 <square>
    4088:	ea e8       	ldi	r30, 0x8A	; 138
    408a:	f2 e0       	ldi	r31, 0x02	; 2
    408c:	38 d1       	rcall	.+624    	; 0x42fe <__fp_powser>
    408e:	a3 d1       	rcall	.+838    	; 0x43d6 <__fp_round>
    4090:	2f 91       	pop	r18
    4092:	3f 91       	pop	r19
    4094:	4f 91       	pop	r20
    4096:	5f 91       	pop	r21
    4098:	00 d2       	rcall	.+1024   	; 0x449a <__mulsf3x>
    409a:	dd 23       	and	r29, r29
    409c:	49 f0       	breq	.+18     	; 0x40b0 <atan+0x4c>
    409e:	90 58       	subi	r25, 0x80	; 128
    40a0:	a2 ea       	ldi	r26, 0xA2	; 162
    40a2:	2a ed       	ldi	r18, 0xDA	; 218
    40a4:	3f e0       	ldi	r19, 0x0F	; 15
    40a6:	49 ec       	ldi	r20, 0xC9	; 201
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	d0 78       	andi	r29, 0x80	; 128
    40ac:	5d 27       	eor	r21, r29
    40ae:	36 df       	rcall	.-404    	; 0x3f1c <__addsf3x>
    40b0:	df 91       	pop	r29
    40b2:	91 c1       	rjmp	.+802    	; 0x43d6 <__fp_round>

000040b4 <__cmpsf2>:
    40b4:	f7 d0       	rcall	.+494    	; 0x42a4 <__fp_cmp>
    40b6:	08 f4       	brcc	.+2      	; 0x40ba <__cmpsf2+0x6>
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	08 95       	ret

000040bc <cos>:
    40bc:	65 d1       	rcall	.+714    	; 0x4388 <__fp_rempio2>
    40be:	e3 95       	inc	r30
    40c0:	9b c1       	rjmp	.+822    	; 0x43f8 <__fp_sinus>

000040c2 <__divsf3>:
    40c2:	0c d0       	rcall	.+24     	; 0x40dc <__divsf3x>
    40c4:	88 c1       	rjmp	.+784    	; 0x43d6 <__fp_round>
    40c6:	58 d1       	rcall	.+688    	; 0x4378 <__fp_pscB>
    40c8:	40 f0       	brcs	.+16     	; 0x40da <__divsf3+0x18>
    40ca:	4f d1       	rcall	.+670    	; 0x436a <__fp_pscA>
    40cc:	30 f0       	brcs	.+12     	; 0x40da <__divsf3+0x18>
    40ce:	21 f4       	brne	.+8      	; 0x40d8 <__divsf3+0x16>
    40d0:	5f 3f       	cpi	r21, 0xFF	; 255
    40d2:	19 f0       	breq	.+6      	; 0x40da <__divsf3+0x18>
    40d4:	0b c1       	rjmp	.+534    	; 0x42ec <__fp_inf>
    40d6:	51 11       	cpse	r21, r1
    40d8:	c3 c1       	rjmp	.+902    	; 0x4460 <__fp_szero>
    40da:	0e c1       	rjmp	.+540    	; 0x42f8 <__fp_nan>

000040dc <__divsf3x>:
    40dc:	9e d1       	rcall	.+828    	; 0x441a <__fp_split3>
    40de:	98 f3       	brcs	.-26     	; 0x40c6 <__divsf3+0x4>

000040e0 <__divsf3_pse>:
    40e0:	99 23       	and	r25, r25
    40e2:	c9 f3       	breq	.-14     	; 0x40d6 <__divsf3+0x14>
    40e4:	55 23       	and	r21, r21
    40e6:	b1 f3       	breq	.-20     	; 0x40d4 <__divsf3+0x12>
    40e8:	95 1b       	sub	r25, r21
    40ea:	55 0b       	sbc	r21, r21
    40ec:	bb 27       	eor	r27, r27
    40ee:	aa 27       	eor	r26, r26
    40f0:	62 17       	cp	r22, r18
    40f2:	73 07       	cpc	r23, r19
    40f4:	84 07       	cpc	r24, r20
    40f6:	38 f0       	brcs	.+14     	; 0x4106 <__divsf3_pse+0x26>
    40f8:	9f 5f       	subi	r25, 0xFF	; 255
    40fa:	5f 4f       	sbci	r21, 0xFF	; 255
    40fc:	22 0f       	add	r18, r18
    40fe:	33 1f       	adc	r19, r19
    4100:	44 1f       	adc	r20, r20
    4102:	aa 1f       	adc	r26, r26
    4104:	a9 f3       	breq	.-22     	; 0x40f0 <__divsf3_pse+0x10>
    4106:	33 d0       	rcall	.+102    	; 0x416e <__divsf3_pse+0x8e>
    4108:	0e 2e       	mov	r0, r30
    410a:	3a f0       	brmi	.+14     	; 0x411a <__divsf3_pse+0x3a>
    410c:	e0 e8       	ldi	r30, 0x80	; 128
    410e:	30 d0       	rcall	.+96     	; 0x4170 <__divsf3_pse+0x90>
    4110:	91 50       	subi	r25, 0x01	; 1
    4112:	50 40       	sbci	r21, 0x00	; 0
    4114:	e6 95       	lsr	r30
    4116:	00 1c       	adc	r0, r0
    4118:	ca f7       	brpl	.-14     	; 0x410c <__divsf3_pse+0x2c>
    411a:	29 d0       	rcall	.+82     	; 0x416e <__divsf3_pse+0x8e>
    411c:	fe 2f       	mov	r31, r30
    411e:	27 d0       	rcall	.+78     	; 0x416e <__divsf3_pse+0x8e>
    4120:	66 0f       	add	r22, r22
    4122:	77 1f       	adc	r23, r23
    4124:	88 1f       	adc	r24, r24
    4126:	bb 1f       	adc	r27, r27
    4128:	26 17       	cp	r18, r22
    412a:	37 07       	cpc	r19, r23
    412c:	48 07       	cpc	r20, r24
    412e:	ab 07       	cpc	r26, r27
    4130:	b0 e8       	ldi	r27, 0x80	; 128
    4132:	09 f0       	breq	.+2      	; 0x4136 <__divsf3_pse+0x56>
    4134:	bb 0b       	sbc	r27, r27
    4136:	80 2d       	mov	r24, r0
    4138:	bf 01       	movw	r22, r30
    413a:	ff 27       	eor	r31, r31
    413c:	93 58       	subi	r25, 0x83	; 131
    413e:	5f 4f       	sbci	r21, 0xFF	; 255
    4140:	2a f0       	brmi	.+10     	; 0x414c <__divsf3_pse+0x6c>
    4142:	9e 3f       	cpi	r25, 0xFE	; 254
    4144:	51 05       	cpc	r21, r1
    4146:	68 f0       	brcs	.+26     	; 0x4162 <__divsf3_pse+0x82>
    4148:	d1 c0       	rjmp	.+418    	; 0x42ec <__fp_inf>
    414a:	8a c1       	rjmp	.+788    	; 0x4460 <__fp_szero>
    414c:	5f 3f       	cpi	r21, 0xFF	; 255
    414e:	ec f3       	brlt	.-6      	; 0x414a <__divsf3_pse+0x6a>
    4150:	98 3e       	cpi	r25, 0xE8	; 232
    4152:	dc f3       	brlt	.-10     	; 0x414a <__divsf3_pse+0x6a>
    4154:	86 95       	lsr	r24
    4156:	77 95       	ror	r23
    4158:	67 95       	ror	r22
    415a:	b7 95       	ror	r27
    415c:	f7 95       	ror	r31
    415e:	9f 5f       	subi	r25, 0xFF	; 255
    4160:	c9 f7       	brne	.-14     	; 0x4154 <__divsf3_pse+0x74>
    4162:	88 0f       	add	r24, r24
    4164:	91 1d       	adc	r25, r1
    4166:	96 95       	lsr	r25
    4168:	87 95       	ror	r24
    416a:	97 f9       	bld	r25, 7
    416c:	08 95       	ret
    416e:	e1 e0       	ldi	r30, 0x01	; 1
    4170:	66 0f       	add	r22, r22
    4172:	77 1f       	adc	r23, r23
    4174:	88 1f       	adc	r24, r24
    4176:	bb 1f       	adc	r27, r27
    4178:	62 17       	cp	r22, r18
    417a:	73 07       	cpc	r23, r19
    417c:	84 07       	cpc	r24, r20
    417e:	ba 07       	cpc	r27, r26
    4180:	20 f0       	brcs	.+8      	; 0x418a <__divsf3_pse+0xaa>
    4182:	62 1b       	sub	r22, r18
    4184:	73 0b       	sbc	r23, r19
    4186:	84 0b       	sbc	r24, r20
    4188:	ba 0b       	sbc	r27, r26
    418a:	ee 1f       	adc	r30, r30
    418c:	88 f7       	brcc	.-30     	; 0x4170 <__divsf3_pse+0x90>
    418e:	e0 95       	com	r30
    4190:	08 95       	ret

00004192 <__fixsfsi>:
    4192:	04 d0       	rcall	.+8      	; 0x419c <__fixunssfsi>
    4194:	68 94       	set
    4196:	b1 11       	cpse	r27, r1
    4198:	63 c1       	rjmp	.+710    	; 0x4460 <__fp_szero>
    419a:	08 95       	ret

0000419c <__fixunssfsi>:
    419c:	46 d1       	rcall	.+652    	; 0x442a <__fp_splitA>
    419e:	88 f0       	brcs	.+34     	; 0x41c2 <__fixunssfsi+0x26>
    41a0:	9f 57       	subi	r25, 0x7F	; 127
    41a2:	90 f0       	brcs	.+36     	; 0x41c8 <__fixunssfsi+0x2c>
    41a4:	b9 2f       	mov	r27, r25
    41a6:	99 27       	eor	r25, r25
    41a8:	b7 51       	subi	r27, 0x17	; 23
    41aa:	a0 f0       	brcs	.+40     	; 0x41d4 <__fixunssfsi+0x38>
    41ac:	d1 f0       	breq	.+52     	; 0x41e2 <__fixunssfsi+0x46>
    41ae:	66 0f       	add	r22, r22
    41b0:	77 1f       	adc	r23, r23
    41b2:	88 1f       	adc	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	1a f0       	brmi	.+6      	; 0x41be <__fixunssfsi+0x22>
    41b8:	ba 95       	dec	r27
    41ba:	c9 f7       	brne	.-14     	; 0x41ae <__fixunssfsi+0x12>
    41bc:	12 c0       	rjmp	.+36     	; 0x41e2 <__fixunssfsi+0x46>
    41be:	b1 30       	cpi	r27, 0x01	; 1
    41c0:	81 f0       	breq	.+32     	; 0x41e2 <__fixunssfsi+0x46>
    41c2:	4d d1       	rcall	.+666    	; 0x445e <__fp_zero>
    41c4:	b1 e0       	ldi	r27, 0x01	; 1
    41c6:	08 95       	ret
    41c8:	4a c1       	rjmp	.+660    	; 0x445e <__fp_zero>
    41ca:	67 2f       	mov	r22, r23
    41cc:	78 2f       	mov	r23, r24
    41ce:	88 27       	eor	r24, r24
    41d0:	b8 5f       	subi	r27, 0xF8	; 248
    41d2:	39 f0       	breq	.+14     	; 0x41e2 <__fixunssfsi+0x46>
    41d4:	b9 3f       	cpi	r27, 0xF9	; 249
    41d6:	cc f3       	brlt	.-14     	; 0x41ca <__fixunssfsi+0x2e>
    41d8:	86 95       	lsr	r24
    41da:	77 95       	ror	r23
    41dc:	67 95       	ror	r22
    41de:	b3 95       	inc	r27
    41e0:	d9 f7       	brne	.-10     	; 0x41d8 <__fixunssfsi+0x3c>
    41e2:	3e f4       	brtc	.+14     	; 0x41f2 <__fixunssfsi+0x56>
    41e4:	90 95       	com	r25
    41e6:	80 95       	com	r24
    41e8:	70 95       	com	r23
    41ea:	61 95       	neg	r22
    41ec:	7f 4f       	sbci	r23, 0xFF	; 255
    41ee:	8f 4f       	sbci	r24, 0xFF	; 255
    41f0:	9f 4f       	sbci	r25, 0xFF	; 255
    41f2:	08 95       	ret

000041f4 <__floatunsisf>:
    41f4:	e8 94       	clt
    41f6:	09 c0       	rjmp	.+18     	; 0x420a <__floatsisf+0x12>

000041f8 <__floatsisf>:
    41f8:	97 fb       	bst	r25, 7
    41fa:	3e f4       	brtc	.+14     	; 0x420a <__floatsisf+0x12>
    41fc:	90 95       	com	r25
    41fe:	80 95       	com	r24
    4200:	70 95       	com	r23
    4202:	61 95       	neg	r22
    4204:	7f 4f       	sbci	r23, 0xFF	; 255
    4206:	8f 4f       	sbci	r24, 0xFF	; 255
    4208:	9f 4f       	sbci	r25, 0xFF	; 255
    420a:	99 23       	and	r25, r25
    420c:	a9 f0       	breq	.+42     	; 0x4238 <__floatsisf+0x40>
    420e:	f9 2f       	mov	r31, r25
    4210:	96 e9       	ldi	r25, 0x96	; 150
    4212:	bb 27       	eor	r27, r27
    4214:	93 95       	inc	r25
    4216:	f6 95       	lsr	r31
    4218:	87 95       	ror	r24
    421a:	77 95       	ror	r23
    421c:	67 95       	ror	r22
    421e:	b7 95       	ror	r27
    4220:	f1 11       	cpse	r31, r1
    4222:	f8 cf       	rjmp	.-16     	; 0x4214 <__floatsisf+0x1c>
    4224:	fa f4       	brpl	.+62     	; 0x4264 <__floatsisf+0x6c>
    4226:	bb 0f       	add	r27, r27
    4228:	11 f4       	brne	.+4      	; 0x422e <__floatsisf+0x36>
    422a:	60 ff       	sbrs	r22, 0
    422c:	1b c0       	rjmp	.+54     	; 0x4264 <__floatsisf+0x6c>
    422e:	6f 5f       	subi	r22, 0xFF	; 255
    4230:	7f 4f       	sbci	r23, 0xFF	; 255
    4232:	8f 4f       	sbci	r24, 0xFF	; 255
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	16 c0       	rjmp	.+44     	; 0x4264 <__floatsisf+0x6c>
    4238:	88 23       	and	r24, r24
    423a:	11 f0       	breq	.+4      	; 0x4240 <__floatsisf+0x48>
    423c:	96 e9       	ldi	r25, 0x96	; 150
    423e:	11 c0       	rjmp	.+34     	; 0x4262 <__floatsisf+0x6a>
    4240:	77 23       	and	r23, r23
    4242:	21 f0       	breq	.+8      	; 0x424c <__floatsisf+0x54>
    4244:	9e e8       	ldi	r25, 0x8E	; 142
    4246:	87 2f       	mov	r24, r23
    4248:	76 2f       	mov	r23, r22
    424a:	05 c0       	rjmp	.+10     	; 0x4256 <__floatsisf+0x5e>
    424c:	66 23       	and	r22, r22
    424e:	71 f0       	breq	.+28     	; 0x426c <__floatsisf+0x74>
    4250:	96 e8       	ldi	r25, 0x86	; 134
    4252:	86 2f       	mov	r24, r22
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	2a f0       	brmi	.+10     	; 0x4264 <__floatsisf+0x6c>
    425a:	9a 95       	dec	r25
    425c:	66 0f       	add	r22, r22
    425e:	77 1f       	adc	r23, r23
    4260:	88 1f       	adc	r24, r24
    4262:	da f7       	brpl	.-10     	; 0x425a <__floatsisf+0x62>
    4264:	88 0f       	add	r24, r24
    4266:	96 95       	lsr	r25
    4268:	87 95       	ror	r24
    426a:	97 f9       	bld	r25, 7
    426c:	08 95       	ret

0000426e <__fp_arccos>:
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	1f 93       	push	r17
    4274:	0f 93       	push	r16
    4276:	8b 01       	movw	r16, r22
    4278:	ec 01       	movw	r28, r24
    427a:	e7 eb       	ldi	r30, 0xB7	; 183
    427c:	f2 e0       	ldi	r31, 0x02	; 2
    427e:	3f d0       	rcall	.+126    	; 0x42fe <__fp_powser>
    4280:	aa d0       	rcall	.+340    	; 0x43d6 <__fp_round>
    4282:	98 01       	movw	r18, r16
    4284:	ae 01       	movw	r20, r28
    4286:	8b 01       	movw	r16, r22
    4288:	ec 01       	movw	r28, r24
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	80 e8       	ldi	r24, 0x80	; 128
    4290:	9f e3       	ldi	r25, 0x3F	; 63
    4292:	32 de       	rcall	.-924    	; 0x3ef8 <__subsf3>
    4294:	af d1       	rcall	.+862    	; 0x45f4 <sqrt>
    4296:	98 01       	movw	r18, r16
    4298:	ae 01       	movw	r20, r28
    429a:	0f 91       	pop	r16
    429c:	1f 91       	pop	r17
    429e:	cf 91       	pop	r28
    42a0:	df 91       	pop	r29
    42a2:	fb c0       	rjmp	.+502    	; 0x449a <__mulsf3x>

000042a4 <__fp_cmp>:
    42a4:	99 0f       	add	r25, r25
    42a6:	00 08       	sbc	r0, r0
    42a8:	55 0f       	add	r21, r21
    42aa:	aa 0b       	sbc	r26, r26
    42ac:	e0 e8       	ldi	r30, 0x80	; 128
    42ae:	fe ef       	ldi	r31, 0xFE	; 254
    42b0:	16 16       	cp	r1, r22
    42b2:	17 06       	cpc	r1, r23
    42b4:	e8 07       	cpc	r30, r24
    42b6:	f9 07       	cpc	r31, r25
    42b8:	c0 f0       	brcs	.+48     	; 0x42ea <__fp_cmp+0x46>
    42ba:	12 16       	cp	r1, r18
    42bc:	13 06       	cpc	r1, r19
    42be:	e4 07       	cpc	r30, r20
    42c0:	f5 07       	cpc	r31, r21
    42c2:	98 f0       	brcs	.+38     	; 0x42ea <__fp_cmp+0x46>
    42c4:	62 1b       	sub	r22, r18
    42c6:	73 0b       	sbc	r23, r19
    42c8:	84 0b       	sbc	r24, r20
    42ca:	95 0b       	sbc	r25, r21
    42cc:	39 f4       	brne	.+14     	; 0x42dc <__fp_cmp+0x38>
    42ce:	0a 26       	eor	r0, r26
    42d0:	61 f0       	breq	.+24     	; 0x42ea <__fp_cmp+0x46>
    42d2:	23 2b       	or	r18, r19
    42d4:	24 2b       	or	r18, r20
    42d6:	25 2b       	or	r18, r21
    42d8:	21 f4       	brne	.+8      	; 0x42e2 <__fp_cmp+0x3e>
    42da:	08 95       	ret
    42dc:	0a 26       	eor	r0, r26
    42de:	09 f4       	brne	.+2      	; 0x42e2 <__fp_cmp+0x3e>
    42e0:	a1 40       	sbci	r26, 0x01	; 1
    42e2:	a6 95       	lsr	r26
    42e4:	8f ef       	ldi	r24, 0xFF	; 255
    42e6:	81 1d       	adc	r24, r1
    42e8:	81 1d       	adc	r24, r1
    42ea:	08 95       	ret

000042ec <__fp_inf>:
    42ec:	97 f9       	bld	r25, 7
    42ee:	9f 67       	ori	r25, 0x7F	; 127
    42f0:	80 e8       	ldi	r24, 0x80	; 128
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	08 95       	ret

000042f8 <__fp_nan>:
    42f8:	9f ef       	ldi	r25, 0xFF	; 255
    42fa:	80 ec       	ldi	r24, 0xC0	; 192
    42fc:	08 95       	ret

000042fe <__fp_powser>:
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	1f 93       	push	r17
    4304:	0f 93       	push	r16
    4306:	ff 92       	push	r15
    4308:	ef 92       	push	r14
    430a:	df 92       	push	r13
    430c:	7b 01       	movw	r14, r22
    430e:	8c 01       	movw	r16, r24
    4310:	68 94       	set
    4312:	05 c0       	rjmp	.+10     	; 0x431e <__fp_powser+0x20>
    4314:	da 2e       	mov	r13, r26
    4316:	ef 01       	movw	r28, r30
    4318:	c0 d0       	rcall	.+384    	; 0x449a <__mulsf3x>
    431a:	fe 01       	movw	r30, r28
    431c:	e8 94       	clt
    431e:	a5 91       	lpm	r26, Z+
    4320:	25 91       	lpm	r18, Z+
    4322:	35 91       	lpm	r19, Z+
    4324:	45 91       	lpm	r20, Z+
    4326:	55 91       	lpm	r21, Z+
    4328:	ae f3       	brts	.-22     	; 0x4314 <__fp_powser+0x16>
    432a:	ef 01       	movw	r28, r30
    432c:	f7 dd       	rcall	.-1042   	; 0x3f1c <__addsf3x>
    432e:	fe 01       	movw	r30, r28
    4330:	97 01       	movw	r18, r14
    4332:	a8 01       	movw	r20, r16
    4334:	da 94       	dec	r13
    4336:	79 f7       	brne	.-34     	; 0x4316 <__fp_powser+0x18>
    4338:	df 90       	pop	r13
    433a:	ef 90       	pop	r14
    433c:	ff 90       	pop	r15
    433e:	0f 91       	pop	r16
    4340:	1f 91       	pop	r17
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	08 95       	ret

00004348 <__fp_powsodd>:
    4348:	9f 93       	push	r25
    434a:	8f 93       	push	r24
    434c:	7f 93       	push	r23
    434e:	6f 93       	push	r22
    4350:	ff 93       	push	r31
    4352:	ef 93       	push	r30
    4354:	9b 01       	movw	r18, r22
    4356:	ac 01       	movw	r20, r24
    4358:	94 d0       	rcall	.+296    	; 0x4482 <__mulsf3>
    435a:	ef 91       	pop	r30
    435c:	ff 91       	pop	r31
    435e:	cf df       	rcall	.-98     	; 0x42fe <__fp_powser>
    4360:	2f 91       	pop	r18
    4362:	3f 91       	pop	r19
    4364:	4f 91       	pop	r20
    4366:	5f 91       	pop	r21
    4368:	8c c0       	rjmp	.+280    	; 0x4482 <__mulsf3>

0000436a <__fp_pscA>:
    436a:	00 24       	eor	r0, r0
    436c:	0a 94       	dec	r0
    436e:	16 16       	cp	r1, r22
    4370:	17 06       	cpc	r1, r23
    4372:	18 06       	cpc	r1, r24
    4374:	09 06       	cpc	r0, r25
    4376:	08 95       	ret

00004378 <__fp_pscB>:
    4378:	00 24       	eor	r0, r0
    437a:	0a 94       	dec	r0
    437c:	12 16       	cp	r1, r18
    437e:	13 06       	cpc	r1, r19
    4380:	14 06       	cpc	r1, r20
    4382:	05 06       	cpc	r0, r21
    4384:	08 95       	ret
    4386:	b8 cf       	rjmp	.-144    	; 0x42f8 <__fp_nan>

00004388 <__fp_rempio2>:
    4388:	50 d0       	rcall	.+160    	; 0x442a <__fp_splitA>
    438a:	e8 f3       	brcs	.-6      	; 0x4386 <__fp_pscB+0xe>
    438c:	e8 94       	clt
    438e:	e0 e0       	ldi	r30, 0x00	; 0
    4390:	bb 27       	eor	r27, r27
    4392:	9f 57       	subi	r25, 0x7F	; 127
    4394:	f0 f0       	brcs	.+60     	; 0x43d2 <__fp_rempio2+0x4a>
    4396:	2a ed       	ldi	r18, 0xDA	; 218
    4398:	3f e0       	ldi	r19, 0x0F	; 15
    439a:	49 ec       	ldi	r20, 0xC9	; 201
    439c:	06 c0       	rjmp	.+12     	; 0x43aa <__fp_rempio2+0x22>
    439e:	ee 0f       	add	r30, r30
    43a0:	bb 0f       	add	r27, r27
    43a2:	66 1f       	adc	r22, r22
    43a4:	77 1f       	adc	r23, r23
    43a6:	88 1f       	adc	r24, r24
    43a8:	28 f0       	brcs	.+10     	; 0x43b4 <__fp_rempio2+0x2c>
    43aa:	b2 3a       	cpi	r27, 0xA2	; 162
    43ac:	62 07       	cpc	r22, r18
    43ae:	73 07       	cpc	r23, r19
    43b0:	84 07       	cpc	r24, r20
    43b2:	28 f0       	brcs	.+10     	; 0x43be <__fp_rempio2+0x36>
    43b4:	b2 5a       	subi	r27, 0xA2	; 162
    43b6:	62 0b       	sbc	r22, r18
    43b8:	73 0b       	sbc	r23, r19
    43ba:	84 0b       	sbc	r24, r20
    43bc:	e3 95       	inc	r30
    43be:	9a 95       	dec	r25
    43c0:	72 f7       	brpl	.-36     	; 0x439e <__fp_rempio2+0x16>
    43c2:	80 38       	cpi	r24, 0x80	; 128
    43c4:	30 f4       	brcc	.+12     	; 0x43d2 <__fp_rempio2+0x4a>
    43c6:	9a 95       	dec	r25
    43c8:	bb 0f       	add	r27, r27
    43ca:	66 1f       	adc	r22, r22
    43cc:	77 1f       	adc	r23, r23
    43ce:	88 1f       	adc	r24, r24
    43d0:	d2 f7       	brpl	.-12     	; 0x43c6 <__fp_rempio2+0x3e>
    43d2:	90 48       	sbci	r25, 0x80	; 128
    43d4:	83 c1       	rjmp	.+774    	; 0x46dc <__fp_mpack_finite>

000043d6 <__fp_round>:
    43d6:	09 2e       	mov	r0, r25
    43d8:	03 94       	inc	r0
    43da:	00 0c       	add	r0, r0
    43dc:	11 f4       	brne	.+4      	; 0x43e2 <__fp_round+0xc>
    43de:	88 23       	and	r24, r24
    43e0:	52 f0       	brmi	.+20     	; 0x43f6 <__fp_round+0x20>
    43e2:	bb 0f       	add	r27, r27
    43e4:	40 f4       	brcc	.+16     	; 0x43f6 <__fp_round+0x20>
    43e6:	bf 2b       	or	r27, r31
    43e8:	11 f4       	brne	.+4      	; 0x43ee <__fp_round+0x18>
    43ea:	60 ff       	sbrs	r22, 0
    43ec:	04 c0       	rjmp	.+8      	; 0x43f6 <__fp_round+0x20>
    43ee:	6f 5f       	subi	r22, 0xFF	; 255
    43f0:	7f 4f       	sbci	r23, 0xFF	; 255
    43f2:	8f 4f       	sbci	r24, 0xFF	; 255
    43f4:	9f 4f       	sbci	r25, 0xFF	; 255
    43f6:	08 95       	ret

000043f8 <__fp_sinus>:
    43f8:	ef 93       	push	r30
    43fa:	e0 ff       	sbrs	r30, 0
    43fc:	06 c0       	rjmp	.+12     	; 0x440a <__fp_sinus+0x12>
    43fe:	a2 ea       	ldi	r26, 0xA2	; 162
    4400:	2a ed       	ldi	r18, 0xDA	; 218
    4402:	3f e0       	ldi	r19, 0x0F	; 15
    4404:	49 ec       	ldi	r20, 0xC9	; 201
    4406:	5f eb       	ldi	r21, 0xBF	; 191
    4408:	89 dd       	rcall	.-1262   	; 0x3f1c <__addsf3x>
    440a:	e5 df       	rcall	.-54     	; 0x43d6 <__fp_round>
    440c:	0f 90       	pop	r0
    440e:	03 94       	inc	r0
    4410:	01 fc       	sbrc	r0, 1
    4412:	90 58       	subi	r25, 0x80	; 128
    4414:	ef ed       	ldi	r30, 0xDF	; 223
    4416:	f2 e0       	ldi	r31, 0x02	; 2
    4418:	97 cf       	rjmp	.-210    	; 0x4348 <__fp_powsodd>

0000441a <__fp_split3>:
    441a:	57 fd       	sbrc	r21, 7
    441c:	90 58       	subi	r25, 0x80	; 128
    441e:	44 0f       	add	r20, r20
    4420:	55 1f       	adc	r21, r21
    4422:	59 f0       	breq	.+22     	; 0x443a <__fp_splitA+0x10>
    4424:	5f 3f       	cpi	r21, 0xFF	; 255
    4426:	71 f0       	breq	.+28     	; 0x4444 <__fp_splitA+0x1a>
    4428:	47 95       	ror	r20

0000442a <__fp_splitA>:
    442a:	88 0f       	add	r24, r24
    442c:	97 fb       	bst	r25, 7
    442e:	99 1f       	adc	r25, r25
    4430:	61 f0       	breq	.+24     	; 0x444a <__fp_splitA+0x20>
    4432:	9f 3f       	cpi	r25, 0xFF	; 255
    4434:	79 f0       	breq	.+30     	; 0x4454 <__fp_splitA+0x2a>
    4436:	87 95       	ror	r24
    4438:	08 95       	ret
    443a:	12 16       	cp	r1, r18
    443c:	13 06       	cpc	r1, r19
    443e:	14 06       	cpc	r1, r20
    4440:	55 1f       	adc	r21, r21
    4442:	f2 cf       	rjmp	.-28     	; 0x4428 <__fp_split3+0xe>
    4444:	46 95       	lsr	r20
    4446:	f1 df       	rcall	.-30     	; 0x442a <__fp_splitA>
    4448:	08 c0       	rjmp	.+16     	; 0x445a <__fp_splitA+0x30>
    444a:	16 16       	cp	r1, r22
    444c:	17 06       	cpc	r1, r23
    444e:	18 06       	cpc	r1, r24
    4450:	99 1f       	adc	r25, r25
    4452:	f1 cf       	rjmp	.-30     	; 0x4436 <__fp_splitA+0xc>
    4454:	86 95       	lsr	r24
    4456:	71 05       	cpc	r23, r1
    4458:	61 05       	cpc	r22, r1
    445a:	08 94       	sec
    445c:	08 95       	ret

0000445e <__fp_zero>:
    445e:	e8 94       	clt

00004460 <__fp_szero>:
    4460:	bb 27       	eor	r27, r27
    4462:	66 27       	eor	r22, r22
    4464:	77 27       	eor	r23, r23
    4466:	cb 01       	movw	r24, r22
    4468:	97 f9       	bld	r25, 7
    446a:	08 95       	ret

0000446c <__gesf2>:
    446c:	1b df       	rcall	.-458    	; 0x42a4 <__fp_cmp>
    446e:	08 f4       	brcc	.+2      	; 0x4472 <__gesf2+0x6>
    4470:	8f ef       	ldi	r24, 0xFF	; 255
    4472:	08 95       	ret

00004474 <inverse>:
    4474:	9b 01       	movw	r18, r22
    4476:	ac 01       	movw	r20, r24
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	80 e8       	ldi	r24, 0x80	; 128
    447e:	9f e3       	ldi	r25, 0x3F	; 63
    4480:	20 ce       	rjmp	.-960    	; 0x40c2 <__divsf3>

00004482 <__mulsf3>:
    4482:	0b d0       	rcall	.+22     	; 0x449a <__mulsf3x>
    4484:	a8 cf       	rjmp	.-176    	; 0x43d6 <__fp_round>
    4486:	71 df       	rcall	.-286    	; 0x436a <__fp_pscA>
    4488:	28 f0       	brcs	.+10     	; 0x4494 <__mulsf3+0x12>
    448a:	76 df       	rcall	.-276    	; 0x4378 <__fp_pscB>
    448c:	18 f0       	brcs	.+6      	; 0x4494 <__mulsf3+0x12>
    448e:	95 23       	and	r25, r21
    4490:	09 f0       	breq	.+2      	; 0x4494 <__mulsf3+0x12>
    4492:	2c cf       	rjmp	.-424    	; 0x42ec <__fp_inf>
    4494:	31 cf       	rjmp	.-414    	; 0x42f8 <__fp_nan>
    4496:	11 24       	eor	r1, r1
    4498:	e3 cf       	rjmp	.-58     	; 0x4460 <__fp_szero>

0000449a <__mulsf3x>:
    449a:	bf df       	rcall	.-130    	; 0x441a <__fp_split3>
    449c:	a0 f3       	brcs	.-24     	; 0x4486 <__mulsf3+0x4>

0000449e <__mulsf3_pse>:
    449e:	95 9f       	mul	r25, r21
    44a0:	d1 f3       	breq	.-12     	; 0x4496 <__mulsf3+0x14>
    44a2:	95 0f       	add	r25, r21
    44a4:	50 e0       	ldi	r21, 0x00	; 0
    44a6:	55 1f       	adc	r21, r21
    44a8:	62 9f       	mul	r22, r18
    44aa:	f0 01       	movw	r30, r0
    44ac:	72 9f       	mul	r23, r18
    44ae:	bb 27       	eor	r27, r27
    44b0:	f0 0d       	add	r31, r0
    44b2:	b1 1d       	adc	r27, r1
    44b4:	63 9f       	mul	r22, r19
    44b6:	aa 27       	eor	r26, r26
    44b8:	f0 0d       	add	r31, r0
    44ba:	b1 1d       	adc	r27, r1
    44bc:	aa 1f       	adc	r26, r26
    44be:	64 9f       	mul	r22, r20
    44c0:	66 27       	eor	r22, r22
    44c2:	b0 0d       	add	r27, r0
    44c4:	a1 1d       	adc	r26, r1
    44c6:	66 1f       	adc	r22, r22
    44c8:	82 9f       	mul	r24, r18
    44ca:	22 27       	eor	r18, r18
    44cc:	b0 0d       	add	r27, r0
    44ce:	a1 1d       	adc	r26, r1
    44d0:	62 1f       	adc	r22, r18
    44d2:	73 9f       	mul	r23, r19
    44d4:	b0 0d       	add	r27, r0
    44d6:	a1 1d       	adc	r26, r1
    44d8:	62 1f       	adc	r22, r18
    44da:	83 9f       	mul	r24, r19
    44dc:	a0 0d       	add	r26, r0
    44de:	61 1d       	adc	r22, r1
    44e0:	22 1f       	adc	r18, r18
    44e2:	74 9f       	mul	r23, r20
    44e4:	33 27       	eor	r19, r19
    44e6:	a0 0d       	add	r26, r0
    44e8:	61 1d       	adc	r22, r1
    44ea:	23 1f       	adc	r18, r19
    44ec:	84 9f       	mul	r24, r20
    44ee:	60 0d       	add	r22, r0
    44f0:	21 1d       	adc	r18, r1
    44f2:	82 2f       	mov	r24, r18
    44f4:	76 2f       	mov	r23, r22
    44f6:	6a 2f       	mov	r22, r26
    44f8:	11 24       	eor	r1, r1
    44fa:	9f 57       	subi	r25, 0x7F	; 127
    44fc:	50 40       	sbci	r21, 0x00	; 0
    44fe:	8a f0       	brmi	.+34     	; 0x4522 <__mulsf3_pse+0x84>
    4500:	e1 f0       	breq	.+56     	; 0x453a <__mulsf3_pse+0x9c>
    4502:	88 23       	and	r24, r24
    4504:	4a f0       	brmi	.+18     	; 0x4518 <__mulsf3_pse+0x7a>
    4506:	ee 0f       	add	r30, r30
    4508:	ff 1f       	adc	r31, r31
    450a:	bb 1f       	adc	r27, r27
    450c:	66 1f       	adc	r22, r22
    450e:	77 1f       	adc	r23, r23
    4510:	88 1f       	adc	r24, r24
    4512:	91 50       	subi	r25, 0x01	; 1
    4514:	50 40       	sbci	r21, 0x00	; 0
    4516:	a9 f7       	brne	.-22     	; 0x4502 <__mulsf3_pse+0x64>
    4518:	9e 3f       	cpi	r25, 0xFE	; 254
    451a:	51 05       	cpc	r21, r1
    451c:	70 f0       	brcs	.+28     	; 0x453a <__mulsf3_pse+0x9c>
    451e:	e6 ce       	rjmp	.-564    	; 0x42ec <__fp_inf>
    4520:	9f cf       	rjmp	.-194    	; 0x4460 <__fp_szero>
    4522:	5f 3f       	cpi	r21, 0xFF	; 255
    4524:	ec f3       	brlt	.-6      	; 0x4520 <__mulsf3_pse+0x82>
    4526:	98 3e       	cpi	r25, 0xE8	; 232
    4528:	dc f3       	brlt	.-10     	; 0x4520 <__mulsf3_pse+0x82>
    452a:	86 95       	lsr	r24
    452c:	77 95       	ror	r23
    452e:	67 95       	ror	r22
    4530:	b7 95       	ror	r27
    4532:	f7 95       	ror	r31
    4534:	e7 95       	ror	r30
    4536:	9f 5f       	subi	r25, 0xFF	; 255
    4538:	c1 f7       	brne	.-16     	; 0x452a <__mulsf3_pse+0x8c>
    453a:	fe 2b       	or	r31, r30
    453c:	88 0f       	add	r24, r24
    453e:	91 1d       	adc	r25, r1
    4540:	96 95       	lsr	r25
    4542:	87 95       	ror	r24
    4544:	97 f9       	bld	r25, 7
    4546:	08 95       	ret

00004548 <pow>:
    4548:	fa 01       	movw	r30, r20
    454a:	ee 0f       	add	r30, r30
    454c:	ff 1f       	adc	r31, r31
    454e:	30 96       	adiw	r30, 0x00	; 0
    4550:	21 05       	cpc	r18, r1
    4552:	31 05       	cpc	r19, r1
    4554:	99 f1       	breq	.+102    	; 0x45bc <pow+0x74>
    4556:	61 15       	cp	r22, r1
    4558:	71 05       	cpc	r23, r1
    455a:	61 f4       	brne	.+24     	; 0x4574 <pow+0x2c>
    455c:	80 38       	cpi	r24, 0x80	; 128
    455e:	bf e3       	ldi	r27, 0x3F	; 63
    4560:	9b 07       	cpc	r25, r27
    4562:	49 f1       	breq	.+82     	; 0x45b6 <pow+0x6e>
    4564:	68 94       	set
    4566:	90 38       	cpi	r25, 0x80	; 128
    4568:	81 05       	cpc	r24, r1
    456a:	61 f0       	breq	.+24     	; 0x4584 <pow+0x3c>
    456c:	80 38       	cpi	r24, 0x80	; 128
    456e:	bf ef       	ldi	r27, 0xFF	; 255
    4570:	9b 07       	cpc	r25, r27
    4572:	41 f0       	breq	.+16     	; 0x4584 <pow+0x3c>
    4574:	99 23       	and	r25, r25
    4576:	42 f5       	brpl	.+80     	; 0x45c8 <pow+0x80>
    4578:	ff 3f       	cpi	r31, 0xFF	; 255
    457a:	e1 05       	cpc	r30, r1
    457c:	31 05       	cpc	r19, r1
    457e:	21 05       	cpc	r18, r1
    4580:	11 f1       	breq	.+68     	; 0x45c6 <pow+0x7e>
    4582:	e8 94       	clt
    4584:	08 94       	sec
    4586:	e7 95       	ror	r30
    4588:	d9 01       	movw	r26, r18
    458a:	aa 23       	and	r26, r26
    458c:	29 f4       	brne	.+10     	; 0x4598 <pow+0x50>
    458e:	ab 2f       	mov	r26, r27
    4590:	be 2f       	mov	r27, r30
    4592:	f8 5f       	subi	r31, 0xF8	; 248
    4594:	d0 f3       	brcs	.-12     	; 0x458a <pow+0x42>
    4596:	10 c0       	rjmp	.+32     	; 0x45b8 <pow+0x70>
    4598:	ff 5f       	subi	r31, 0xFF	; 255
    459a:	70 f4       	brcc	.+28     	; 0x45b8 <pow+0x70>
    459c:	a6 95       	lsr	r26
    459e:	e0 f7       	brcc	.-8      	; 0x4598 <pow+0x50>
    45a0:	f7 39       	cpi	r31, 0x97	; 151
    45a2:	50 f0       	brcs	.+20     	; 0x45b8 <pow+0x70>
    45a4:	19 f0       	breq	.+6      	; 0x45ac <pow+0x64>
    45a6:	ff 3a       	cpi	r31, 0xAF	; 175
    45a8:	38 f4       	brcc	.+14     	; 0x45b8 <pow+0x70>
    45aa:	9f 77       	andi	r25, 0x7F	; 127
    45ac:	9f 93       	push	r25
    45ae:	0c d0       	rcall	.+24     	; 0x45c8 <pow+0x80>
    45b0:	0f 90       	pop	r0
    45b2:	07 fc       	sbrc	r0, 7
    45b4:	90 58       	subi	r25, 0x80	; 128
    45b6:	08 95       	ret
    45b8:	3e f0       	brts	.+14     	; 0x45c8 <pow+0x80>
    45ba:	9e ce       	rjmp	.-708    	; 0x42f8 <__fp_nan>
    45bc:	60 e0       	ldi	r22, 0x00	; 0
    45be:	70 e0       	ldi	r23, 0x00	; 0
    45c0:	80 e8       	ldi	r24, 0x80	; 128
    45c2:	9f e3       	ldi	r25, 0x3F	; 63
    45c4:	08 95       	ret
    45c6:	4f e7       	ldi	r20, 0x7F	; 127
    45c8:	9f 77       	andi	r25, 0x7F	; 127
    45ca:	5f 93       	push	r21
    45cc:	4f 93       	push	r20
    45ce:	3f 93       	push	r19
    45d0:	2f 93       	push	r18
    45d2:	d2 d0       	rcall	.+420    	; 0x4778 <log>
    45d4:	2f 91       	pop	r18
    45d6:	3f 91       	pop	r19
    45d8:	4f 91       	pop	r20
    45da:	5f 91       	pop	r21
    45dc:	52 df       	rcall	.-348    	; 0x4482 <__mulsf3>
    45de:	50 c0       	rjmp	.+160    	; 0x4680 <exp>

000045e0 <sin>:
    45e0:	9f 93       	push	r25
    45e2:	d2 de       	rcall	.-604    	; 0x4388 <__fp_rempio2>
    45e4:	0f 90       	pop	r0
    45e6:	07 fc       	sbrc	r0, 7
    45e8:	ee 5f       	subi	r30, 0xFE	; 254
    45ea:	06 cf       	rjmp	.-500    	; 0x43f8 <__fp_sinus>
    45ec:	11 f4       	brne	.+4      	; 0x45f2 <sin+0x12>
    45ee:	0e f4       	brtc	.+2      	; 0x45f2 <sin+0x12>
    45f0:	83 ce       	rjmp	.-762    	; 0x42f8 <__fp_nan>
    45f2:	72 c0       	rjmp	.+228    	; 0x46d8 <__fp_mpack>

000045f4 <sqrt>:
    45f4:	1a df       	rcall	.-460    	; 0x442a <__fp_splitA>
    45f6:	d0 f3       	brcs	.-12     	; 0x45ec <sin+0xc>
    45f8:	99 23       	and	r25, r25
    45fa:	d9 f3       	breq	.-10     	; 0x45f2 <sin+0x12>
    45fc:	ce f3       	brts	.-14     	; 0x45f0 <sin+0x10>
    45fe:	9f 57       	subi	r25, 0x7F	; 127
    4600:	55 0b       	sbc	r21, r21
    4602:	87 ff       	sbrs	r24, 7
    4604:	77 d0       	rcall	.+238    	; 0x46f4 <__fp_norm2>
    4606:	00 24       	eor	r0, r0
    4608:	a0 e6       	ldi	r26, 0x60	; 96
    460a:	40 ea       	ldi	r20, 0xA0	; 160
    460c:	90 01       	movw	r18, r0
    460e:	80 58       	subi	r24, 0x80	; 128
    4610:	56 95       	lsr	r21
    4612:	97 95       	ror	r25
    4614:	28 f4       	brcc	.+10     	; 0x4620 <sqrt+0x2c>
    4616:	80 5c       	subi	r24, 0xC0	; 192
    4618:	66 0f       	add	r22, r22
    461a:	77 1f       	adc	r23, r23
    461c:	88 1f       	adc	r24, r24
    461e:	20 f0       	brcs	.+8      	; 0x4628 <sqrt+0x34>
    4620:	26 17       	cp	r18, r22
    4622:	37 07       	cpc	r19, r23
    4624:	48 07       	cpc	r20, r24
    4626:	30 f4       	brcc	.+12     	; 0x4634 <sqrt+0x40>
    4628:	62 1b       	sub	r22, r18
    462a:	73 0b       	sbc	r23, r19
    462c:	84 0b       	sbc	r24, r20
    462e:	20 29       	or	r18, r0
    4630:	31 29       	or	r19, r1
    4632:	4a 2b       	or	r20, r26
    4634:	a6 95       	lsr	r26
    4636:	17 94       	ror	r1
    4638:	07 94       	ror	r0
    463a:	20 25       	eor	r18, r0
    463c:	31 25       	eor	r19, r1
    463e:	4a 27       	eor	r20, r26
    4640:	58 f7       	brcc	.-42     	; 0x4618 <sqrt+0x24>
    4642:	66 0f       	add	r22, r22
    4644:	77 1f       	adc	r23, r23
    4646:	88 1f       	adc	r24, r24
    4648:	20 f0       	brcs	.+8      	; 0x4652 <sqrt+0x5e>
    464a:	26 17       	cp	r18, r22
    464c:	37 07       	cpc	r19, r23
    464e:	48 07       	cpc	r20, r24
    4650:	30 f4       	brcc	.+12     	; 0x465e <sqrt+0x6a>
    4652:	62 0b       	sbc	r22, r18
    4654:	73 0b       	sbc	r23, r19
    4656:	84 0b       	sbc	r24, r20
    4658:	20 0d       	add	r18, r0
    465a:	31 1d       	adc	r19, r1
    465c:	41 1d       	adc	r20, r1
    465e:	a0 95       	com	r26
    4660:	81 f7       	brne	.-32     	; 0x4642 <sqrt+0x4e>
    4662:	b9 01       	movw	r22, r18
    4664:	84 2f       	mov	r24, r20
    4666:	91 58       	subi	r25, 0x81	; 129
    4668:	88 0f       	add	r24, r24
    466a:	96 95       	lsr	r25
    466c:	87 95       	ror	r24
    466e:	08 95       	ret

00004670 <square>:
    4670:	9b 01       	movw	r18, r22
    4672:	ac 01       	movw	r20, r24
    4674:	06 cf       	rjmp	.-500    	; 0x4482 <__mulsf3>
    4676:	19 f4       	brne	.+6      	; 0x467e <square+0xe>
    4678:	0e f0       	brts	.+2      	; 0x467c <square+0xc>
    467a:	38 ce       	rjmp	.-912    	; 0x42ec <__fp_inf>
    467c:	f0 ce       	rjmp	.-544    	; 0x445e <__fp_zero>
    467e:	3c ce       	rjmp	.-904    	; 0x42f8 <__fp_nan>

00004680 <exp>:
    4680:	d4 de       	rcall	.-600    	; 0x442a <__fp_splitA>
    4682:	c8 f3       	brcs	.-14     	; 0x4676 <square+0x6>
    4684:	96 38       	cpi	r25, 0x86	; 134
    4686:	c0 f7       	brcc	.-16     	; 0x4678 <square+0x8>
    4688:	07 f8       	bld	r0, 7
    468a:	0f 92       	push	r0
    468c:	e8 94       	clt
    468e:	2b e3       	ldi	r18, 0x3B	; 59
    4690:	3a ea       	ldi	r19, 0xAA	; 170
    4692:	48 eb       	ldi	r20, 0xB8	; 184
    4694:	5f e7       	ldi	r21, 0x7F	; 127
    4696:	03 df       	rcall	.-506    	; 0x449e <__mulsf3_pse>
    4698:	0f 92       	push	r0
    469a:	0f 92       	push	r0
    469c:	0f 92       	push	r0
    469e:	4d b7       	in	r20, 0x3d	; 61
    46a0:	5e b7       	in	r21, 0x3e	; 62
    46a2:	0f 92       	push	r0
    46a4:	a9 d0       	rcall	.+338    	; 0x47f8 <modf>
    46a6:	ed ef       	ldi	r30, 0xFD	; 253
    46a8:	f2 e0       	ldi	r31, 0x02	; 2
    46aa:	29 de       	rcall	.-942    	; 0x42fe <__fp_powser>
    46ac:	4f 91       	pop	r20
    46ae:	5f 91       	pop	r21
    46b0:	ef 91       	pop	r30
    46b2:	ff 91       	pop	r31
    46b4:	e5 95       	asr	r30
    46b6:	ee 1f       	adc	r30, r30
    46b8:	ff 1f       	adc	r31, r31
    46ba:	49 f0       	breq	.+18     	; 0x46ce <exp+0x4e>
    46bc:	fe 57       	subi	r31, 0x7E	; 126
    46be:	e0 68       	ori	r30, 0x80	; 128
    46c0:	44 27       	eor	r20, r20
    46c2:	ee 0f       	add	r30, r30
    46c4:	44 1f       	adc	r20, r20
    46c6:	fa 95       	dec	r31
    46c8:	e1 f7       	brne	.-8      	; 0x46c2 <exp+0x42>
    46ca:	41 95       	neg	r20
    46cc:	55 0b       	sbc	r21, r21
    46ce:	1b d0       	rcall	.+54     	; 0x4706 <ldexp>
    46d0:	0f 90       	pop	r0
    46d2:	07 fe       	sbrs	r0, 7
    46d4:	cf ce       	rjmp	.-610    	; 0x4474 <inverse>
    46d6:	08 95       	ret

000046d8 <__fp_mpack>:
    46d8:	9f 3f       	cpi	r25, 0xFF	; 255
    46da:	31 f0       	breq	.+12     	; 0x46e8 <__fp_mpack_finite+0xc>

000046dc <__fp_mpack_finite>:
    46dc:	91 50       	subi	r25, 0x01	; 1
    46de:	20 f4       	brcc	.+8      	; 0x46e8 <__fp_mpack_finite+0xc>
    46e0:	87 95       	ror	r24
    46e2:	77 95       	ror	r23
    46e4:	67 95       	ror	r22
    46e6:	b7 95       	ror	r27
    46e8:	88 0f       	add	r24, r24
    46ea:	91 1d       	adc	r25, r1
    46ec:	96 95       	lsr	r25
    46ee:	87 95       	ror	r24
    46f0:	97 f9       	bld	r25, 7
    46f2:	08 95       	ret

000046f4 <__fp_norm2>:
    46f4:	91 50       	subi	r25, 0x01	; 1
    46f6:	50 40       	sbci	r21, 0x00	; 0
    46f8:	66 0f       	add	r22, r22
    46fa:	77 1f       	adc	r23, r23
    46fc:	88 1f       	adc	r24, r24
    46fe:	d2 f7       	brpl	.-12     	; 0x46f4 <__fp_norm2>
    4700:	08 95       	ret
    4702:	f4 cd       	rjmp	.-1048   	; 0x42ec <__fp_inf>
    4704:	e9 cf       	rjmp	.-46     	; 0x46d8 <__fp_mpack>

00004706 <ldexp>:
    4706:	91 de       	rcall	.-734    	; 0x442a <__fp_splitA>
    4708:	e8 f3       	brcs	.-6      	; 0x4704 <__fp_norm2+0x10>
    470a:	99 23       	and	r25, r25
    470c:	d9 f3       	breq	.-10     	; 0x4704 <__fp_norm2+0x10>
    470e:	94 0f       	add	r25, r20
    4710:	51 1d       	adc	r21, r1
    4712:	bb f3       	brvs	.-18     	; 0x4702 <__fp_norm2+0xe>
    4714:	91 50       	subi	r25, 0x01	; 1
    4716:	50 40       	sbci	r21, 0x00	; 0
    4718:	94 f0       	brlt	.+36     	; 0x473e <ldexp+0x38>
    471a:	59 f0       	breq	.+22     	; 0x4732 <ldexp+0x2c>
    471c:	88 23       	and	r24, r24
    471e:	32 f0       	brmi	.+12     	; 0x472c <ldexp+0x26>
    4720:	66 0f       	add	r22, r22
    4722:	77 1f       	adc	r23, r23
    4724:	88 1f       	adc	r24, r24
    4726:	91 50       	subi	r25, 0x01	; 1
    4728:	50 40       	sbci	r21, 0x00	; 0
    472a:	c1 f7       	brne	.-16     	; 0x471c <ldexp+0x16>
    472c:	9e 3f       	cpi	r25, 0xFE	; 254
    472e:	51 05       	cpc	r21, r1
    4730:	44 f7       	brge	.-48     	; 0x4702 <__fp_norm2+0xe>
    4732:	88 0f       	add	r24, r24
    4734:	91 1d       	adc	r25, r1
    4736:	96 95       	lsr	r25
    4738:	87 95       	ror	r24
    473a:	97 f9       	bld	r25, 7
    473c:	08 95       	ret
    473e:	5f 3f       	cpi	r21, 0xFF	; 255
    4740:	ac f0       	brlt	.+42     	; 0x476c <ldexp+0x66>
    4742:	98 3e       	cpi	r25, 0xE8	; 232
    4744:	9c f0       	brlt	.+38     	; 0x476c <ldexp+0x66>
    4746:	bb 27       	eor	r27, r27
    4748:	86 95       	lsr	r24
    474a:	77 95       	ror	r23
    474c:	67 95       	ror	r22
    474e:	b7 95       	ror	r27
    4750:	08 f4       	brcc	.+2      	; 0x4754 <ldexp+0x4e>
    4752:	b1 60       	ori	r27, 0x01	; 1
    4754:	93 95       	inc	r25
    4756:	c1 f7       	brne	.-16     	; 0x4748 <ldexp+0x42>
    4758:	bb 0f       	add	r27, r27
    475a:	58 f7       	brcc	.-42     	; 0x4732 <ldexp+0x2c>
    475c:	11 f4       	brne	.+4      	; 0x4762 <ldexp+0x5c>
    475e:	60 ff       	sbrs	r22, 0
    4760:	e8 cf       	rjmp	.-48     	; 0x4732 <ldexp+0x2c>
    4762:	6f 5f       	subi	r22, 0xFF	; 255
    4764:	7f 4f       	sbci	r23, 0xFF	; 255
    4766:	8f 4f       	sbci	r24, 0xFF	; 255
    4768:	9f 4f       	sbci	r25, 0xFF	; 255
    476a:	e3 cf       	rjmp	.-58     	; 0x4732 <ldexp+0x2c>
    476c:	79 ce       	rjmp	.-782    	; 0x4460 <__fp_szero>
    476e:	0e f0       	brts	.+2      	; 0x4772 <ldexp+0x6c>
    4770:	b3 cf       	rjmp	.-154    	; 0x46d8 <__fp_mpack>
    4772:	c2 cd       	rjmp	.-1148   	; 0x42f8 <__fp_nan>
    4774:	68 94       	set
    4776:	ba cd       	rjmp	.-1164   	; 0x42ec <__fp_inf>

00004778 <log>:
    4778:	58 de       	rcall	.-848    	; 0x442a <__fp_splitA>
    477a:	c8 f3       	brcs	.-14     	; 0x476e <ldexp+0x68>
    477c:	99 23       	and	r25, r25
    477e:	d1 f3       	breq	.-12     	; 0x4774 <ldexp+0x6e>
    4780:	c6 f3       	brts	.-16     	; 0x4772 <ldexp+0x6c>
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	1f 93       	push	r17
    4788:	0f 93       	push	r16
    478a:	ff 92       	push	r15
    478c:	c9 2f       	mov	r28, r25
    478e:	dd 27       	eor	r29, r29
    4790:	88 23       	and	r24, r24
    4792:	2a f0       	brmi	.+10     	; 0x479e <log+0x26>
    4794:	21 97       	sbiw	r28, 0x01	; 1
    4796:	66 0f       	add	r22, r22
    4798:	77 1f       	adc	r23, r23
    479a:	88 1f       	adc	r24, r24
    479c:	da f7       	brpl	.-10     	; 0x4794 <log+0x1c>
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	40 e8       	ldi	r20, 0x80	; 128
    47a4:	5f eb       	ldi	r21, 0xBF	; 191
    47a6:	9f e3       	ldi	r25, 0x3F	; 63
    47a8:	88 39       	cpi	r24, 0x98	; 152
    47aa:	20 f0       	brcs	.+8      	; 0x47b4 <log+0x3c>
    47ac:	80 3e       	cpi	r24, 0xE0	; 224
    47ae:	30 f0       	brcs	.+12     	; 0x47bc <log+0x44>
    47b0:	21 96       	adiw	r28, 0x01	; 1
    47b2:	8f 77       	andi	r24, 0x7F	; 127
    47b4:	a2 db       	rcall	.-2236   	; 0x3efa <__addsf3>
    47b6:	e5 e2       	ldi	r30, 0x25	; 37
    47b8:	f3 e0       	ldi	r31, 0x03	; 3
    47ba:	03 c0       	rjmp	.+6      	; 0x47c2 <log+0x4a>
    47bc:	9e db       	rcall	.-2244   	; 0x3efa <__addsf3>
    47be:	e2 e5       	ldi	r30, 0x52	; 82
    47c0:	f3 e0       	ldi	r31, 0x03	; 3
    47c2:	9d dd       	rcall	.-1222   	; 0x42fe <__fp_powser>
    47c4:	8b 01       	movw	r16, r22
    47c6:	be 01       	movw	r22, r28
    47c8:	ec 01       	movw	r28, r24
    47ca:	fb 2e       	mov	r15, r27
    47cc:	6f 57       	subi	r22, 0x7F	; 127
    47ce:	71 09       	sbc	r23, r1
    47d0:	75 95       	asr	r23
    47d2:	77 1f       	adc	r23, r23
    47d4:	88 0b       	sbc	r24, r24
    47d6:	99 0b       	sbc	r25, r25
    47d8:	0f dd       	rcall	.-1506   	; 0x41f8 <__floatsisf>
    47da:	28 e1       	ldi	r18, 0x18	; 24
    47dc:	32 e7       	ldi	r19, 0x72	; 114
    47de:	41 e3       	ldi	r20, 0x31	; 49
    47e0:	5f e3       	ldi	r21, 0x3F	; 63
    47e2:	5b de       	rcall	.-842    	; 0x449a <__mulsf3x>
    47e4:	af 2d       	mov	r26, r15
    47e6:	98 01       	movw	r18, r16
    47e8:	ae 01       	movw	r20, r28
    47ea:	ff 90       	pop	r15
    47ec:	0f 91       	pop	r16
    47ee:	1f 91       	pop	r17
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	93 db       	rcall	.-2266   	; 0x3f1c <__addsf3x>
    47f6:	ef cd       	rjmp	.-1058   	; 0x43d6 <__fp_round>

000047f8 <modf>:
    47f8:	fa 01       	movw	r30, r20
    47fa:	dc 01       	movw	r26, r24
    47fc:	aa 0f       	add	r26, r26
    47fe:	bb 1f       	adc	r27, r27
    4800:	9b 01       	movw	r18, r22
    4802:	ac 01       	movw	r20, r24
    4804:	bf 57       	subi	r27, 0x7F	; 127
    4806:	28 f4       	brcc	.+10     	; 0x4812 <modf+0x1a>
    4808:	22 27       	eor	r18, r18
    480a:	33 27       	eor	r19, r19
    480c:	44 27       	eor	r20, r20
    480e:	50 78       	andi	r21, 0x80	; 128
    4810:	1f c0       	rjmp	.+62     	; 0x4850 <modf+0x58>
    4812:	b7 51       	subi	r27, 0x17	; 23
    4814:	88 f4       	brcc	.+34     	; 0x4838 <modf+0x40>
    4816:	ab 2f       	mov	r26, r27
    4818:	00 24       	eor	r0, r0
    481a:	46 95       	lsr	r20
    481c:	37 95       	ror	r19
    481e:	27 95       	ror	r18
    4820:	01 1c       	adc	r0, r1
    4822:	a3 95       	inc	r26
    4824:	d2 f3       	brmi	.-12     	; 0x481a <modf+0x22>
    4826:	00 20       	and	r0, r0
    4828:	69 f0       	breq	.+26     	; 0x4844 <modf+0x4c>
    482a:	22 0f       	add	r18, r18
    482c:	33 1f       	adc	r19, r19
    482e:	44 1f       	adc	r20, r20
    4830:	b3 95       	inc	r27
    4832:	da f3       	brmi	.-10     	; 0x482a <modf+0x32>
    4834:	0d d0       	rcall	.+26     	; 0x4850 <modf+0x58>
    4836:	60 cb       	rjmp	.-2368   	; 0x3ef8 <__subsf3>
    4838:	61 30       	cpi	r22, 0x01	; 1
    483a:	71 05       	cpc	r23, r1
    483c:	a0 e8       	ldi	r26, 0x80	; 128
    483e:	8a 07       	cpc	r24, r26
    4840:	b9 46       	sbci	r27, 0x69	; 105
    4842:	30 f4       	brcc	.+12     	; 0x4850 <modf+0x58>
    4844:	9b 01       	movw	r18, r22
    4846:	ac 01       	movw	r20, r24
    4848:	66 27       	eor	r22, r22
    484a:	77 27       	eor	r23, r23
    484c:	88 27       	eor	r24, r24
    484e:	90 78       	andi	r25, 0x80	; 128
    4850:	30 96       	adiw	r30, 0x00	; 0
    4852:	21 f0       	breq	.+8      	; 0x485c <modf+0x64>
    4854:	20 83       	st	Z, r18
    4856:	31 83       	std	Z+1, r19	; 0x01
    4858:	42 83       	std	Z+2, r20	; 0x02
    485a:	53 83       	std	Z+3, r21	; 0x03
    485c:	08 95       	ret

0000485e <_ZN14HardwareSerial9availableEv>:
    485e:	fc 01       	movw	r30, r24
    4860:	24 85       	ldd	r18, Z+12	; 0x0c
    4862:	35 85       	ldd	r19, Z+13	; 0x0d
    4864:	f9 01       	movw	r30, r18
    4866:	e0 5c       	subi	r30, 0xC0	; 192
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	91 81       	ldd	r25, Z+1	; 0x01
    486e:	32 96       	adiw	r30, 0x02	; 2
    4870:	20 81       	ld	r18, Z
    4872:	31 81       	ldd	r19, Z+1	; 0x01
    4874:	80 5c       	subi	r24, 0xC0	; 192
    4876:	9f 4f       	sbci	r25, 0xFF	; 255
    4878:	82 1b       	sub	r24, r18
    487a:	93 0b       	sbc	r25, r19
    487c:	8f 73       	andi	r24, 0x3F	; 63
    487e:	90 78       	andi	r25, 0x80	; 128
    4880:	99 23       	and	r25, r25
    4882:	24 f4       	brge	.+8      	; 0x488c <_ZN14HardwareSerial9availableEv+0x2e>
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	80 6c       	ori	r24, 0xC0	; 192
    4888:	9f 6f       	ori	r25, 0xFF	; 255
    488a:	01 96       	adiw	r24, 0x01	; 1
    488c:	08 95       	ret

0000488e <_ZN14HardwareSerial4peekEv>:
    488e:	fc 01       	movw	r30, r24
    4890:	84 85       	ldd	r24, Z+12	; 0x0c
    4892:	95 85       	ldd	r25, Z+13	; 0x0d
    4894:	fc 01       	movw	r30, r24
    4896:	e0 5c       	subi	r30, 0xC0	; 192
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	40 81       	ld	r20, Z
    489c:	51 81       	ldd	r21, Z+1	; 0x01
    489e:	32 96       	adiw	r30, 0x02	; 2
    48a0:	20 81       	ld	r18, Z
    48a2:	31 81       	ldd	r19, Z+1	; 0x01
    48a4:	42 17       	cp	r20, r18
    48a6:	53 07       	cpc	r21, r19
    48a8:	41 f0       	breq	.+16     	; 0x48ba <_ZN14HardwareSerial4peekEv+0x2c>
    48aa:	20 81       	ld	r18, Z
    48ac:	31 81       	ldd	r19, Z+1	; 0x01
    48ae:	fc 01       	movw	r30, r24
    48b0:	e2 0f       	add	r30, r18
    48b2:	f3 1f       	adc	r31, r19
    48b4:	80 81       	ld	r24, Z
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	08 95       	ret
    48ba:	8f ef       	ldi	r24, 0xFF	; 255
    48bc:	9f ef       	ldi	r25, 0xFF	; 255
    48be:	08 95       	ret

000048c0 <_ZN14HardwareSerial4readEv>:
    48c0:	fc 01       	movw	r30, r24
    48c2:	84 85       	ldd	r24, Z+12	; 0x0c
    48c4:	95 85       	ldd	r25, Z+13	; 0x0d
    48c6:	fc 01       	movw	r30, r24
    48c8:	e0 5c       	subi	r30, 0xC0	; 192
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	40 81       	ld	r20, Z
    48ce:	51 81       	ldd	r21, Z+1	; 0x01
    48d0:	32 96       	adiw	r30, 0x02	; 2
    48d2:	20 81       	ld	r18, Z
    48d4:	31 81       	ldd	r19, Z+1	; 0x01
    48d6:	42 17       	cp	r20, r18
    48d8:	53 07       	cpc	r21, r19
    48da:	81 f0       	breq	.+32     	; 0x48fc <_ZN14HardwareSerial4readEv+0x3c>
    48dc:	20 81       	ld	r18, Z
    48de:	31 81       	ldd	r19, Z+1	; 0x01
    48e0:	dc 01       	movw	r26, r24
    48e2:	a2 0f       	add	r26, r18
    48e4:	b3 1f       	adc	r27, r19
    48e6:	8c 91       	ld	r24, X
    48e8:	20 81       	ld	r18, Z
    48ea:	31 81       	ldd	r19, Z+1	; 0x01
    48ec:	2f 5f       	subi	r18, 0xFF	; 255
    48ee:	3f 4f       	sbci	r19, 0xFF	; 255
    48f0:	2f 73       	andi	r18, 0x3F	; 63
    48f2:	33 27       	eor	r19, r19
    48f4:	31 83       	std	Z+1, r19	; 0x01
    48f6:	20 83       	st	Z, r18
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	08 95       	ret
    48fc:	8f ef       	ldi	r24, 0xFF	; 255
    48fe:	9f ef       	ldi	r25, 0xFF	; 255
    4900:	08 95       	ret

00004902 <_ZN14HardwareSerial5flushEv>:
    4902:	fc 01       	movw	r30, r24
    4904:	81 a1       	ldd	r24, Z+33	; 0x21
    4906:	88 23       	and	r24, r24
    4908:	29 f0       	breq	.+10     	; 0x4914 <_ZN14HardwareSerial5flushEv+0x12>
    490a:	a4 89       	ldd	r26, Z+20	; 0x14
    490c:	b5 89       	ldd	r27, Z+21	; 0x15
    490e:	8c 91       	ld	r24, X
    4910:	86 ff       	sbrs	r24, 6
    4912:	fb cf       	rjmp	.-10     	; 0x490a <_ZN14HardwareSerial5flushEv+0x8>
    4914:	11 a2       	std	Z+33, r1	; 0x21
    4916:	08 95       	ret

00004918 <_ZN14HardwareSerial5writeEh>:
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	ec 01       	movw	r28, r24
    4920:	8e 85       	ldd	r24, Y+14	; 0x0e
    4922:	9f 85       	ldd	r25, Y+15	; 0x0f
    4924:	fc 01       	movw	r30, r24
    4926:	e0 5c       	subi	r30, 0xC0	; 192
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	01 90       	ld	r0, Z+
    492c:	f0 81       	ld	r31, Z
    492e:	e0 2d       	mov	r30, r0
    4930:	31 96       	adiw	r30, 0x01	; 1
    4932:	ef 73       	andi	r30, 0x3F	; 63
    4934:	ff 27       	eor	r31, r31
    4936:	1e 2f       	mov	r17, r30
    4938:	7f 2f       	mov	r23, r31
    493a:	dc 01       	movw	r26, r24
    493c:	ae 5b       	subi	r26, 0xBE	; 190
    493e:	bf 4f       	sbci	r27, 0xFF	; 255
    4940:	21 2f       	mov	r18, r17
    4942:	37 2f       	mov	r19, r23
    4944:	4d 91       	ld	r20, X+
    4946:	5c 91       	ld	r21, X
    4948:	11 97       	sbiw	r26, 0x01	; 1
    494a:	e4 17       	cp	r30, r20
    494c:	f5 07       	cpc	r31, r21
    494e:	c1 f3       	breq	.-16     	; 0x4940 <_ZN14HardwareSerial5writeEh+0x28>
    4950:	fc 01       	movw	r30, r24
    4952:	e0 5c       	subi	r30, 0xC0	; 192
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	40 81       	ld	r20, Z
    4958:	51 81       	ldd	r21, Z+1	; 0x01
    495a:	fc 01       	movw	r30, r24
    495c:	e4 0f       	add	r30, r20
    495e:	f5 1f       	adc	r31, r21
    4960:	60 83       	st	Z, r22
    4962:	ee 85       	ldd	r30, Y+14	; 0x0e
    4964:	ff 85       	ldd	r31, Y+15	; 0x0f
    4966:	e0 5c       	subi	r30, 0xC0	; 192
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	31 83       	std	Z+1, r19	; 0x01
    496c:	20 83       	st	Z, r18
    496e:	ee 89       	ldd	r30, Y+22	; 0x16
    4970:	ff 89       	ldd	r31, Y+23	; 0x17
    4972:	40 81       	ld	r20, Z
    4974:	21 e0       	ldi	r18, 0x01	; 1
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	c9 01       	movw	r24, r18
    497a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <_ZN14HardwareSerial5writeEh+0x6a>
    497e:	88 0f       	add	r24, r24
    4980:	99 1f       	adc	r25, r25
    4982:	0a 94       	dec	r0
    4984:	e2 f7       	brpl	.-8      	; 0x497e <_ZN14HardwareSerial5writeEh+0x66>
    4986:	84 2b       	or	r24, r20
    4988:	80 83       	st	Z, r24
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	89 a3       	std	Y+33, r24	; 0x21
    498e:	ec 89       	ldd	r30, Y+20	; 0x14
    4990:	fd 89       	ldd	r31, Y+21	; 0x15
    4992:	80 81       	ld	r24, Z
    4994:	80 64       	ori	r24, 0x40	; 64
    4996:	80 83       	st	Z, r24
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	1f 91       	pop	r17
    49a2:	08 95       	ret

000049a4 <__vector_25>:
    49a4:	1f 92       	push	r1
    49a6:	0f 92       	push	r0
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	0f 92       	push	r0
    49ac:	11 24       	eor	r1, r1
    49ae:	0b b6       	in	r0, 0x3b	; 59
    49b0:	0f 92       	push	r0
    49b2:	2f 93       	push	r18
    49b4:	3f 93       	push	r19
    49b6:	4f 93       	push	r20
    49b8:	8f 93       	push	r24
    49ba:	9f 93       	push	r25
    49bc:	af 93       	push	r26
    49be:	bf 93       	push	r27
    49c0:	ef 93       	push	r30
    49c2:	ff 93       	push	r31
    49c4:	80 91 c0 00 	lds	r24, 0x00C0
    49c8:	82 fd       	sbrc	r24, 2
    49ca:	1a c0       	rjmp	.+52     	; 0x4a00 <__vector_25+0x5c>
    49cc:	40 91 c6 00 	lds	r20, 0x00C6
    49d0:	80 91 0c 12 	lds	r24, 0x120C
    49d4:	90 91 0d 12 	lds	r25, 0x120D
    49d8:	01 96       	adiw	r24, 0x01	; 1
    49da:	8f 73       	andi	r24, 0x3F	; 63
    49dc:	99 27       	eor	r25, r25
    49de:	20 91 0e 12 	lds	r18, 0x120E
    49e2:	30 91 0f 12 	lds	r19, 0x120F
    49e6:	82 17       	cp	r24, r18
    49e8:	93 07       	cpc	r25, r19
    49ea:	61 f0       	breq	.+24     	; 0x4a04 <__vector_25+0x60>
    49ec:	ec e0       	ldi	r30, 0x0C	; 12
    49ee:	f2 e1       	ldi	r31, 0x12	; 18
    49f0:	a0 81       	ld	r26, Z
    49f2:	b1 81       	ldd	r27, Z+1	; 0x01
    49f4:	a4 53       	subi	r26, 0x34	; 52
    49f6:	be 4e       	sbci	r27, 0xEE	; 238
    49f8:	4c 93       	st	X, r20
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	80 83       	st	Z, r24
    49fe:	02 c0       	rjmp	.+4      	; 0x4a04 <__vector_25+0x60>
    4a00:	80 91 c6 00 	lds	r24, 0x00C6
    4a04:	ff 91       	pop	r31
    4a06:	ef 91       	pop	r30
    4a08:	bf 91       	pop	r27
    4a0a:	af 91       	pop	r26
    4a0c:	9f 91       	pop	r25
    4a0e:	8f 91       	pop	r24
    4a10:	4f 91       	pop	r20
    4a12:	3f 91       	pop	r19
    4a14:	2f 91       	pop	r18
    4a16:	0f 90       	pop	r0
    4a18:	0b be       	out	0x3b, r0	; 59
    4a1a:	0f 90       	pop	r0
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	0f 90       	pop	r0
    4a20:	1f 90       	pop	r1
    4a22:	18 95       	reti

00004a24 <__vector_36>:
    4a24:	1f 92       	push	r1
    4a26:	0f 92       	push	r0
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	0f 92       	push	r0
    4a2c:	11 24       	eor	r1, r1
    4a2e:	0b b6       	in	r0, 0x3b	; 59
    4a30:	0f 92       	push	r0
    4a32:	2f 93       	push	r18
    4a34:	3f 93       	push	r19
    4a36:	4f 93       	push	r20
    4a38:	8f 93       	push	r24
    4a3a:	9f 93       	push	r25
    4a3c:	af 93       	push	r26
    4a3e:	bf 93       	push	r27
    4a40:	ef 93       	push	r30
    4a42:	ff 93       	push	r31
    4a44:	80 91 c8 00 	lds	r24, 0x00C8
    4a48:	82 fd       	sbrc	r24, 2
    4a4a:	1a c0       	rjmp	.+52     	; 0x4a80 <__vector_36+0x5c>
    4a4c:	40 91 ce 00 	lds	r20, 0x00CE
    4a50:	80 91 84 11 	lds	r24, 0x1184
    4a54:	90 91 85 11 	lds	r25, 0x1185
    4a58:	01 96       	adiw	r24, 0x01	; 1
    4a5a:	8f 73       	andi	r24, 0x3F	; 63
    4a5c:	99 27       	eor	r25, r25
    4a5e:	20 91 86 11 	lds	r18, 0x1186
    4a62:	30 91 87 11 	lds	r19, 0x1187
    4a66:	82 17       	cp	r24, r18
    4a68:	93 07       	cpc	r25, r19
    4a6a:	61 f0       	breq	.+24     	; 0x4a84 <__vector_36+0x60>
    4a6c:	e4 e8       	ldi	r30, 0x84	; 132
    4a6e:	f1 e1       	ldi	r31, 0x11	; 17
    4a70:	a0 81       	ld	r26, Z
    4a72:	b1 81       	ldd	r27, Z+1	; 0x01
    4a74:	ac 5b       	subi	r26, 0xBC	; 188
    4a76:	be 4e       	sbci	r27, 0xEE	; 238
    4a78:	4c 93       	st	X, r20
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	80 83       	st	Z, r24
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <__vector_36+0x60>
    4a80:	80 91 ce 00 	lds	r24, 0x00CE
    4a84:	ff 91       	pop	r31
    4a86:	ef 91       	pop	r30
    4a88:	bf 91       	pop	r27
    4a8a:	af 91       	pop	r26
    4a8c:	9f 91       	pop	r25
    4a8e:	8f 91       	pop	r24
    4a90:	4f 91       	pop	r20
    4a92:	3f 91       	pop	r19
    4a94:	2f 91       	pop	r18
    4a96:	0f 90       	pop	r0
    4a98:	0b be       	out	0x3b, r0	; 59
    4a9a:	0f 90       	pop	r0
    4a9c:	0f be       	out	0x3f, r0	; 63
    4a9e:	0f 90       	pop	r0
    4aa0:	1f 90       	pop	r1
    4aa2:	18 95       	reti

00004aa4 <__vector_26>:
    4aa4:	1f 92       	push	r1
    4aa6:	0f 92       	push	r0
    4aa8:	0f b6       	in	r0, 0x3f	; 63
    4aaa:	0f 92       	push	r0
    4aac:	11 24       	eor	r1, r1
    4aae:	0b b6       	in	r0, 0x3b	; 59
    4ab0:	0f 92       	push	r0
    4ab2:	2f 93       	push	r18
    4ab4:	3f 93       	push	r19
    4ab6:	8f 93       	push	r24
    4ab8:	9f 93       	push	r25
    4aba:	af 93       	push	r26
    4abc:	bf 93       	push	r27
    4abe:	ef 93       	push	r30
    4ac0:	ff 93       	push	r31
    4ac2:	20 91 c8 11 	lds	r18, 0x11C8
    4ac6:	30 91 c9 11 	lds	r19, 0x11C9
    4aca:	80 91 ca 11 	lds	r24, 0x11CA
    4ace:	90 91 cb 11 	lds	r25, 0x11CB
    4ad2:	28 17       	cp	r18, r24
    4ad4:	39 07       	cpc	r19, r25
    4ad6:	31 f4       	brne	.+12     	; 0x4ae4 <__vector_26+0x40>
    4ad8:	e1 ec       	ldi	r30, 0xC1	; 193
    4ada:	f0 e0       	ldi	r31, 0x00	; 0
    4adc:	80 81       	ld	r24, Z
    4ade:	8f 7d       	andi	r24, 0xDF	; 223
    4ae0:	80 83       	st	Z, r24
    4ae2:	10 c0       	rjmp	.+32     	; 0x4b04 <__vector_26+0x60>
    4ae4:	ea ec       	ldi	r30, 0xCA	; 202
    4ae6:	f1 e1       	ldi	r31, 0x11	; 17
    4ae8:	a0 81       	ld	r26, Z
    4aea:	b1 81       	ldd	r27, Z+1	; 0x01
    4aec:	a8 57       	subi	r26, 0x78	; 120
    4aee:	be 4e       	sbci	r27, 0xEE	; 238
    4af0:	2c 91       	ld	r18, X
    4af2:	80 81       	ld	r24, Z
    4af4:	91 81       	ldd	r25, Z+1	; 0x01
    4af6:	01 96       	adiw	r24, 0x01	; 1
    4af8:	8f 73       	andi	r24, 0x3F	; 63
    4afa:	99 27       	eor	r25, r25
    4afc:	91 83       	std	Z+1, r25	; 0x01
    4afe:	80 83       	st	Z, r24
    4b00:	20 93 c6 00 	sts	0x00C6, r18
    4b04:	ff 91       	pop	r31
    4b06:	ef 91       	pop	r30
    4b08:	bf 91       	pop	r27
    4b0a:	af 91       	pop	r26
    4b0c:	9f 91       	pop	r25
    4b0e:	8f 91       	pop	r24
    4b10:	3f 91       	pop	r19
    4b12:	2f 91       	pop	r18
    4b14:	0f 90       	pop	r0
    4b16:	0b be       	out	0x3b, r0	; 59
    4b18:	0f 90       	pop	r0
    4b1a:	0f be       	out	0x3f, r0	; 63
    4b1c:	0f 90       	pop	r0
    4b1e:	1f 90       	pop	r1
    4b20:	18 95       	reti

00004b22 <__vector_37>:
    4b22:	1f 92       	push	r1
    4b24:	0f 92       	push	r0
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	0f 92       	push	r0
    4b2a:	11 24       	eor	r1, r1
    4b2c:	0b b6       	in	r0, 0x3b	; 59
    4b2e:	0f 92       	push	r0
    4b30:	2f 93       	push	r18
    4b32:	3f 93       	push	r19
    4b34:	8f 93       	push	r24
    4b36:	9f 93       	push	r25
    4b38:	af 93       	push	r26
    4b3a:	bf 93       	push	r27
    4b3c:	ef 93       	push	r30
    4b3e:	ff 93       	push	r31
    4b40:	20 91 40 11 	lds	r18, 0x1140
    4b44:	30 91 41 11 	lds	r19, 0x1141
    4b48:	80 91 42 11 	lds	r24, 0x1142
    4b4c:	90 91 43 11 	lds	r25, 0x1143
    4b50:	28 17       	cp	r18, r24
    4b52:	39 07       	cpc	r19, r25
    4b54:	31 f4       	brne	.+12     	; 0x4b62 <__vector_37+0x40>
    4b56:	e9 ec       	ldi	r30, 0xC9	; 201
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 7d       	andi	r24, 0xDF	; 223
    4b5e:	80 83       	st	Z, r24
    4b60:	10 c0       	rjmp	.+32     	; 0x4b82 <__vector_37+0x60>
    4b62:	e2 e4       	ldi	r30, 0x42	; 66
    4b64:	f1 e1       	ldi	r31, 0x11	; 17
    4b66:	a0 81       	ld	r26, Z
    4b68:	b1 81       	ldd	r27, Z+1	; 0x01
    4b6a:	a0 50       	subi	r26, 0x00	; 0
    4b6c:	bf 4e       	sbci	r27, 0xEF	; 239
    4b6e:	2c 91       	ld	r18, X
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	01 96       	adiw	r24, 0x01	; 1
    4b76:	8f 73       	andi	r24, 0x3F	; 63
    4b78:	99 27       	eor	r25, r25
    4b7a:	91 83       	std	Z+1, r25	; 0x01
    4b7c:	80 83       	st	Z, r24
    4b7e:	20 93 ce 00 	sts	0x00CE, r18
    4b82:	ff 91       	pop	r31
    4b84:	ef 91       	pop	r30
    4b86:	bf 91       	pop	r27
    4b88:	af 91       	pop	r26
    4b8a:	9f 91       	pop	r25
    4b8c:	8f 91       	pop	r24
    4b8e:	3f 91       	pop	r19
    4b90:	2f 91       	pop	r18
    4b92:	0f 90       	pop	r0
    4b94:	0b be       	out	0x3b, r0	; 59
    4b96:	0f 90       	pop	r0
    4b98:	0f be       	out	0x3f, r0	; 63
    4b9a:	0f 90       	pop	r0
    4b9c:	1f 90       	pop	r1
    4b9e:	18 95       	reti

00004ba0 <__vector_52>:
    4ba0:	1f 92       	push	r1
    4ba2:	0f 92       	push	r0
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	0f 92       	push	r0
    4ba8:	11 24       	eor	r1, r1
    4baa:	0b b6       	in	r0, 0x3b	; 59
    4bac:	0f 92       	push	r0
    4bae:	2f 93       	push	r18
    4bb0:	3f 93       	push	r19
    4bb2:	8f 93       	push	r24
    4bb4:	9f 93       	push	r25
    4bb6:	af 93       	push	r26
    4bb8:	bf 93       	push	r27
    4bba:	ef 93       	push	r30
    4bbc:	ff 93       	push	r31
    4bbe:	20 91 b8 10 	lds	r18, 0x10B8
    4bc2:	30 91 b9 10 	lds	r19, 0x10B9
    4bc6:	80 91 ba 10 	lds	r24, 0x10BA
    4bca:	90 91 bb 10 	lds	r25, 0x10BB
    4bce:	28 17       	cp	r18, r24
    4bd0:	39 07       	cpc	r19, r25
    4bd2:	31 f4       	brne	.+12     	; 0x4be0 <__vector_52+0x40>
    4bd4:	e1 ed       	ldi	r30, 0xD1	; 209
    4bd6:	f0 e0       	ldi	r31, 0x00	; 0
    4bd8:	80 81       	ld	r24, Z
    4bda:	8f 7d       	andi	r24, 0xDF	; 223
    4bdc:	80 83       	st	Z, r24
    4bde:	10 c0       	rjmp	.+32     	; 0x4c00 <__vector_52+0x60>
    4be0:	ea eb       	ldi	r30, 0xBA	; 186
    4be2:	f0 e1       	ldi	r31, 0x10	; 16
    4be4:	a0 81       	ld	r26, Z
    4be6:	b1 81       	ldd	r27, Z+1	; 0x01
    4be8:	a8 58       	subi	r26, 0x88	; 136
    4bea:	bf 4e       	sbci	r27, 0xEF	; 239
    4bec:	2c 91       	ld	r18, X
    4bee:	80 81       	ld	r24, Z
    4bf0:	91 81       	ldd	r25, Z+1	; 0x01
    4bf2:	01 96       	adiw	r24, 0x01	; 1
    4bf4:	8f 73       	andi	r24, 0x3F	; 63
    4bf6:	99 27       	eor	r25, r25
    4bf8:	91 83       	std	Z+1, r25	; 0x01
    4bfa:	80 83       	st	Z, r24
    4bfc:	20 93 d6 00 	sts	0x00D6, r18
    4c00:	ff 91       	pop	r31
    4c02:	ef 91       	pop	r30
    4c04:	bf 91       	pop	r27
    4c06:	af 91       	pop	r26
    4c08:	9f 91       	pop	r25
    4c0a:	8f 91       	pop	r24
    4c0c:	3f 91       	pop	r19
    4c0e:	2f 91       	pop	r18
    4c10:	0f 90       	pop	r0
    4c12:	0b be       	out	0x3b, r0	; 59
    4c14:	0f 90       	pop	r0
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	0f 90       	pop	r0
    4c1a:	1f 90       	pop	r1
    4c1c:	18 95       	reti

00004c1e <__vector_55>:
    4c1e:	1f 92       	push	r1
    4c20:	0f 92       	push	r0
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	0f 92       	push	r0
    4c26:	11 24       	eor	r1, r1
    4c28:	0b b6       	in	r0, 0x3b	; 59
    4c2a:	0f 92       	push	r0
    4c2c:	2f 93       	push	r18
    4c2e:	3f 93       	push	r19
    4c30:	8f 93       	push	r24
    4c32:	9f 93       	push	r25
    4c34:	af 93       	push	r26
    4c36:	bf 93       	push	r27
    4c38:	ef 93       	push	r30
    4c3a:	ff 93       	push	r31
    4c3c:	20 91 30 10 	lds	r18, 0x1030
    4c40:	30 91 31 10 	lds	r19, 0x1031
    4c44:	80 91 32 10 	lds	r24, 0x1032
    4c48:	90 91 33 10 	lds	r25, 0x1033
    4c4c:	28 17       	cp	r18, r24
    4c4e:	39 07       	cpc	r19, r25
    4c50:	31 f4       	brne	.+12     	; 0x4c5e <__vector_55+0x40>
    4c52:	e1 e3       	ldi	r30, 0x31	; 49
    4c54:	f1 e0       	ldi	r31, 0x01	; 1
    4c56:	80 81       	ld	r24, Z
    4c58:	8f 7d       	andi	r24, 0xDF	; 223
    4c5a:	80 83       	st	Z, r24
    4c5c:	10 c0       	rjmp	.+32     	; 0x4c7e <__vector_55+0x60>
    4c5e:	e2 e3       	ldi	r30, 0x32	; 50
    4c60:	f0 e1       	ldi	r31, 0x10	; 16
    4c62:	a0 81       	ld	r26, Z
    4c64:	b1 81       	ldd	r27, Z+1	; 0x01
    4c66:	a0 51       	subi	r26, 0x10	; 16
    4c68:	b0 4f       	sbci	r27, 0xF0	; 240
    4c6a:	2c 91       	ld	r18, X
    4c6c:	80 81       	ld	r24, Z
    4c6e:	91 81       	ldd	r25, Z+1	; 0x01
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	8f 73       	andi	r24, 0x3F	; 63
    4c74:	99 27       	eor	r25, r25
    4c76:	91 83       	std	Z+1, r25	; 0x01
    4c78:	80 83       	st	Z, r24
    4c7a:	20 93 36 01 	sts	0x0136, r18
    4c7e:	ff 91       	pop	r31
    4c80:	ef 91       	pop	r30
    4c82:	bf 91       	pop	r27
    4c84:	af 91       	pop	r26
    4c86:	9f 91       	pop	r25
    4c88:	8f 91       	pop	r24
    4c8a:	3f 91       	pop	r19
    4c8c:	2f 91       	pop	r18
    4c8e:	0f 90       	pop	r0
    4c90:	0b be       	out	0x3b, r0	; 59
    4c92:	0f 90       	pop	r0
    4c94:	0f be       	out	0x3f, r0	; 63
    4c96:	0f 90       	pop	r0
    4c98:	1f 90       	pop	r1
    4c9a:	18 95       	reti

00004c9c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    4c9c:	8f 92       	push	r8
    4c9e:	9f 92       	push	r9
    4ca0:	af 92       	push	r10
    4ca2:	bf 92       	push	r11
    4ca4:	cf 92       	push	r12
    4ca6:	df 92       	push	r13
    4ca8:	ef 92       	push	r14
    4caa:	ff 92       	push	r15
    4cac:	0f 93       	push	r16
    4cae:	1f 93       	push	r17
    4cb0:	cf 93       	push	r28
    4cb2:	df 93       	push	r29
    4cb4:	cd b7       	in	r28, 0x3d	; 61
    4cb6:	de b7       	in	r29, 0x3e	; 62
    4cb8:	fc 01       	movw	r30, r24
    4cba:	13 82       	std	Z+3, r1	; 0x03
    4cbc:	12 82       	std	Z+2, r1	; 0x02
    4cbe:	88 ee       	ldi	r24, 0xE8	; 232
    4cc0:	93 e0       	ldi	r25, 0x03	; 3
    4cc2:	a0 e0       	ldi	r26, 0x00	; 0
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	84 83       	std	Z+4, r24	; 0x04
    4cc8:	95 83       	std	Z+5, r25	; 0x05
    4cca:	a6 83       	std	Z+6, r26	; 0x06
    4ccc:	b7 83       	std	Z+7, r27	; 0x07
    4cce:	81 ed       	ldi	r24, 0xD1	; 209
    4cd0:	92 e0       	ldi	r25, 0x02	; 2
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	80 83       	st	Z, r24
    4cd6:	75 87       	std	Z+13, r23	; 0x0d
    4cd8:	64 87       	std	Z+12, r22	; 0x0c
    4cda:	57 87       	std	Z+15, r21	; 0x0f
    4cdc:	46 87       	std	Z+14, r20	; 0x0e
    4cde:	31 8b       	std	Z+17, r19	; 0x11
    4ce0:	20 8b       	std	Z+16, r18	; 0x10
    4ce2:	13 8b       	std	Z+19, r17	; 0x13
    4ce4:	02 8b       	std	Z+18, r16	; 0x12
    4ce6:	f5 8a       	std	Z+21, r15	; 0x15
    4ce8:	e4 8a       	std	Z+20, r14	; 0x14
    4cea:	d7 8a       	std	Z+23, r13	; 0x17
    4cec:	c6 8a       	std	Z+22, r12	; 0x16
    4cee:	b1 8e       	std	Z+25, r11	; 0x19
    4cf0:	a0 8e       	std	Z+24, r10	; 0x18
    4cf2:	93 8e       	std	Z+27, r9	; 0x1b
    4cf4:	82 8e       	std	Z+26, r8	; 0x1a
    4cf6:	88 89       	ldd	r24, Y+16	; 0x10
    4cf8:	84 8f       	std	Z+28, r24	; 0x1c
    4cfa:	89 89       	ldd	r24, Y+17	; 0x11
    4cfc:	85 8f       	std	Z+29, r24	; 0x1d
    4cfe:	8a 89       	ldd	r24, Y+18	; 0x12
    4d00:	86 8f       	std	Z+30, r24	; 0x1e
    4d02:	8b 89       	ldd	r24, Y+19	; 0x13
    4d04:	87 8f       	std	Z+31, r24	; 0x1f
    4d06:	8c 89       	ldd	r24, Y+20	; 0x14
    4d08:	80 a3       	std	Z+32, r24	; 0x20
    4d0a:	df 91       	pop	r29
    4d0c:	cf 91       	pop	r28
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	ff 90       	pop	r15
    4d14:	ef 90       	pop	r14
    4d16:	df 90       	pop	r13
    4d18:	cf 90       	pop	r12
    4d1a:	bf 90       	pop	r11
    4d1c:	af 90       	pop	r10
    4d1e:	9f 90       	pop	r9
    4d20:	8f 90       	pop	r8
    4d22:	08 95       	ret

00004d24 <_ZN14HardwareSerial5beginEm>:
    4d24:	cf 92       	push	r12
    4d26:	df 92       	push	r13
    4d28:	ef 92       	push	r14
    4d2a:	ff 92       	push	r15
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	ec 01       	movw	r28, r24
    4d32:	6a 01       	movw	r12, r20
    4d34:	7b 01       	movw	r14, r22
    4d36:	41 15       	cp	r20, r1
    4d38:	81 ee       	ldi	r24, 0xE1	; 225
    4d3a:	58 07       	cpc	r21, r24
    4d3c:	61 05       	cpc	r22, r1
    4d3e:	71 05       	cpc	r23, r1
    4d40:	01 f1       	breq	.+64     	; 0x4d82 <_ZN14HardwareSerial5beginEm+0x5e>
    4d42:	ec 89       	ldd	r30, Y+20	; 0x14
    4d44:	fd 89       	ldd	r31, Y+21	; 0x15
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	08 a0       	ldd	r0, Y+32	; 0x20
    4d4c:	02 c0       	rjmp	.+4      	; 0x4d52 <_ZN14HardwareSerial5beginEm+0x2e>
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	0a 94       	dec	r0
    4d54:	e2 f7       	brpl	.-8      	; 0x4d4e <_ZN14HardwareSerial5beginEm+0x2a>
    4d56:	80 83       	st	Z, r24
    4d58:	60 e0       	ldi	r22, 0x00	; 0
    4d5a:	79 e0       	ldi	r23, 0x09	; 9
    4d5c:	8d e3       	ldi	r24, 0x3D	; 61
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	a7 01       	movw	r20, r14
    4d62:	96 01       	movw	r18, r12
    4d64:	36 d5       	rcall	.+2668   	; 0x57d2 <__udivmodsi4>
    4d66:	ba 01       	movw	r22, r20
    4d68:	a9 01       	movw	r20, r18
    4d6a:	41 50       	subi	r20, 0x01	; 1
    4d6c:	51 09       	sbc	r21, r1
    4d6e:	61 09       	sbc	r22, r1
    4d70:	71 09       	sbc	r23, r1
    4d72:	76 95       	lsr	r23
    4d74:	67 95       	ror	r22
    4d76:	57 95       	ror	r21
    4d78:	47 95       	ror	r20
    4d7a:	41 15       	cp	r20, r1
    4d7c:	80 e1       	ldi	r24, 0x10	; 16
    4d7e:	58 07       	cpc	r21, r24
    4d80:	a0 f0       	brcs	.+40     	; 0x4daa <_ZN14HardwareSerial5beginEm+0x86>
    4d82:	ec 89       	ldd	r30, Y+20	; 0x14
    4d84:	fd 89       	ldd	r31, Y+21	; 0x15
    4d86:	10 82       	st	Z, r1
    4d88:	60 e8       	ldi	r22, 0x80	; 128
    4d8a:	74 e8       	ldi	r23, 0x84	; 132
    4d8c:	8e e1       	ldi	r24, 0x1E	; 30
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	a7 01       	movw	r20, r14
    4d92:	96 01       	movw	r18, r12
    4d94:	1e d5       	rcall	.+2620   	; 0x57d2 <__udivmodsi4>
    4d96:	ba 01       	movw	r22, r20
    4d98:	a9 01       	movw	r20, r18
    4d9a:	41 50       	subi	r20, 0x01	; 1
    4d9c:	51 09       	sbc	r21, r1
    4d9e:	61 09       	sbc	r22, r1
    4da0:	71 09       	sbc	r23, r1
    4da2:	76 95       	lsr	r23
    4da4:	67 95       	ror	r22
    4da6:	57 95       	ror	r21
    4da8:	47 95       	ror	r20
    4daa:	e8 89       	ldd	r30, Y+16	; 0x10
    4dac:	f9 89       	ldd	r31, Y+17	; 0x11
    4dae:	50 83       	st	Z, r21
    4db0:	ea 89       	ldd	r30, Y+18	; 0x12
    4db2:	fb 89       	ldd	r31, Y+19	; 0x13
    4db4:	40 83       	st	Z, r20
    4db6:	19 a2       	std	Y+33, r1	; 0x21
    4db8:	ee 89       	ldd	r30, Y+22	; 0x16
    4dba:	ff 89       	ldd	r31, Y+23	; 0x17
    4dbc:	40 81       	ld	r20, Z
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	9c 01       	movw	r18, r24
    4dc4:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <_ZN14HardwareSerial5beginEm+0xa8>
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	0a 94       	dec	r0
    4dce:	e2 f7       	brpl	.-8      	; 0x4dc8 <_ZN14HardwareSerial5beginEm+0xa4>
    4dd0:	24 2b       	or	r18, r20
    4dd2:	20 83       	st	Z, r18
    4dd4:	ee 89       	ldd	r30, Y+22	; 0x16
    4dd6:	ff 89       	ldd	r31, Y+23	; 0x17
    4dd8:	40 81       	ld	r20, Z
    4dda:	9c 01       	movw	r18, r24
    4ddc:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4dde:	02 c0       	rjmp	.+4      	; 0x4de4 <_ZN14HardwareSerial5beginEm+0xc0>
    4de0:	22 0f       	add	r18, r18
    4de2:	33 1f       	adc	r19, r19
    4de4:	0a 94       	dec	r0
    4de6:	e2 f7       	brpl	.-8      	; 0x4de0 <_ZN14HardwareSerial5beginEm+0xbc>
    4de8:	24 2b       	or	r18, r20
    4dea:	20 83       	st	Z, r18
    4dec:	ee 89       	ldd	r30, Y+22	; 0x16
    4dee:	ff 89       	ldd	r31, Y+23	; 0x17
    4df0:	40 81       	ld	r20, Z
    4df2:	9c 01       	movw	r18, r24
    4df4:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4df6:	02 c0       	rjmp	.+4      	; 0x4dfc <_ZN14HardwareSerial5beginEm+0xd8>
    4df8:	22 0f       	add	r18, r18
    4dfa:	33 1f       	adc	r19, r19
    4dfc:	0a 94       	dec	r0
    4dfe:	e2 f7       	brpl	.-8      	; 0x4df8 <_ZN14HardwareSerial5beginEm+0xd4>
    4e00:	24 2b       	or	r18, r20
    4e02:	20 83       	st	Z, r18
    4e04:	ee 89       	ldd	r30, Y+22	; 0x16
    4e06:	ff 89       	ldd	r31, Y+23	; 0x17
    4e08:	20 81       	ld	r18, Z
    4e0a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <_ZN14HardwareSerial5beginEm+0xee>
    4e0e:	88 0f       	add	r24, r24
    4e10:	99 1f       	adc	r25, r25
    4e12:	0a 94       	dec	r0
    4e14:	e2 f7       	brpl	.-8      	; 0x4e0e <_ZN14HardwareSerial5beginEm+0xea>
    4e16:	80 95       	com	r24
    4e18:	82 23       	and	r24, r18
    4e1a:	80 83       	st	Z, r24
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	08 95       	ret

00004e2a <_GLOBAL__sub_I_rx_buffer>:
    4e2a:	5f 92       	push	r5
    4e2c:	6f 92       	push	r6
    4e2e:	7f 92       	push	r7
    4e30:	8f 92       	push	r8
    4e32:	9f 92       	push	r9
    4e34:	af 92       	push	r10
    4e36:	bf 92       	push	r11
    4e38:	cf 92       	push	r12
    4e3a:	df 92       	push	r13
    4e3c:	ef 92       	push	r14
    4e3e:	ff 92       	push	r15
    4e40:	0f 93       	push	r16
    4e42:	1f 93       	push	r17
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	55 24       	eor	r5, r5
    4e4a:	53 94       	inc	r5
    4e4c:	5f 92       	push	r5
    4e4e:	0f 2e       	mov	r0, r31
    4e50:	f5 e0       	ldi	r31, 0x05	; 5
    4e52:	6f 2e       	mov	r6, r31
    4e54:	f0 2d       	mov	r31, r0
    4e56:	6f 92       	push	r6
    4e58:	0f 2e       	mov	r0, r31
    4e5a:	f7 e0       	ldi	r31, 0x07	; 7
    4e5c:	7f 2e       	mov	r7, r31
    4e5e:	f0 2d       	mov	r31, r0
    4e60:	7f 92       	push	r7
    4e62:	d3 e0       	ldi	r29, 0x03	; 3
    4e64:	df 93       	push	r29
    4e66:	c4 e0       	ldi	r28, 0x04	; 4
    4e68:	cf 93       	push	r28
    4e6a:	0f 2e       	mov	r0, r31
    4e6c:	f6 ec       	ldi	r31, 0xC6	; 198
    4e6e:	8f 2e       	mov	r8, r31
    4e70:	91 2c       	mov	r9, r1
    4e72:	f0 2d       	mov	r31, r0
    4e74:	0f 2e       	mov	r0, r31
    4e76:	f2 ec       	ldi	r31, 0xC2	; 194
    4e78:	af 2e       	mov	r10, r31
    4e7a:	b1 2c       	mov	r11, r1
    4e7c:	f0 2d       	mov	r31, r0
    4e7e:	0f 2e       	mov	r0, r31
    4e80:	f1 ec       	ldi	r31, 0xC1	; 193
    4e82:	cf 2e       	mov	r12, r31
    4e84:	d1 2c       	mov	r13, r1
    4e86:	f0 2d       	mov	r31, r0
    4e88:	0f 2e       	mov	r0, r31
    4e8a:	f0 ec       	ldi	r31, 0xC0	; 192
    4e8c:	ef 2e       	mov	r14, r31
    4e8e:	f1 2c       	mov	r15, r1
    4e90:	f0 2d       	mov	r31, r0
    4e92:	04 ec       	ldi	r16, 0xC4	; 196
    4e94:	10 e0       	ldi	r17, 0x00	; 0
    4e96:	25 ec       	ldi	r18, 0xC5	; 197
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	48 e8       	ldi	r20, 0x88	; 136
    4e9c:	51 e1       	ldi	r21, 0x11	; 17
    4e9e:	6c ec       	ldi	r22, 0xCC	; 204
    4ea0:	71 e1       	ldi	r23, 0x11	; 17
    4ea2:	8e ec       	ldi	r24, 0xCE	; 206
    4ea4:	9f e0       	ldi	r25, 0x0F	; 15
    4ea6:	fa de       	rcall	.-524    	; 0x4c9c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4ea8:	5f 92       	push	r5
    4eaa:	6f 92       	push	r6
    4eac:	7f 92       	push	r7
    4eae:	df 93       	push	r29
    4eb0:	cf 93       	push	r28
    4eb2:	0f 2e       	mov	r0, r31
    4eb4:	fe ec       	ldi	r31, 0xCE	; 206
    4eb6:	8f 2e       	mov	r8, r31
    4eb8:	91 2c       	mov	r9, r1
    4eba:	f0 2d       	mov	r31, r0
    4ebc:	0f 2e       	mov	r0, r31
    4ebe:	fa ec       	ldi	r31, 0xCA	; 202
    4ec0:	af 2e       	mov	r10, r31
    4ec2:	b1 2c       	mov	r11, r1
    4ec4:	f0 2d       	mov	r31, r0
    4ec6:	0f 2e       	mov	r0, r31
    4ec8:	f9 ec       	ldi	r31, 0xC9	; 201
    4eca:	cf 2e       	mov	r12, r31
    4ecc:	d1 2c       	mov	r13, r1
    4ece:	f0 2d       	mov	r31, r0
    4ed0:	0f 2e       	mov	r0, r31
    4ed2:	f8 ec       	ldi	r31, 0xC8	; 200
    4ed4:	ef 2e       	mov	r14, r31
    4ed6:	f1 2c       	mov	r15, r1
    4ed8:	f0 2d       	mov	r31, r0
    4eda:	0c ec       	ldi	r16, 0xCC	; 204
    4edc:	10 e0       	ldi	r17, 0x00	; 0
    4ede:	2d ec       	ldi	r18, 0xCD	; 205
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	40 e0       	ldi	r20, 0x00	; 0
    4ee4:	51 e1       	ldi	r21, 0x11	; 17
    4ee6:	64 e4       	ldi	r22, 0x44	; 68
    4ee8:	71 e1       	ldi	r23, 0x11	; 17
    4eea:	8c ea       	ldi	r24, 0xAC	; 172
    4eec:	9f e0       	ldi	r25, 0x0F	; 15
    4eee:	d6 de       	rcall	.-596    	; 0x4c9c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4ef0:	5f 92       	push	r5
    4ef2:	6f 92       	push	r6
    4ef4:	7f 92       	push	r7
    4ef6:	df 93       	push	r29
    4ef8:	cf 93       	push	r28
    4efa:	0f 2e       	mov	r0, r31
    4efc:	f6 ed       	ldi	r31, 0xD6	; 214
    4efe:	8f 2e       	mov	r8, r31
    4f00:	91 2c       	mov	r9, r1
    4f02:	f0 2d       	mov	r31, r0
    4f04:	0f 2e       	mov	r0, r31
    4f06:	f2 ed       	ldi	r31, 0xD2	; 210
    4f08:	af 2e       	mov	r10, r31
    4f0a:	b1 2c       	mov	r11, r1
    4f0c:	f0 2d       	mov	r31, r0
    4f0e:	0f 2e       	mov	r0, r31
    4f10:	f1 ed       	ldi	r31, 0xD1	; 209
    4f12:	cf 2e       	mov	r12, r31
    4f14:	d1 2c       	mov	r13, r1
    4f16:	f0 2d       	mov	r31, r0
    4f18:	0f 2e       	mov	r0, r31
    4f1a:	f0 ed       	ldi	r31, 0xD0	; 208
    4f1c:	ef 2e       	mov	r14, r31
    4f1e:	f1 2c       	mov	r15, r1
    4f20:	f0 2d       	mov	r31, r0
    4f22:	04 ed       	ldi	r16, 0xD4	; 212
    4f24:	10 e0       	ldi	r17, 0x00	; 0
    4f26:	25 ed       	ldi	r18, 0xD5	; 213
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	48 e7       	ldi	r20, 0x78	; 120
    4f2c:	50 e1       	ldi	r21, 0x10	; 16
    4f2e:	6c eb       	ldi	r22, 0xBC	; 188
    4f30:	70 e1       	ldi	r23, 0x10	; 16
    4f32:	8a e8       	ldi	r24, 0x8A	; 138
    4f34:	9f e0       	ldi	r25, 0x0F	; 15
    4f36:	b2 de       	rcall	.-668    	; 0x4c9c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4f38:	5f 92       	push	r5
    4f3a:	6f 92       	push	r6
    4f3c:	7f 92       	push	r7
    4f3e:	df 93       	push	r29
    4f40:	cf 93       	push	r28
    4f42:	0f 2e       	mov	r0, r31
    4f44:	f6 e3       	ldi	r31, 0x36	; 54
    4f46:	8f 2e       	mov	r8, r31
    4f48:	99 24       	eor	r9, r9
    4f4a:	93 94       	inc	r9
    4f4c:	f0 2d       	mov	r31, r0
    4f4e:	0f 2e       	mov	r0, r31
    4f50:	f2 e3       	ldi	r31, 0x32	; 50
    4f52:	af 2e       	mov	r10, r31
    4f54:	bb 24       	eor	r11, r11
    4f56:	b3 94       	inc	r11
    4f58:	f0 2d       	mov	r31, r0
    4f5a:	0f 2e       	mov	r0, r31
    4f5c:	f1 e3       	ldi	r31, 0x31	; 49
    4f5e:	cf 2e       	mov	r12, r31
    4f60:	dd 24       	eor	r13, r13
    4f62:	d3 94       	inc	r13
    4f64:	f0 2d       	mov	r31, r0
    4f66:	0f 2e       	mov	r0, r31
    4f68:	f0 e3       	ldi	r31, 0x30	; 48
    4f6a:	ef 2e       	mov	r14, r31
    4f6c:	ff 24       	eor	r15, r15
    4f6e:	f3 94       	inc	r15
    4f70:	f0 2d       	mov	r31, r0
    4f72:	04 e3       	ldi	r16, 0x34	; 52
    4f74:	11 e0       	ldi	r17, 0x01	; 1
    4f76:	25 e3       	ldi	r18, 0x35	; 53
    4f78:	31 e0       	ldi	r19, 0x01	; 1
    4f7a:	40 ef       	ldi	r20, 0xF0	; 240
    4f7c:	5f e0       	ldi	r21, 0x0F	; 15
    4f7e:	64 e3       	ldi	r22, 0x34	; 52
    4f80:	70 e1       	ldi	r23, 0x10	; 16
    4f82:	88 e6       	ldi	r24, 0x68	; 104
    4f84:	9f e0       	ldi	r25, 0x0F	; 15
    4f86:	8a de       	rcall	.-748    	; 0x4c9c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4f88:	8d b7       	in	r24, 0x3d	; 61
    4f8a:	9e b7       	in	r25, 0x3e	; 62
    4f8c:	44 96       	adiw	r24, 0x14	; 20
    4f8e:	0f b6       	in	r0, 0x3f	; 63
    4f90:	f8 94       	cli
    4f92:	9e bf       	out	0x3e, r25	; 62
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	8d bf       	out	0x3d, r24	; 61
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	ff 90       	pop	r15
    4fa2:	ef 90       	pop	r14
    4fa4:	df 90       	pop	r13
    4fa6:	cf 90       	pop	r12
    4fa8:	bf 90       	pop	r11
    4faa:	af 90       	pop	r10
    4fac:	9f 90       	pop	r9
    4fae:	8f 90       	pop	r8
    4fb0:	7f 90       	pop	r7
    4fb2:	6f 90       	pop	r6
    4fb4:	5f 90       	pop	r5
    4fb6:	08 95       	ret

00004fb8 <_ZN5Print5writeEPKhj>:
    4fb8:	cf 92       	push	r12
    4fba:	df 92       	push	r13
    4fbc:	ef 92       	push	r14
    4fbe:	ff 92       	push	r15
    4fc0:	0f 93       	push	r16
    4fc2:	1f 93       	push	r17
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	6c 01       	movw	r12, r24
    4fca:	41 15       	cp	r20, r1
    4fcc:	51 05       	cpc	r21, r1
    4fce:	b1 f0       	breq	.+44     	; 0x4ffc <_ZN5Print5writeEPKhj+0x44>
    4fd0:	06 2f       	mov	r16, r22
    4fd2:	17 2f       	mov	r17, r23
    4fd4:	ea 01       	movw	r28, r20
    4fd6:	e1 2c       	mov	r14, r1
    4fd8:	f1 2c       	mov	r15, r1
    4fda:	d8 01       	movw	r26, r16
    4fdc:	6d 91       	ld	r22, X+
    4fde:	8d 01       	movw	r16, r26
    4fe0:	d6 01       	movw	r26, r12
    4fe2:	ed 91       	ld	r30, X+
    4fe4:	fc 91       	ld	r31, X
    4fe6:	01 90       	ld	r0, Z+
    4fe8:	f0 81       	ld	r31, Z
    4fea:	e0 2d       	mov	r30, r0
    4fec:	c6 01       	movw	r24, r12
    4fee:	19 95       	eicall
    4ff0:	e8 0e       	add	r14, r24
    4ff2:	f9 1e       	adc	r15, r25
    4ff4:	21 97       	sbiw	r28, 0x01	; 1
    4ff6:	20 97       	sbiw	r28, 0x00	; 0
    4ff8:	81 f7       	brne	.-32     	; 0x4fda <_ZN5Print5writeEPKhj+0x22>
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <_ZN5Print5writeEPKhj+0x48>
    4ffc:	e1 2c       	mov	r14, r1
    4ffe:	f1 2c       	mov	r15, r1
    5000:	c7 01       	movw	r24, r14
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	1f 91       	pop	r17
    5008:	0f 91       	pop	r16
    500a:	ff 90       	pop	r15
    500c:	ef 90       	pop	r14
    500e:	df 90       	pop	r13
    5010:	cf 90       	pop	r12
    5012:	08 95       	ret

00005014 <_ZN5Print5printEPKc>:
    5014:	61 15       	cp	r22, r1
    5016:	71 05       	cpc	r23, r1
    5018:	81 f0       	breq	.+32     	; 0x503a <_ZN5Print5printEPKc+0x26>
    501a:	fb 01       	movw	r30, r22
    501c:	01 90       	ld	r0, Z+
    501e:	00 20       	and	r0, r0
    5020:	e9 f7       	brne	.-6      	; 0x501c <_ZN5Print5printEPKc+0x8>
    5022:	31 97       	sbiw	r30, 0x01	; 1
    5024:	af 01       	movw	r20, r30
    5026:	46 1b       	sub	r20, r22
    5028:	57 0b       	sbc	r21, r23
    502a:	dc 01       	movw	r26, r24
    502c:	ed 91       	ld	r30, X+
    502e:	fc 91       	ld	r31, X
    5030:	02 80       	ldd	r0, Z+2	; 0x02
    5032:	f3 81       	ldd	r31, Z+3	; 0x03
    5034:	e0 2d       	mov	r30, r0
    5036:	19 95       	eicall
    5038:	08 95       	ret
    503a:	80 e0       	ldi	r24, 0x00	; 0
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	08 95       	ret

00005040 <_ZN5Print5printEc>:
    5040:	dc 01       	movw	r26, r24
    5042:	ed 91       	ld	r30, X+
    5044:	fc 91       	ld	r31, X
    5046:	01 90       	ld	r0, Z+
    5048:	f0 81       	ld	r31, Z
    504a:	e0 2d       	mov	r30, r0
    504c:	19 95       	eicall
    504e:	08 95       	ret

00005050 <_ZN5Print7printlnEv>:
    5050:	0f 93       	push	r16
    5052:	1f 93       	push	r17
    5054:	cf 93       	push	r28
    5056:	df 93       	push	r29
    5058:	ec 01       	movw	r28, r24
    505a:	6d e0       	ldi	r22, 0x0D	; 13
    505c:	f1 df       	rcall	.-30     	; 0x5040 <_ZN5Print5printEc>
    505e:	8c 01       	movw	r16, r24
    5060:	6a e0       	ldi	r22, 0x0A	; 10
    5062:	ce 01       	movw	r24, r28
    5064:	ed df       	rcall	.-38     	; 0x5040 <_ZN5Print5printEc>
    5066:	80 0f       	add	r24, r16
    5068:	91 1f       	adc	r25, r17
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	08 95       	ret

00005074 <_ZN5Print7printlnEPKc>:
    5074:	0f 93       	push	r16
    5076:	1f 93       	push	r17
    5078:	cf 93       	push	r28
    507a:	df 93       	push	r29
    507c:	ec 01       	movw	r28, r24
    507e:	ca df       	rcall	.-108    	; 0x5014 <_ZN5Print5printEPKc>
    5080:	8c 01       	movw	r16, r24
    5082:	ce 01       	movw	r24, r28
    5084:	e5 df       	rcall	.-54     	; 0x5050 <_ZN5Print7printlnEv>
    5086:	80 0f       	add	r24, r16
    5088:	91 1f       	adc	r25, r17
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	08 95       	ret

00005094 <_ZN5Print11printNumberEmh>:
    5094:	6f 92       	push	r6
    5096:	7f 92       	push	r7
    5098:	8f 92       	push	r8
    509a:	9f 92       	push	r9
    509c:	af 92       	push	r10
    509e:	bf 92       	push	r11
    50a0:	cf 92       	push	r12
    50a2:	df 92       	push	r13
    50a4:	ef 92       	push	r14
    50a6:	ff 92       	push	r15
    50a8:	0f 93       	push	r16
    50aa:	1f 93       	push	r17
    50ac:	cf 93       	push	r28
    50ae:	df 93       	push	r29
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
    50b4:	a1 97       	sbiw	r28, 0x21	; 33
    50b6:	0f b6       	in	r0, 0x3f	; 63
    50b8:	f8 94       	cli
    50ba:	de bf       	out	0x3e, r29	; 62
    50bc:	0f be       	out	0x3f, r0	; 63
    50be:	cd bf       	out	0x3d, r28	; 61
    50c0:	6c 01       	movw	r12, r24
    50c2:	74 2e       	mov	r7, r20
    50c4:	35 2f       	mov	r19, r21
    50c6:	86 2f       	mov	r24, r22
    50c8:	97 2f       	mov	r25, r23
    50ca:	62 2e       	mov	r6, r18
    50cc:	19 a2       	std	Y+33, r1	; 0x21
    50ce:	21 e0       	ldi	r18, 0x01	; 1
    50d0:	26 15       	cp	r18, r6
    50d2:	20 f0       	brcs	.+8      	; 0x50dc <_ZN5Print11printNumberEmh+0x48>
    50d4:	0f 2e       	mov	r0, r31
    50d6:	fa e0       	ldi	r31, 0x0A	; 10
    50d8:	6f 2e       	mov	r6, r31
    50da:	f0 2d       	mov	r31, r0
    50dc:	7e 01       	movw	r14, r28
    50de:	a1 e2       	ldi	r26, 0x21	; 33
    50e0:	ea 0e       	add	r14, r26
    50e2:	f1 1c       	adc	r15, r1
    50e4:	86 2c       	mov	r8, r6
    50e6:	91 2c       	mov	r9, r1
    50e8:	a1 2c       	mov	r10, r1
    50ea:	b1 2c       	mov	r11, r1
    50ec:	67 2d       	mov	r22, r7
    50ee:	73 2f       	mov	r23, r19
    50f0:	a5 01       	movw	r20, r10
    50f2:	94 01       	movw	r18, r8
    50f4:	6e d3       	rcall	.+1756   	; 0x57d2 <__udivmodsi4>
    50f6:	e2 2f       	mov	r30, r18
    50f8:	73 2f       	mov	r23, r19
    50fa:	02 2f       	mov	r16, r18
    50fc:	13 2f       	mov	r17, r19
    50fe:	24 2f       	mov	r18, r20
    5100:	35 2f       	mov	r19, r21
    5102:	f7 2d       	mov	r31, r7
    5104:	6e 9e       	mul	r6, r30
    5106:	f0 19       	sub	r31, r0
    5108:	11 24       	eor	r1, r1
    510a:	b1 e0       	ldi	r27, 0x01	; 1
    510c:	eb 1a       	sub	r14, r27
    510e:	f1 08       	sbc	r15, r1
    5110:	fa 30       	cpi	r31, 0x0A	; 10
    5112:	10 f4       	brcc	.+4      	; 0x5118 <_ZN5Print11printNumberEmh+0x84>
    5114:	f0 5d       	subi	r31, 0xD0	; 208
    5116:	01 c0       	rjmp	.+2      	; 0x511a <_ZN5Print11printNumberEmh+0x86>
    5118:	f9 5c       	subi	r31, 0xC9	; 201
    511a:	d7 01       	movw	r26, r14
    511c:	fc 93       	st	X, r31
    511e:	01 2b       	or	r16, r17
    5120:	02 2b       	or	r16, r18
    5122:	03 2b       	or	r16, r19
    5124:	29 f0       	breq	.+10     	; 0x5130 <_ZN5Print11printNumberEmh+0x9c>
    5126:	7e 2e       	mov	r7, r30
    5128:	37 2f       	mov	r19, r23
    512a:	84 2f       	mov	r24, r20
    512c:	95 2f       	mov	r25, r21
    512e:	de cf       	rjmp	.-68     	; 0x50ec <_ZN5Print11printNumberEmh+0x58>
    5130:	e1 14       	cp	r14, r1
    5132:	f1 04       	cpc	r15, r1
    5134:	91 f0       	breq	.+36     	; 0x515a <_ZN5Print11printNumberEmh+0xc6>
    5136:	f7 01       	movw	r30, r14
    5138:	01 90       	ld	r0, Z+
    513a:	00 20       	and	r0, r0
    513c:	e9 f7       	brne	.-6      	; 0x5138 <_ZN5Print11printNumberEmh+0xa4>
    513e:	31 97       	sbiw	r30, 0x01	; 1
    5140:	af 01       	movw	r20, r30
    5142:	4e 19       	sub	r20, r14
    5144:	5f 09       	sbc	r21, r15
    5146:	d6 01       	movw	r26, r12
    5148:	ed 91       	ld	r30, X+
    514a:	fc 91       	ld	r31, X
    514c:	02 80       	ldd	r0, Z+2	; 0x02
    514e:	f3 81       	ldd	r31, Z+3	; 0x03
    5150:	e0 2d       	mov	r30, r0
    5152:	b7 01       	movw	r22, r14
    5154:	c6 01       	movw	r24, r12
    5156:	19 95       	eicall
    5158:	02 c0       	rjmp	.+4      	; 0x515e <_ZN5Print11printNumberEmh+0xca>
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	a1 96       	adiw	r28, 0x21	; 33
    5160:	0f b6       	in	r0, 0x3f	; 63
    5162:	f8 94       	cli
    5164:	de bf       	out	0x3e, r29	; 62
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	cd bf       	out	0x3d, r28	; 61
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	1f 91       	pop	r17
    5170:	0f 91       	pop	r16
    5172:	ff 90       	pop	r15
    5174:	ef 90       	pop	r14
    5176:	df 90       	pop	r13
    5178:	cf 90       	pop	r12
    517a:	bf 90       	pop	r11
    517c:	af 90       	pop	r10
    517e:	9f 90       	pop	r9
    5180:	8f 90       	pop	r8
    5182:	7f 90       	pop	r7
    5184:	6f 90       	pop	r6
    5186:	08 95       	ret

00005188 <_ZN5Print5printEli>:
    5188:	cf 92       	push	r12
    518a:	df 92       	push	r13
    518c:	ef 92       	push	r14
    518e:	ff 92       	push	r15
    5190:	0f 93       	push	r16
    5192:	1f 93       	push	r17
    5194:	cf 93       	push	r28
    5196:	df 93       	push	r29
    5198:	ec 01       	movw	r28, r24
    519a:	6a 01       	movw	r12, r20
    519c:	7b 01       	movw	r14, r22
    519e:	21 15       	cp	r18, r1
    51a0:	31 05       	cpc	r19, r1
    51a2:	41 f4       	brne	.+16     	; 0x51b4 <_ZN5Print5printEli+0x2c>
    51a4:	e8 81       	ld	r30, Y
    51a6:	f9 81       	ldd	r31, Y+1	; 0x01
    51a8:	01 90       	ld	r0, Z+
    51aa:	f0 81       	ld	r31, Z
    51ac:	e0 2d       	mov	r30, r0
    51ae:	64 2f       	mov	r22, r20
    51b0:	19 95       	eicall
    51b2:	19 c0       	rjmp	.+50     	; 0x51e6 <_ZN5Print5printEli+0x5e>
    51b4:	2a 30       	cpi	r18, 0x0A	; 10
    51b6:	31 05       	cpc	r19, r1
    51b8:	a9 f4       	brne	.+42     	; 0x51e4 <_ZN5Print5printEli+0x5c>
    51ba:	77 23       	and	r23, r23
    51bc:	84 f4       	brge	.+32     	; 0x51de <_ZN5Print5printEli+0x56>
    51be:	6d e2       	ldi	r22, 0x2D	; 45
    51c0:	3f df       	rcall	.-386    	; 0x5040 <_ZN5Print5printEc>
    51c2:	8c 01       	movw	r16, r24
    51c4:	44 27       	eor	r20, r20
    51c6:	55 27       	eor	r21, r21
    51c8:	ba 01       	movw	r22, r20
    51ca:	4c 19       	sub	r20, r12
    51cc:	5d 09       	sbc	r21, r13
    51ce:	6e 09       	sbc	r22, r14
    51d0:	7f 09       	sbc	r23, r15
    51d2:	2a e0       	ldi	r18, 0x0A	; 10
    51d4:	ce 01       	movw	r24, r28
    51d6:	5e df       	rcall	.-324    	; 0x5094 <_ZN5Print11printNumberEmh>
    51d8:	80 0f       	add	r24, r16
    51da:	91 1f       	adc	r25, r17
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <_ZN5Print5printEli+0x5e>
    51de:	2a e0       	ldi	r18, 0x0A	; 10
    51e0:	59 df       	rcall	.-334    	; 0x5094 <_ZN5Print11printNumberEmh>
    51e2:	01 c0       	rjmp	.+2      	; 0x51e6 <_ZN5Print5printEli+0x5e>
    51e4:	57 df       	rcall	.-338    	; 0x5094 <_ZN5Print11printNumberEmh>
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16
    51ee:	ff 90       	pop	r15
    51f0:	ef 90       	pop	r14
    51f2:	df 90       	pop	r13
    51f4:	cf 90       	pop	r12
    51f6:	08 95       	ret

000051f8 <_ZN5Print5printEii>:
    51f8:	9a 01       	movw	r18, r20
    51fa:	ab 01       	movw	r20, r22
    51fc:	66 27       	eor	r22, r22
    51fe:	57 fd       	sbrc	r21, 7
    5200:	60 95       	com	r22
    5202:	76 2f       	mov	r23, r22
    5204:	c1 cf       	rjmp	.-126    	; 0x5188 <_ZN5Print5printEli>
    5206:	08 95       	ret

00005208 <_ZN5Print7printlnEii>:
    5208:	0f 93       	push	r16
    520a:	1f 93       	push	r17
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	ec 01       	movw	r28, r24
    5212:	9a 01       	movw	r18, r20
    5214:	ab 01       	movw	r20, r22
    5216:	66 27       	eor	r22, r22
    5218:	57 fd       	sbrc	r21, 7
    521a:	60 95       	com	r22
    521c:	76 2f       	mov	r23, r22
    521e:	b4 df       	rcall	.-152    	; 0x5188 <_ZN5Print5printEli>
    5220:	8c 01       	movw	r16, r24
    5222:	ce 01       	movw	r24, r28
    5224:	15 df       	rcall	.-470    	; 0x5050 <_ZN5Print7printlnEv>
    5226:	80 0f       	add	r24, r16
    5228:	91 1f       	adc	r25, r17
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	1f 91       	pop	r17
    5230:	0f 91       	pop	r16
    5232:	08 95       	ret

00005234 <__vector_23>:
    5234:	1f 92       	push	r1
    5236:	0f 92       	push	r0
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	0f 92       	push	r0
    523c:	11 24       	eor	r1, r1
    523e:	2f 93       	push	r18
    5240:	3f 93       	push	r19
    5242:	8f 93       	push	r24
    5244:	9f 93       	push	r25
    5246:	af 93       	push	r26
    5248:	bf 93       	push	r27
    524a:	80 91 11 12 	lds	r24, 0x1211
    524e:	90 91 12 12 	lds	r25, 0x1212
    5252:	a0 91 13 12 	lds	r26, 0x1213
    5256:	b0 91 14 12 	lds	r27, 0x1214
    525a:	30 91 10 12 	lds	r19, 0x1210
    525e:	23 e0       	ldi	r18, 0x03	; 3
    5260:	23 0f       	add	r18, r19
    5262:	2d 37       	cpi	r18, 0x7D	; 125
    5264:	20 f4       	brcc	.+8      	; 0x526e <__vector_23+0x3a>
    5266:	01 96       	adiw	r24, 0x01	; 1
    5268:	a1 1d       	adc	r26, r1
    526a:	b1 1d       	adc	r27, r1
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <__vector_23+0x44>
    526e:	26 e8       	ldi	r18, 0x86	; 134
    5270:	23 0f       	add	r18, r19
    5272:	02 96       	adiw	r24, 0x02	; 2
    5274:	a1 1d       	adc	r26, r1
    5276:	b1 1d       	adc	r27, r1
    5278:	20 93 10 12 	sts	0x1210, r18
    527c:	80 93 11 12 	sts	0x1211, r24
    5280:	90 93 12 12 	sts	0x1212, r25
    5284:	a0 93 13 12 	sts	0x1213, r26
    5288:	b0 93 14 12 	sts	0x1214, r27
    528c:	80 91 15 12 	lds	r24, 0x1215
    5290:	90 91 16 12 	lds	r25, 0x1216
    5294:	a0 91 17 12 	lds	r26, 0x1217
    5298:	b0 91 18 12 	lds	r27, 0x1218
    529c:	01 96       	adiw	r24, 0x01	; 1
    529e:	a1 1d       	adc	r26, r1
    52a0:	b1 1d       	adc	r27, r1
    52a2:	80 93 15 12 	sts	0x1215, r24
    52a6:	90 93 16 12 	sts	0x1216, r25
    52aa:	a0 93 17 12 	sts	0x1217, r26
    52ae:	b0 93 18 12 	sts	0x1218, r27
    52b2:	bf 91       	pop	r27
    52b4:	af 91       	pop	r26
    52b6:	9f 91       	pop	r25
    52b8:	8f 91       	pop	r24
    52ba:	3f 91       	pop	r19
    52bc:	2f 91       	pop	r18
    52be:	0f 90       	pop	r0
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	0f 90       	pop	r0
    52c4:	1f 90       	pop	r1
    52c6:	18 95       	reti

000052c8 <millis>:
    52c8:	2f b7       	in	r18, 0x3f	; 63
    52ca:	f8 94       	cli
    52cc:	60 91 11 12 	lds	r22, 0x1211
    52d0:	70 91 12 12 	lds	r23, 0x1212
    52d4:	80 91 13 12 	lds	r24, 0x1213
    52d8:	90 91 14 12 	lds	r25, 0x1214
    52dc:	2f bf       	out	0x3f, r18	; 63
    52de:	08 95       	ret

000052e0 <micros>:
    52e0:	3f b7       	in	r19, 0x3f	; 63
    52e2:	f8 94       	cli
    52e4:	80 91 15 12 	lds	r24, 0x1215
    52e8:	90 91 16 12 	lds	r25, 0x1216
    52ec:	a0 91 17 12 	lds	r26, 0x1217
    52f0:	b0 91 18 12 	lds	r27, 0x1218
    52f4:	26 b5       	in	r18, 0x26	; 38
    52f6:	a8 9b       	sbis	0x15, 0	; 21
    52f8:	05 c0       	rjmp	.+10     	; 0x5304 <micros+0x24>
    52fa:	2f 3f       	cpi	r18, 0xFF	; 255
    52fc:	19 f0       	breq	.+6      	; 0x5304 <micros+0x24>
    52fe:	01 96       	adiw	r24, 0x01	; 1
    5300:	a1 1d       	adc	r26, r1
    5302:	b1 1d       	adc	r27, r1
    5304:	3f bf       	out	0x3f, r19	; 63
    5306:	ba 2f       	mov	r27, r26
    5308:	a9 2f       	mov	r26, r25
    530a:	98 2f       	mov	r25, r24
    530c:	88 27       	eor	r24, r24
    530e:	82 0f       	add	r24, r18
    5310:	91 1d       	adc	r25, r1
    5312:	a1 1d       	adc	r26, r1
    5314:	b1 1d       	adc	r27, r1
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	66 0f       	add	r22, r22
    531c:	77 1f       	adc	r23, r23
    531e:	88 1f       	adc	r24, r24
    5320:	99 1f       	adc	r25, r25
    5322:	66 0f       	add	r22, r22
    5324:	77 1f       	adc	r23, r23
    5326:	88 1f       	adc	r24, r24
    5328:	99 1f       	adc	r25, r25
    532a:	08 95       	ret

0000532c <delay>:
    532c:	cf 92       	push	r12
    532e:	df 92       	push	r13
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	6b 01       	movw	r12, r22
    533a:	7c 01       	movw	r14, r24
    533c:	d1 df       	rcall	.-94     	; 0x52e0 <micros>
    533e:	eb 01       	movw	r28, r22
    5340:	c1 14       	cp	r12, r1
    5342:	d1 04       	cpc	r13, r1
    5344:	e1 04       	cpc	r14, r1
    5346:	f1 04       	cpc	r15, r1
    5348:	91 f0       	breq	.+36     	; 0x536e <delay+0x42>
    534a:	ca df       	rcall	.-108    	; 0x52e0 <micros>
    534c:	6c 1b       	sub	r22, r28
    534e:	7d 0b       	sbc	r23, r29
    5350:	68 3e       	cpi	r22, 0xE8	; 232
    5352:	73 40       	sbci	r23, 0x03	; 3
    5354:	38 f0       	brcs	.+14     	; 0x5364 <delay+0x38>
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	c8 1a       	sub	r12, r24
    535a:	d1 08       	sbc	r13, r1
    535c:	e1 08       	sbc	r14, r1
    535e:	f1 08       	sbc	r15, r1
    5360:	c8 51       	subi	r28, 0x18	; 24
    5362:	dc 4f       	sbci	r29, 0xFC	; 252
    5364:	c1 14       	cp	r12, r1
    5366:	d1 04       	cpc	r13, r1
    5368:	e1 04       	cpc	r14, r1
    536a:	f1 04       	cpc	r15, r1
    536c:	71 f7       	brne	.-36     	; 0x534a <delay+0x1e>
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	ff 90       	pop	r15
    5374:	ef 90       	pop	r14
    5376:	df 90       	pop	r13
    5378:	cf 90       	pop	r12
    537a:	08 95       	ret

0000537c <delayMicroseconds>:
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	39 f0       	breq	.+14     	; 0x5390 <delayMicroseconds+0x14>
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	88 0f       	add	r24, r24
    5388:	99 1f       	adc	r25, r25
    538a:	02 97       	sbiw	r24, 0x02	; 2
    538c:	01 97       	sbiw	r24, 0x01	; 1
    538e:	f1 f7       	brne	.-4      	; 0x538c <delayMicroseconds+0x10>
    5390:	08 95       	ret

00005392 <init>:
    5392:	78 94       	sei
    5394:	84 b5       	in	r24, 0x24	; 36
    5396:	82 60       	ori	r24, 0x02	; 2
    5398:	84 bd       	out	0x24, r24	; 36
    539a:	84 b5       	in	r24, 0x24	; 36
    539c:	81 60       	ori	r24, 0x01	; 1
    539e:	84 bd       	out	0x24, r24	; 36
    53a0:	85 b5       	in	r24, 0x25	; 37
    53a2:	82 60       	ori	r24, 0x02	; 2
    53a4:	85 bd       	out	0x25, r24	; 37
    53a6:	85 b5       	in	r24, 0x25	; 37
    53a8:	81 60       	ori	r24, 0x01	; 1
    53aa:	85 bd       	out	0x25, r24	; 37
    53ac:	ee e6       	ldi	r30, 0x6E	; 110
    53ae:	f0 e0       	ldi	r31, 0x00	; 0
    53b0:	80 81       	ld	r24, Z
    53b2:	81 60       	ori	r24, 0x01	; 1
    53b4:	80 83       	st	Z, r24
    53b6:	e1 e8       	ldi	r30, 0x81	; 129
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	10 82       	st	Z, r1
    53bc:	80 81       	ld	r24, Z
    53be:	82 60       	ori	r24, 0x02	; 2
    53c0:	80 83       	st	Z, r24
    53c2:	80 81       	ld	r24, Z
    53c4:	81 60       	ori	r24, 0x01	; 1
    53c6:	80 83       	st	Z, r24
    53c8:	e0 e8       	ldi	r30, 0x80	; 128
    53ca:	f0 e0       	ldi	r31, 0x00	; 0
    53cc:	80 81       	ld	r24, Z
    53ce:	81 60       	ori	r24, 0x01	; 1
    53d0:	80 83       	st	Z, r24
    53d2:	e1 eb       	ldi	r30, 0xB1	; 177
    53d4:	f0 e0       	ldi	r31, 0x00	; 0
    53d6:	80 81       	ld	r24, Z
    53d8:	84 60       	ori	r24, 0x04	; 4
    53da:	80 83       	st	Z, r24
    53dc:	e0 eb       	ldi	r30, 0xB0	; 176
    53de:	f0 e0       	ldi	r31, 0x00	; 0
    53e0:	80 81       	ld	r24, Z
    53e2:	81 60       	ori	r24, 0x01	; 1
    53e4:	80 83       	st	Z, r24
    53e6:	e1 e9       	ldi	r30, 0x91	; 145
    53e8:	f0 e0       	ldi	r31, 0x00	; 0
    53ea:	80 81       	ld	r24, Z
    53ec:	82 60       	ori	r24, 0x02	; 2
    53ee:	80 83       	st	Z, r24
    53f0:	80 81       	ld	r24, Z
    53f2:	81 60       	ori	r24, 0x01	; 1
    53f4:	80 83       	st	Z, r24
    53f6:	e0 e9       	ldi	r30, 0x90	; 144
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	80 81       	ld	r24, Z
    53fc:	81 60       	ori	r24, 0x01	; 1
    53fe:	80 83       	st	Z, r24
    5400:	e1 ea       	ldi	r30, 0xA1	; 161
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	80 81       	ld	r24, Z
    5406:	82 60       	ori	r24, 0x02	; 2
    5408:	80 83       	st	Z, r24
    540a:	80 81       	ld	r24, Z
    540c:	81 60       	ori	r24, 0x01	; 1
    540e:	80 83       	st	Z, r24
    5410:	e0 ea       	ldi	r30, 0xA0	; 160
    5412:	f0 e0       	ldi	r31, 0x00	; 0
    5414:	80 81       	ld	r24, Z
    5416:	81 60       	ori	r24, 0x01	; 1
    5418:	80 83       	st	Z, r24
    541a:	e1 e2       	ldi	r30, 0x21	; 33
    541c:	f1 e0       	ldi	r31, 0x01	; 1
    541e:	80 81       	ld	r24, Z
    5420:	82 60       	ori	r24, 0x02	; 2
    5422:	80 83       	st	Z, r24
    5424:	80 81       	ld	r24, Z
    5426:	81 60       	ori	r24, 0x01	; 1
    5428:	80 83       	st	Z, r24
    542a:	e0 e2       	ldi	r30, 0x20	; 32
    542c:	f1 e0       	ldi	r31, 0x01	; 1
    542e:	80 81       	ld	r24, Z
    5430:	81 60       	ori	r24, 0x01	; 1
    5432:	80 83       	st	Z, r24
    5434:	ea e7       	ldi	r30, 0x7A	; 122
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	80 81       	ld	r24, Z
    543a:	84 60       	ori	r24, 0x04	; 4
    543c:	80 83       	st	Z, r24
    543e:	80 81       	ld	r24, Z
    5440:	82 60       	ori	r24, 0x02	; 2
    5442:	80 83       	st	Z, r24
    5444:	80 81       	ld	r24, Z
    5446:	81 60       	ori	r24, 0x01	; 1
    5448:	80 83       	st	Z, r24
    544a:	80 81       	ld	r24, Z
    544c:	80 68       	ori	r24, 0x80	; 128
    544e:	80 83       	st	Z, r24
    5450:	10 92 c1 00 	sts	0x00C1, r1
    5454:	08 95       	ret

00005456 <analogRead>:
    5456:	86 33       	cpi	r24, 0x36	; 54
    5458:	08 f0       	brcs	.+2      	; 0x545c <analogRead+0x6>
    545a:	86 53       	subi	r24, 0x36	; 54
    545c:	eb e7       	ldi	r30, 0x7B	; 123
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	90 81       	ld	r25, Z
    5462:	28 2f       	mov	r18, r24
    5464:	28 70       	andi	r18, 0x08	; 8
    5466:	97 7f       	andi	r25, 0xF7	; 247
    5468:	92 2b       	or	r25, r18
    546a:	90 83       	st	Z, r25
    546c:	87 70       	andi	r24, 0x07	; 7
    546e:	20 91 60 02 	lds	r18, 0x0260
    5472:	90 e4       	ldi	r25, 0x40	; 64
    5474:	29 9f       	mul	r18, r25
    5476:	90 01       	movw	r18, r0
    5478:	11 24       	eor	r1, r1
    547a:	28 2b       	or	r18, r24
    547c:	20 93 7c 00 	sts	0x007C, r18
    5480:	ea e7       	ldi	r30, 0x7A	; 122
    5482:	f0 e0       	ldi	r31, 0x00	; 0
    5484:	80 81       	ld	r24, Z
    5486:	80 64       	ori	r24, 0x40	; 64
    5488:	80 83       	st	Z, r24
    548a:	80 81       	ld	r24, Z
    548c:	86 fd       	sbrc	r24, 6
    548e:	fd cf       	rjmp	.-6      	; 0x548a <analogRead+0x34>
    5490:	80 91 78 00 	lds	r24, 0x0078
    5494:	20 91 79 00 	lds	r18, 0x0079
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	92 2b       	or	r25, r18
    549c:	08 95       	ret

0000549e <analogWrite>:
    549e:	1f 93       	push	r17
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	18 2f       	mov	r17, r24
    54a6:	eb 01       	movw	r28, r22
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	16 d1       	rcall	.+556    	; 0x56d8 <pinMode>
    54ac:	20 97       	sbiw	r28, 0x00	; 0
    54ae:	21 f4       	brne	.+8      	; 0x54b8 <analogWrite+0x1a>
    54b0:	60 e0       	ldi	r22, 0x00	; 0
    54b2:	81 2f       	mov	r24, r17
    54b4:	4f d1       	rcall	.+670    	; 0x5754 <digitalWrite>
    54b6:	ac c0       	rjmp	.+344    	; 0x5610 <analogWrite+0x172>
    54b8:	cf 3f       	cpi	r28, 0xFF	; 255
    54ba:	d1 05       	cpc	r29, r1
    54bc:	21 f4       	brne	.+8      	; 0x54c6 <analogWrite+0x28>
    54be:	61 e0       	ldi	r22, 0x01	; 1
    54c0:	81 2f       	mov	r24, r17
    54c2:	48 d1       	rcall	.+656    	; 0x5754 <digitalWrite>
    54c4:	a5 c0       	rjmp	.+330    	; 0x5610 <analogWrite+0x172>
    54c6:	41 2f       	mov	r20, r17
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	fa 01       	movw	r30, r20
    54cc:	ec 53       	subi	r30, 0x3C	; 60
    54ce:	fc 4f       	sbci	r31, 0xFC	; 252
    54d0:	44 91       	lpm	r20, Z
    54d2:	50 e0       	ldi	r21, 0x00	; 0
    54d4:	fa 01       	movw	r30, r20
    54d6:	31 97       	sbiw	r30, 0x01	; 1
    54d8:	e1 31       	cpi	r30, 0x11	; 17
    54da:	f1 05       	cpc	r31, r1
    54dc:	08 f0       	brcs	.+2      	; 0x54e0 <analogWrite+0x42>
    54de:	8e c0       	rjmp	.+284    	; 0x55fc <analogWrite+0x15e>
    54e0:	e0 54       	subi	r30, 0x40	; 64
    54e2:	fe 4f       	sbci	r31, 0xFE	; 254
    54e4:	98 c1       	rjmp	.+816    	; 0x5816 <__tablejump2__>
    54e6:	84 b5       	in	r24, 0x24	; 36
    54e8:	80 68       	ori	r24, 0x80	; 128
    54ea:	84 bd       	out	0x24, r24	; 36
    54ec:	c7 bd       	out	0x27, r28	; 39
    54ee:	90 c0       	rjmp	.+288    	; 0x5610 <analogWrite+0x172>
    54f0:	84 b5       	in	r24, 0x24	; 36
    54f2:	80 62       	ori	r24, 0x20	; 32
    54f4:	84 bd       	out	0x24, r24	; 36
    54f6:	c8 bd       	out	0x28, r28	; 40
    54f8:	8b c0       	rjmp	.+278    	; 0x5610 <analogWrite+0x172>
    54fa:	e0 e8       	ldi	r30, 0x80	; 128
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	80 81       	ld	r24, Z
    5500:	80 68       	ori	r24, 0x80	; 128
    5502:	80 83       	st	Z, r24
    5504:	d0 93 89 00 	sts	0x0089, r29
    5508:	c0 93 88 00 	sts	0x0088, r28
    550c:	81 c0       	rjmp	.+258    	; 0x5610 <analogWrite+0x172>
    550e:	e0 e8       	ldi	r30, 0x80	; 128
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	80 81       	ld	r24, Z
    5514:	80 62       	ori	r24, 0x20	; 32
    5516:	80 83       	st	Z, r24
    5518:	d0 93 8b 00 	sts	0x008B, r29
    551c:	c0 93 8a 00 	sts	0x008A, r28
    5520:	77 c0       	rjmp	.+238    	; 0x5610 <analogWrite+0x172>
    5522:	e0 eb       	ldi	r30, 0xB0	; 176
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	80 81       	ld	r24, Z
    5528:	80 68       	ori	r24, 0x80	; 128
    552a:	80 83       	st	Z, r24
    552c:	c0 93 b3 00 	sts	0x00B3, r28
    5530:	6f c0       	rjmp	.+222    	; 0x5610 <analogWrite+0x172>
    5532:	e0 eb       	ldi	r30, 0xB0	; 176
    5534:	f0 e0       	ldi	r31, 0x00	; 0
    5536:	80 81       	ld	r24, Z
    5538:	80 62       	ori	r24, 0x20	; 32
    553a:	80 83       	st	Z, r24
    553c:	c0 93 b4 00 	sts	0x00B4, r28
    5540:	67 c0       	rjmp	.+206    	; 0x5610 <analogWrite+0x172>
    5542:	e0 e9       	ldi	r30, 0x90	; 144
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	80 81       	ld	r24, Z
    5548:	80 68       	ori	r24, 0x80	; 128
    554a:	80 83       	st	Z, r24
    554c:	d0 93 99 00 	sts	0x0099, r29
    5550:	c0 93 98 00 	sts	0x0098, r28
    5554:	5d c0       	rjmp	.+186    	; 0x5610 <analogWrite+0x172>
    5556:	e0 e9       	ldi	r30, 0x90	; 144
    5558:	f0 e0       	ldi	r31, 0x00	; 0
    555a:	80 81       	ld	r24, Z
    555c:	80 62       	ori	r24, 0x20	; 32
    555e:	80 83       	st	Z, r24
    5560:	d0 93 9b 00 	sts	0x009B, r29
    5564:	c0 93 9a 00 	sts	0x009A, r28
    5568:	53 c0       	rjmp	.+166    	; 0x5610 <analogWrite+0x172>
    556a:	e0 e9       	ldi	r30, 0x90	; 144
    556c:	f0 e0       	ldi	r31, 0x00	; 0
    556e:	80 81       	ld	r24, Z
    5570:	88 60       	ori	r24, 0x08	; 8
    5572:	80 83       	st	Z, r24
    5574:	d0 93 9d 00 	sts	0x009D, r29
    5578:	c0 93 9c 00 	sts	0x009C, r28
    557c:	49 c0       	rjmp	.+146    	; 0x5610 <analogWrite+0x172>
    557e:	e0 ea       	ldi	r30, 0xA0	; 160
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	80 81       	ld	r24, Z
    5584:	80 68       	ori	r24, 0x80	; 128
    5586:	80 83       	st	Z, r24
    5588:	80 81       	ld	r24, Z
    558a:	8f 7b       	andi	r24, 0xBF	; 191
    558c:	80 83       	st	Z, r24
    558e:	d0 93 a9 00 	sts	0x00A9, r29
    5592:	c0 93 a8 00 	sts	0x00A8, r28
    5596:	3c c0       	rjmp	.+120    	; 0x5610 <analogWrite+0x172>
    5598:	e0 ea       	ldi	r30, 0xA0	; 160
    559a:	f0 e0       	ldi	r31, 0x00	; 0
    559c:	80 81       	ld	r24, Z
    559e:	80 62       	ori	r24, 0x20	; 32
    55a0:	80 83       	st	Z, r24
    55a2:	d0 93 ab 00 	sts	0x00AB, r29
    55a6:	c0 93 aa 00 	sts	0x00AA, r28
    55aa:	32 c0       	rjmp	.+100    	; 0x5610 <analogWrite+0x172>
    55ac:	e0 ea       	ldi	r30, 0xA0	; 160
    55ae:	f0 e0       	ldi	r31, 0x00	; 0
    55b0:	80 81       	ld	r24, Z
    55b2:	88 60       	ori	r24, 0x08	; 8
    55b4:	80 83       	st	Z, r24
    55b6:	d0 93 ad 00 	sts	0x00AD, r29
    55ba:	c0 93 ac 00 	sts	0x00AC, r28
    55be:	28 c0       	rjmp	.+80     	; 0x5610 <analogWrite+0x172>
    55c0:	e0 e2       	ldi	r30, 0x20	; 32
    55c2:	f1 e0       	ldi	r31, 0x01	; 1
    55c4:	80 81       	ld	r24, Z
    55c6:	80 68       	ori	r24, 0x80	; 128
    55c8:	80 83       	st	Z, r24
    55ca:	d0 93 29 01 	sts	0x0129, r29
    55ce:	c0 93 28 01 	sts	0x0128, r28
    55d2:	1e c0       	rjmp	.+60     	; 0x5610 <analogWrite+0x172>
    55d4:	e0 e2       	ldi	r30, 0x20	; 32
    55d6:	f1 e0       	ldi	r31, 0x01	; 1
    55d8:	80 81       	ld	r24, Z
    55da:	80 62       	ori	r24, 0x20	; 32
    55dc:	80 83       	st	Z, r24
    55de:	d0 93 2b 01 	sts	0x012B, r29
    55e2:	c0 93 2a 01 	sts	0x012A, r28
    55e6:	14 c0       	rjmp	.+40     	; 0x5610 <analogWrite+0x172>
    55e8:	e0 e2       	ldi	r30, 0x20	; 32
    55ea:	f1 e0       	ldi	r31, 0x01	; 1
    55ec:	80 81       	ld	r24, Z
    55ee:	88 60       	ori	r24, 0x08	; 8
    55f0:	80 83       	st	Z, r24
    55f2:	d0 93 2d 01 	sts	0x012D, r29
    55f6:	c0 93 2c 01 	sts	0x012C, r28
    55fa:	0a c0       	rjmp	.+20     	; 0x5610 <analogWrite+0x172>
    55fc:	c0 38       	cpi	r28, 0x80	; 128
    55fe:	d1 05       	cpc	r29, r1
    5600:	24 f4       	brge	.+8      	; 0x560a <analogWrite+0x16c>
    5602:	60 e0       	ldi	r22, 0x00	; 0
    5604:	81 2f       	mov	r24, r17
    5606:	a6 d0       	rcall	.+332    	; 0x5754 <digitalWrite>
    5608:	03 c0       	rjmp	.+6      	; 0x5610 <analogWrite+0x172>
    560a:	61 e0       	ldi	r22, 0x01	; 1
    560c:	81 2f       	mov	r24, r17
    560e:	a2 d0       	rcall	.+324    	; 0x5754 <digitalWrite>
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	1f 91       	pop	r17
    5616:	08 95       	ret

00005618 <turnOffPWM>:
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	fc 01       	movw	r30, r24
    561c:	31 97       	sbiw	r30, 0x01	; 1
    561e:	e1 31       	cpi	r30, 0x11	; 17
    5620:	f1 05       	cpc	r31, r1
    5622:	08 f0       	brcs	.+2      	; 0x5626 <turnOffPWM+0xe>
    5624:	58 c0       	rjmp	.+176    	; 0x56d6 <turnOffPWM+0xbe>
    5626:	ef 52       	subi	r30, 0x2F	; 47
    5628:	fe 4f       	sbci	r31, 0xFE	; 254
    562a:	f5 c0       	rjmp	.+490    	; 0x5816 <__tablejump2__>
    562c:	e0 e8       	ldi	r30, 0x80	; 128
    562e:	f0 e0       	ldi	r31, 0x00	; 0
    5630:	80 81       	ld	r24, Z
    5632:	8f 77       	andi	r24, 0x7F	; 127
    5634:	80 83       	st	Z, r24
    5636:	08 95       	ret
    5638:	e0 e8       	ldi	r30, 0x80	; 128
    563a:	f0 e0       	ldi	r31, 0x00	; 0
    563c:	80 81       	ld	r24, Z
    563e:	8f 7d       	andi	r24, 0xDF	; 223
    5640:	80 83       	st	Z, r24
    5642:	08 95       	ret
    5644:	84 b5       	in	r24, 0x24	; 36
    5646:	8f 77       	andi	r24, 0x7F	; 127
    5648:	84 bd       	out	0x24, r24	; 36
    564a:	08 95       	ret
    564c:	84 b5       	in	r24, 0x24	; 36
    564e:	8f 7d       	andi	r24, 0xDF	; 223
    5650:	84 bd       	out	0x24, r24	; 36
    5652:	08 95       	ret
    5654:	e0 eb       	ldi	r30, 0xB0	; 176
    5656:	f0 e0       	ldi	r31, 0x00	; 0
    5658:	80 81       	ld	r24, Z
    565a:	8f 77       	andi	r24, 0x7F	; 127
    565c:	80 83       	st	Z, r24
    565e:	08 95       	ret
    5660:	e0 eb       	ldi	r30, 0xB0	; 176
    5662:	f0 e0       	ldi	r31, 0x00	; 0
    5664:	80 81       	ld	r24, Z
    5666:	8f 7d       	andi	r24, 0xDF	; 223
    5668:	80 83       	st	Z, r24
    566a:	08 95       	ret
    566c:	e0 e9       	ldi	r30, 0x90	; 144
    566e:	f0 e0       	ldi	r31, 0x00	; 0
    5670:	80 81       	ld	r24, Z
    5672:	8f 77       	andi	r24, 0x7F	; 127
    5674:	80 83       	st	Z, r24
    5676:	08 95       	ret
    5678:	e0 e9       	ldi	r30, 0x90	; 144
    567a:	f0 e0       	ldi	r31, 0x00	; 0
    567c:	80 81       	ld	r24, Z
    567e:	8f 7d       	andi	r24, 0xDF	; 223
    5680:	80 83       	st	Z, r24
    5682:	08 95       	ret
    5684:	e0 e9       	ldi	r30, 0x90	; 144
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	80 81       	ld	r24, Z
    568a:	87 7f       	andi	r24, 0xF7	; 247
    568c:	80 83       	st	Z, r24
    568e:	08 95       	ret
    5690:	e0 ea       	ldi	r30, 0xA0	; 160
    5692:	f0 e0       	ldi	r31, 0x00	; 0
    5694:	80 81       	ld	r24, Z
    5696:	8f 77       	andi	r24, 0x7F	; 127
    5698:	80 83       	st	Z, r24
    569a:	08 95       	ret
    569c:	e0 ea       	ldi	r30, 0xA0	; 160
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	80 81       	ld	r24, Z
    56a2:	8f 7d       	andi	r24, 0xDF	; 223
    56a4:	80 83       	st	Z, r24
    56a6:	08 95       	ret
    56a8:	e0 ea       	ldi	r30, 0xA0	; 160
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	80 81       	ld	r24, Z
    56ae:	87 7f       	andi	r24, 0xF7	; 247
    56b0:	80 83       	st	Z, r24
    56b2:	08 95       	ret
    56b4:	e0 e2       	ldi	r30, 0x20	; 32
    56b6:	f1 e0       	ldi	r31, 0x01	; 1
    56b8:	80 81       	ld	r24, Z
    56ba:	8f 77       	andi	r24, 0x7F	; 127
    56bc:	80 83       	st	Z, r24
    56be:	08 95       	ret
    56c0:	e0 e2       	ldi	r30, 0x20	; 32
    56c2:	f1 e0       	ldi	r31, 0x01	; 1
    56c4:	80 81       	ld	r24, Z
    56c6:	8f 7d       	andi	r24, 0xDF	; 223
    56c8:	80 83       	st	Z, r24
    56ca:	08 95       	ret
    56cc:	e0 e2       	ldi	r30, 0x20	; 32
    56ce:	f1 e0       	ldi	r31, 0x01	; 1
    56d0:	80 81       	ld	r24, Z
    56d2:	87 7f       	andi	r24, 0xF7	; 247
    56d4:	80 83       	st	Z, r24
    56d6:	08 95       	ret

000056d8 <pinMode>:
    56d8:	cf 93       	push	r28
    56da:	df 93       	push	r29
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	fc 01       	movw	r30, r24
    56e0:	e6 5f       	subi	r30, 0xF6	; 246
    56e2:	fb 4f       	sbci	r31, 0xFB	; 251
    56e4:	24 91       	lpm	r18, Z
    56e6:	fc 01       	movw	r30, r24
    56e8:	e0 5b       	subi	r30, 0xB0	; 176
    56ea:	fb 4f       	sbci	r31, 0xFB	; 251
    56ec:	84 91       	lpm	r24, Z
    56ee:	88 23       	and	r24, r24
    56f0:	71 f1       	breq	.+92     	; 0x574e <pinMode+0x76>
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	88 0f       	add	r24, r24
    56f6:	99 1f       	adc	r25, r25
    56f8:	fc 01       	movw	r30, r24
    56fa:	e6 53       	subi	r30, 0x36	; 54
    56fc:	fb 4f       	sbci	r31, 0xFB	; 251
    56fe:	a5 91       	lpm	r26, Z+
    5700:	b4 91       	lpm	r27, Z
    5702:	80 55       	subi	r24, 0x50	; 80
    5704:	9b 4f       	sbci	r25, 0xFB	; 251
    5706:	fc 01       	movw	r30, r24
    5708:	c5 91       	lpm	r28, Z+
    570a:	d4 91       	lpm	r29, Z
    570c:	61 11       	cpse	r22, r1
    570e:	0b c0       	rjmp	.+22     	; 0x5726 <pinMode+0x4e>
    5710:	8f b7       	in	r24, 0x3f	; 63
    5712:	f8 94       	cli
    5714:	9c 91       	ld	r25, X
    5716:	20 95       	com	r18
    5718:	92 23       	and	r25, r18
    571a:	9c 93       	st	X, r25
    571c:	e8 81       	ld	r30, Y
    571e:	2e 23       	and	r18, r30
    5720:	28 83       	st	Y, r18
    5722:	8f bf       	out	0x3f, r24	; 63
    5724:	14 c0       	rjmp	.+40     	; 0x574e <pinMode+0x76>
    5726:	62 30       	cpi	r22, 0x02	; 2
    5728:	61 f4       	brne	.+24     	; 0x5742 <pinMode+0x6a>
    572a:	8f b7       	in	r24, 0x3f	; 63
    572c:	f8 94       	cli
    572e:	3c 91       	ld	r19, X
    5730:	92 2f       	mov	r25, r18
    5732:	90 95       	com	r25
    5734:	93 23       	and	r25, r19
    5736:	9c 93       	st	X, r25
    5738:	e8 81       	ld	r30, Y
    573a:	2e 2b       	or	r18, r30
    573c:	28 83       	st	Y, r18
    573e:	8f bf       	out	0x3f, r24	; 63
    5740:	06 c0       	rjmp	.+12     	; 0x574e <pinMode+0x76>
    5742:	8f b7       	in	r24, 0x3f	; 63
    5744:	f8 94       	cli
    5746:	ec 91       	ld	r30, X
    5748:	2e 2b       	or	r18, r30
    574a:	2c 93       	st	X, r18
    574c:	8f bf       	out	0x3f, r24	; 63
    574e:	df 91       	pop	r29
    5750:	cf 91       	pop	r28
    5752:	08 95       	ret

00005754 <digitalWrite>:
    5754:	1f 93       	push	r17
    5756:	cf 93       	push	r28
    5758:	df 93       	push	r29
    575a:	c6 2f       	mov	r28, r22
    575c:	28 2f       	mov	r18, r24
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	f9 01       	movw	r30, r18
    5762:	ec 53       	subi	r30, 0x3C	; 60
    5764:	fc 4f       	sbci	r31, 0xFC	; 252
    5766:	84 91       	lpm	r24, Z
    5768:	f9 01       	movw	r30, r18
    576a:	e6 5f       	subi	r30, 0xF6	; 246
    576c:	fb 4f       	sbci	r31, 0xFB	; 251
    576e:	14 91       	lpm	r17, Z
    5770:	f9 01       	movw	r30, r18
    5772:	e0 5b       	subi	r30, 0xB0	; 176
    5774:	fb 4f       	sbci	r31, 0xFB	; 251
    5776:	d4 91       	lpm	r29, Z
    5778:	dd 23       	and	r29, r29
    577a:	c1 f0       	breq	.+48     	; 0x57ac <digitalWrite+0x58>
    577c:	81 11       	cpse	r24, r1
    577e:	4c df       	rcall	.-360    	; 0x5618 <turnOffPWM>
    5780:	2d 2f       	mov	r18, r29
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	f9 01       	movw	r30, r18
    5786:	ee 0f       	add	r30, r30
    5788:	ff 1f       	adc	r31, r31
    578a:	e0 55       	subi	r30, 0x50	; 80
    578c:	fb 4f       	sbci	r31, 0xFB	; 251
    578e:	a5 91       	lpm	r26, Z+
    5790:	b4 91       	lpm	r27, Z
    5792:	8f b7       	in	r24, 0x3f	; 63
    5794:	f8 94       	cli
    5796:	c1 11       	cpse	r28, r1
    5798:	05 c0       	rjmp	.+10     	; 0x57a4 <digitalWrite+0x50>
    579a:	ec 91       	ld	r30, X
    579c:	10 95       	com	r17
    579e:	1e 23       	and	r17, r30
    57a0:	1c 93       	st	X, r17
    57a2:	03 c0       	rjmp	.+6      	; 0x57aa <digitalWrite+0x56>
    57a4:	ec 91       	ld	r30, X
    57a6:	1e 2b       	or	r17, r30
    57a8:	1c 93       	st	X, r17
    57aa:	8f bf       	out	0x3f, r24	; 63
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	08 95       	ret

000057b4 <__mulsi3>:
    57b4:	db 01       	movw	r26, r22
    57b6:	8f 93       	push	r24
    57b8:	9f 93       	push	r25
    57ba:	42 d0       	rcall	.+132    	; 0x5840 <__muluhisi3>
    57bc:	bf 91       	pop	r27
    57be:	af 91       	pop	r26
    57c0:	a2 9f       	mul	r26, r18
    57c2:	80 0d       	add	r24, r0
    57c4:	91 1d       	adc	r25, r1
    57c6:	a3 9f       	mul	r26, r19
    57c8:	90 0d       	add	r25, r0
    57ca:	b2 9f       	mul	r27, r18
    57cc:	90 0d       	add	r25, r0
    57ce:	11 24       	eor	r1, r1
    57d0:	08 95       	ret

000057d2 <__udivmodsi4>:
    57d2:	a1 e2       	ldi	r26, 0x21	; 33
    57d4:	1a 2e       	mov	r1, r26
    57d6:	aa 1b       	sub	r26, r26
    57d8:	bb 1b       	sub	r27, r27
    57da:	fd 01       	movw	r30, r26
    57dc:	0d c0       	rjmp	.+26     	; 0x57f8 <__udivmodsi4_ep>

000057de <__udivmodsi4_loop>:
    57de:	aa 1f       	adc	r26, r26
    57e0:	bb 1f       	adc	r27, r27
    57e2:	ee 1f       	adc	r30, r30
    57e4:	ff 1f       	adc	r31, r31
    57e6:	a2 17       	cp	r26, r18
    57e8:	b3 07       	cpc	r27, r19
    57ea:	e4 07       	cpc	r30, r20
    57ec:	f5 07       	cpc	r31, r21
    57ee:	20 f0       	brcs	.+8      	; 0x57f8 <__udivmodsi4_ep>
    57f0:	a2 1b       	sub	r26, r18
    57f2:	b3 0b       	sbc	r27, r19
    57f4:	e4 0b       	sbc	r30, r20
    57f6:	f5 0b       	sbc	r31, r21

000057f8 <__udivmodsi4_ep>:
    57f8:	66 1f       	adc	r22, r22
    57fa:	77 1f       	adc	r23, r23
    57fc:	88 1f       	adc	r24, r24
    57fe:	99 1f       	adc	r25, r25
    5800:	1a 94       	dec	r1
    5802:	69 f7       	brne	.-38     	; 0x57de <__udivmodsi4_loop>
    5804:	60 95       	com	r22
    5806:	70 95       	com	r23
    5808:	80 95       	com	r24
    580a:	90 95       	com	r25
    580c:	9b 01       	movw	r18, r22
    580e:	ac 01       	movw	r20, r24
    5810:	bd 01       	movw	r22, r26
    5812:	cf 01       	movw	r24, r30
    5814:	08 95       	ret

00005816 <__tablejump2__>:
    5816:	ee 0f       	add	r30, r30
    5818:	ff 1f       	adc	r31, r31

0000581a <__tablejump__>:
    581a:	05 90       	lpm	r0, Z+
    581c:	f4 91       	lpm	r31, Z
    581e:	e0 2d       	mov	r30, r0
    5820:	19 94       	eijmp

00005822 <__umulhisi3>:
    5822:	a2 9f       	mul	r26, r18
    5824:	b0 01       	movw	r22, r0
    5826:	b3 9f       	mul	r27, r19
    5828:	c0 01       	movw	r24, r0
    582a:	a3 9f       	mul	r26, r19
    582c:	70 0d       	add	r23, r0
    582e:	81 1d       	adc	r24, r1
    5830:	11 24       	eor	r1, r1
    5832:	91 1d       	adc	r25, r1
    5834:	b2 9f       	mul	r27, r18
    5836:	70 0d       	add	r23, r0
    5838:	81 1d       	adc	r24, r1
    583a:	11 24       	eor	r1, r1
    583c:	91 1d       	adc	r25, r1
    583e:	08 95       	ret

00005840 <__muluhisi3>:
    5840:	f0 df       	rcall	.-32     	; 0x5822 <__umulhisi3>
    5842:	a5 9f       	mul	r26, r21
    5844:	90 0d       	add	r25, r0
    5846:	b4 9f       	mul	r27, r20
    5848:	90 0d       	add	r25, r0
    584a:	a4 9f       	mul	r26, r20
    584c:	80 0d       	add	r24, r0
    584e:	91 1d       	adc	r25, r1
    5850:	11 24       	eor	r1, r1
    5852:	08 95       	ret

00005854 <__tablejump_elpm__>:
    5854:	07 90       	elpm	r0, Z+
    5856:	f6 91       	elpm	r31, Z
    5858:	e0 2d       	mov	r30, r0
    585a:	19 94       	eijmp

0000585c <vsprintf>:
    585c:	0f 93       	push	r16
    585e:	1f 93       	push	r17
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	cd b7       	in	r28, 0x3d	; 61
    5866:	de b7       	in	r29, 0x3e	; 62
    5868:	2e 97       	sbiw	r28, 0x0e	; 14
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	8c 01       	movw	r16, r24
    5876:	86 e0       	ldi	r24, 0x06	; 6
    5878:	8c 83       	std	Y+4, r24	; 0x04
    587a:	1a 83       	std	Y+2, r17	; 0x02
    587c:	09 83       	std	Y+1, r16	; 0x01
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	9f e7       	ldi	r25, 0x7F	; 127
    5882:	9e 83       	std	Y+6, r25	; 0x06
    5884:	8d 83       	std	Y+5, r24	; 0x05
    5886:	ce 01       	movw	r24, r28
    5888:	01 96       	adiw	r24, 0x01	; 1
    588a:	10 d0       	rcall	.+32     	; 0x58ac <vfprintf>
    588c:	ef 81       	ldd	r30, Y+7	; 0x07
    588e:	f8 85       	ldd	r31, Y+8	; 0x08
    5890:	e0 0f       	add	r30, r16
    5892:	f1 1f       	adc	r31, r17
    5894:	10 82       	st	Z, r1
    5896:	2e 96       	adiw	r28, 0x0e	; 14
    5898:	0f b6       	in	r0, 0x3f	; 63
    589a:	f8 94       	cli
    589c:	de bf       	out	0x3e, r29	; 62
    589e:	0f be       	out	0x3f, r0	; 63
    58a0:	cd bf       	out	0x3d, r28	; 61
    58a2:	df 91       	pop	r29
    58a4:	cf 91       	pop	r28
    58a6:	1f 91       	pop	r17
    58a8:	0f 91       	pop	r16
    58aa:	08 95       	ret

000058ac <vfprintf>:
    58ac:	2f 92       	push	r2
    58ae:	3f 92       	push	r3
    58b0:	4f 92       	push	r4
    58b2:	5f 92       	push	r5
    58b4:	6f 92       	push	r6
    58b6:	7f 92       	push	r7
    58b8:	8f 92       	push	r8
    58ba:	9f 92       	push	r9
    58bc:	af 92       	push	r10
    58be:	bf 92       	push	r11
    58c0:	cf 92       	push	r12
    58c2:	df 92       	push	r13
    58c4:	ef 92       	push	r14
    58c6:	ff 92       	push	r15
    58c8:	0f 93       	push	r16
    58ca:	1f 93       	push	r17
    58cc:	cf 93       	push	r28
    58ce:	df 93       	push	r29
    58d0:	cd b7       	in	r28, 0x3d	; 61
    58d2:	de b7       	in	r29, 0x3e	; 62
    58d4:	2c 97       	sbiw	r28, 0x0c	; 12
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	f8 94       	cli
    58da:	de bf       	out	0x3e, r29	; 62
    58dc:	0f be       	out	0x3f, r0	; 63
    58de:	cd bf       	out	0x3d, r28	; 61
    58e0:	7c 01       	movw	r14, r24
    58e2:	6b 01       	movw	r12, r22
    58e4:	8a 01       	movw	r16, r20
    58e6:	fc 01       	movw	r30, r24
    58e8:	17 82       	std	Z+7, r1	; 0x07
    58ea:	16 82       	std	Z+6, r1	; 0x06
    58ec:	83 81       	ldd	r24, Z+3	; 0x03
    58ee:	81 ff       	sbrs	r24, 1
    58f0:	b0 c1       	rjmp	.+864    	; 0x5c52 <vfprintf+0x3a6>
    58f2:	ce 01       	movw	r24, r28
    58f4:	01 96       	adiw	r24, 0x01	; 1
    58f6:	4c 01       	movw	r8, r24
    58f8:	f7 01       	movw	r30, r14
    58fa:	93 81       	ldd	r25, Z+3	; 0x03
    58fc:	f6 01       	movw	r30, r12
    58fe:	93 fd       	sbrc	r25, 3
    5900:	85 91       	lpm	r24, Z+
    5902:	93 ff       	sbrs	r25, 3
    5904:	81 91       	ld	r24, Z+
    5906:	6f 01       	movw	r12, r30
    5908:	88 23       	and	r24, r24
    590a:	09 f4       	brne	.+2      	; 0x590e <vfprintf+0x62>
    590c:	9e c1       	rjmp	.+828    	; 0x5c4a <vfprintf+0x39e>
    590e:	85 32       	cpi	r24, 0x25	; 37
    5910:	39 f4       	brne	.+14     	; 0x5920 <vfprintf+0x74>
    5912:	93 fd       	sbrc	r25, 3
    5914:	85 91       	lpm	r24, Z+
    5916:	93 ff       	sbrs	r25, 3
    5918:	81 91       	ld	r24, Z+
    591a:	6f 01       	movw	r12, r30
    591c:	85 32       	cpi	r24, 0x25	; 37
    591e:	21 f4       	brne	.+8      	; 0x5928 <vfprintf+0x7c>
    5920:	b7 01       	movw	r22, r14
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	c7 d1       	rcall	.+910    	; 0x5cb4 <fputc>
    5926:	e8 cf       	rjmp	.-48     	; 0x58f8 <vfprintf+0x4c>
    5928:	51 2c       	mov	r5, r1
    592a:	31 2c       	mov	r3, r1
    592c:	20 e0       	ldi	r18, 0x00	; 0
    592e:	20 32       	cpi	r18, 0x20	; 32
    5930:	a0 f4       	brcc	.+40     	; 0x595a <vfprintf+0xae>
    5932:	8b 32       	cpi	r24, 0x2B	; 43
    5934:	69 f0       	breq	.+26     	; 0x5950 <vfprintf+0xa4>
    5936:	30 f4       	brcc	.+12     	; 0x5944 <vfprintf+0x98>
    5938:	80 32       	cpi	r24, 0x20	; 32
    593a:	59 f0       	breq	.+22     	; 0x5952 <vfprintf+0xa6>
    593c:	83 32       	cpi	r24, 0x23	; 35
    593e:	69 f4       	brne	.+26     	; 0x595a <vfprintf+0xae>
    5940:	20 61       	ori	r18, 0x10	; 16
    5942:	2c c0       	rjmp	.+88     	; 0x599c <vfprintf+0xf0>
    5944:	8d 32       	cpi	r24, 0x2D	; 45
    5946:	39 f0       	breq	.+14     	; 0x5956 <vfprintf+0xaa>
    5948:	80 33       	cpi	r24, 0x30	; 48
    594a:	39 f4       	brne	.+14     	; 0x595a <vfprintf+0xae>
    594c:	21 60       	ori	r18, 0x01	; 1
    594e:	26 c0       	rjmp	.+76     	; 0x599c <vfprintf+0xf0>
    5950:	22 60       	ori	r18, 0x02	; 2
    5952:	24 60       	ori	r18, 0x04	; 4
    5954:	23 c0       	rjmp	.+70     	; 0x599c <vfprintf+0xf0>
    5956:	28 60       	ori	r18, 0x08	; 8
    5958:	21 c0       	rjmp	.+66     	; 0x599c <vfprintf+0xf0>
    595a:	27 fd       	sbrc	r18, 7
    595c:	27 c0       	rjmp	.+78     	; 0x59ac <vfprintf+0x100>
    595e:	30 ed       	ldi	r19, 0xD0	; 208
    5960:	38 0f       	add	r19, r24
    5962:	3a 30       	cpi	r19, 0x0A	; 10
    5964:	78 f4       	brcc	.+30     	; 0x5984 <vfprintf+0xd8>
    5966:	26 ff       	sbrs	r18, 6
    5968:	06 c0       	rjmp	.+12     	; 0x5976 <vfprintf+0xca>
    596a:	fa e0       	ldi	r31, 0x0A	; 10
    596c:	5f 9e       	mul	r5, r31
    596e:	30 0d       	add	r19, r0
    5970:	11 24       	eor	r1, r1
    5972:	53 2e       	mov	r5, r19
    5974:	13 c0       	rjmp	.+38     	; 0x599c <vfprintf+0xf0>
    5976:	8a e0       	ldi	r24, 0x0A	; 10
    5978:	38 9e       	mul	r3, r24
    597a:	30 0d       	add	r19, r0
    597c:	11 24       	eor	r1, r1
    597e:	33 2e       	mov	r3, r19
    5980:	20 62       	ori	r18, 0x20	; 32
    5982:	0c c0       	rjmp	.+24     	; 0x599c <vfprintf+0xf0>
    5984:	8e 32       	cpi	r24, 0x2E	; 46
    5986:	21 f4       	brne	.+8      	; 0x5990 <vfprintf+0xe4>
    5988:	26 fd       	sbrc	r18, 6
    598a:	5f c1       	rjmp	.+702    	; 0x5c4a <vfprintf+0x39e>
    598c:	20 64       	ori	r18, 0x40	; 64
    598e:	06 c0       	rjmp	.+12     	; 0x599c <vfprintf+0xf0>
    5990:	8c 36       	cpi	r24, 0x6C	; 108
    5992:	11 f4       	brne	.+4      	; 0x5998 <vfprintf+0xec>
    5994:	20 68       	ori	r18, 0x80	; 128
    5996:	02 c0       	rjmp	.+4      	; 0x599c <vfprintf+0xf0>
    5998:	88 36       	cpi	r24, 0x68	; 104
    599a:	41 f4       	brne	.+16     	; 0x59ac <vfprintf+0x100>
    599c:	f6 01       	movw	r30, r12
    599e:	93 fd       	sbrc	r25, 3
    59a0:	85 91       	lpm	r24, Z+
    59a2:	93 ff       	sbrs	r25, 3
    59a4:	81 91       	ld	r24, Z+
    59a6:	6f 01       	movw	r12, r30
    59a8:	81 11       	cpse	r24, r1
    59aa:	c1 cf       	rjmp	.-126    	; 0x592e <vfprintf+0x82>
    59ac:	98 2f       	mov	r25, r24
    59ae:	9f 7d       	andi	r25, 0xDF	; 223
    59b0:	95 54       	subi	r25, 0x45	; 69
    59b2:	93 30       	cpi	r25, 0x03	; 3
    59b4:	28 f4       	brcc	.+10     	; 0x59c0 <vfprintf+0x114>
    59b6:	0c 5f       	subi	r16, 0xFC	; 252
    59b8:	1f 4f       	sbci	r17, 0xFF	; 255
    59ba:	ff e3       	ldi	r31, 0x3F	; 63
    59bc:	f9 83       	std	Y+1, r31	; 0x01
    59be:	0d c0       	rjmp	.+26     	; 0x59da <vfprintf+0x12e>
    59c0:	83 36       	cpi	r24, 0x63	; 99
    59c2:	31 f0       	breq	.+12     	; 0x59d0 <vfprintf+0x124>
    59c4:	83 37       	cpi	r24, 0x73	; 115
    59c6:	71 f0       	breq	.+28     	; 0x59e4 <vfprintf+0x138>
    59c8:	83 35       	cpi	r24, 0x53	; 83
    59ca:	09 f0       	breq	.+2      	; 0x59ce <vfprintf+0x122>
    59cc:	57 c0       	rjmp	.+174    	; 0x5a7c <vfprintf+0x1d0>
    59ce:	21 c0       	rjmp	.+66     	; 0x5a12 <vfprintf+0x166>
    59d0:	f8 01       	movw	r30, r16
    59d2:	80 81       	ld	r24, Z
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	0e 5f       	subi	r16, 0xFE	; 254
    59d8:	1f 4f       	sbci	r17, 0xFF	; 255
    59da:	44 24       	eor	r4, r4
    59dc:	43 94       	inc	r4
    59de:	51 2c       	mov	r5, r1
    59e0:	54 01       	movw	r10, r8
    59e2:	14 c0       	rjmp	.+40     	; 0x5a0c <vfprintf+0x160>
    59e4:	38 01       	movw	r6, r16
    59e6:	f2 e0       	ldi	r31, 0x02	; 2
    59e8:	6f 0e       	add	r6, r31
    59ea:	71 1c       	adc	r7, r1
    59ec:	f8 01       	movw	r30, r16
    59ee:	a0 80       	ld	r10, Z
    59f0:	b1 80       	ldd	r11, Z+1	; 0x01
    59f2:	26 ff       	sbrs	r18, 6
    59f4:	03 c0       	rjmp	.+6      	; 0x59fc <vfprintf+0x150>
    59f6:	65 2d       	mov	r22, r5
    59f8:	70 e0       	ldi	r23, 0x00	; 0
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <vfprintf+0x154>
    59fc:	6f ef       	ldi	r22, 0xFF	; 255
    59fe:	7f ef       	ldi	r23, 0xFF	; 255
    5a00:	c5 01       	movw	r24, r10
    5a02:	2c 87       	std	Y+12, r18	; 0x0c
    5a04:	4c d1       	rcall	.+664    	; 0x5c9e <strnlen>
    5a06:	2c 01       	movw	r4, r24
    5a08:	83 01       	movw	r16, r6
    5a0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a0c:	2f 77       	andi	r18, 0x7F	; 127
    5a0e:	22 2e       	mov	r2, r18
    5a10:	16 c0       	rjmp	.+44     	; 0x5a3e <vfprintf+0x192>
    5a12:	38 01       	movw	r6, r16
    5a14:	f2 e0       	ldi	r31, 0x02	; 2
    5a16:	6f 0e       	add	r6, r31
    5a18:	71 1c       	adc	r7, r1
    5a1a:	f8 01       	movw	r30, r16
    5a1c:	a0 80       	ld	r10, Z
    5a1e:	b1 80       	ldd	r11, Z+1	; 0x01
    5a20:	26 ff       	sbrs	r18, 6
    5a22:	03 c0       	rjmp	.+6      	; 0x5a2a <vfprintf+0x17e>
    5a24:	65 2d       	mov	r22, r5
    5a26:	70 e0       	ldi	r23, 0x00	; 0
    5a28:	02 c0       	rjmp	.+4      	; 0x5a2e <vfprintf+0x182>
    5a2a:	6f ef       	ldi	r22, 0xFF	; 255
    5a2c:	7f ef       	ldi	r23, 0xFF	; 255
    5a2e:	c5 01       	movw	r24, r10
    5a30:	2c 87       	std	Y+12, r18	; 0x0c
    5a32:	2a d1       	rcall	.+596    	; 0x5c88 <strnlen_P>
    5a34:	2c 01       	movw	r4, r24
    5a36:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a38:	20 68       	ori	r18, 0x80	; 128
    5a3a:	22 2e       	mov	r2, r18
    5a3c:	83 01       	movw	r16, r6
    5a3e:	23 fc       	sbrc	r2, 3
    5a40:	19 c0       	rjmp	.+50     	; 0x5a74 <vfprintf+0x1c8>
    5a42:	83 2d       	mov	r24, r3
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	48 16       	cp	r4, r24
    5a48:	59 06       	cpc	r5, r25
    5a4a:	a0 f4       	brcc	.+40     	; 0x5a74 <vfprintf+0x1c8>
    5a4c:	b7 01       	movw	r22, r14
    5a4e:	80 e2       	ldi	r24, 0x20	; 32
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	30 d1       	rcall	.+608    	; 0x5cb4 <fputc>
    5a54:	3a 94       	dec	r3
    5a56:	f5 cf       	rjmp	.-22     	; 0x5a42 <vfprintf+0x196>
    5a58:	f5 01       	movw	r30, r10
    5a5a:	27 fc       	sbrc	r2, 7
    5a5c:	85 91       	lpm	r24, Z+
    5a5e:	27 fe       	sbrs	r2, 7
    5a60:	81 91       	ld	r24, Z+
    5a62:	5f 01       	movw	r10, r30
    5a64:	b7 01       	movw	r22, r14
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	25 d1       	rcall	.+586    	; 0x5cb4 <fputc>
    5a6a:	31 10       	cpse	r3, r1
    5a6c:	3a 94       	dec	r3
    5a6e:	f1 e0       	ldi	r31, 0x01	; 1
    5a70:	4f 1a       	sub	r4, r31
    5a72:	51 08       	sbc	r5, r1
    5a74:	41 14       	cp	r4, r1
    5a76:	51 04       	cpc	r5, r1
    5a78:	79 f7       	brne	.-34     	; 0x5a58 <vfprintf+0x1ac>
    5a7a:	de c0       	rjmp	.+444    	; 0x5c38 <vfprintf+0x38c>
    5a7c:	84 36       	cpi	r24, 0x64	; 100
    5a7e:	11 f0       	breq	.+4      	; 0x5a84 <vfprintf+0x1d8>
    5a80:	89 36       	cpi	r24, 0x69	; 105
    5a82:	31 f5       	brne	.+76     	; 0x5ad0 <vfprintf+0x224>
    5a84:	f8 01       	movw	r30, r16
    5a86:	27 ff       	sbrs	r18, 7
    5a88:	07 c0       	rjmp	.+14     	; 0x5a98 <vfprintf+0x1ec>
    5a8a:	60 81       	ld	r22, Z
    5a8c:	71 81       	ldd	r23, Z+1	; 0x01
    5a8e:	82 81       	ldd	r24, Z+2	; 0x02
    5a90:	93 81       	ldd	r25, Z+3	; 0x03
    5a92:	0c 5f       	subi	r16, 0xFC	; 252
    5a94:	1f 4f       	sbci	r17, 0xFF	; 255
    5a96:	08 c0       	rjmp	.+16     	; 0x5aa8 <vfprintf+0x1fc>
    5a98:	60 81       	ld	r22, Z
    5a9a:	71 81       	ldd	r23, Z+1	; 0x01
    5a9c:	88 27       	eor	r24, r24
    5a9e:	77 fd       	sbrc	r23, 7
    5aa0:	80 95       	com	r24
    5aa2:	98 2f       	mov	r25, r24
    5aa4:	0e 5f       	subi	r16, 0xFE	; 254
    5aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa8:	2f 76       	andi	r18, 0x6F	; 111
    5aaa:	b2 2e       	mov	r11, r18
    5aac:	97 ff       	sbrs	r25, 7
    5aae:	09 c0       	rjmp	.+18     	; 0x5ac2 <vfprintf+0x216>
    5ab0:	90 95       	com	r25
    5ab2:	80 95       	com	r24
    5ab4:	70 95       	com	r23
    5ab6:	61 95       	neg	r22
    5ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aba:	8f 4f       	sbci	r24, 0xFF	; 255
    5abc:	9f 4f       	sbci	r25, 0xFF	; 255
    5abe:	20 68       	ori	r18, 0x80	; 128
    5ac0:	b2 2e       	mov	r11, r18
    5ac2:	2a e0       	ldi	r18, 0x0A	; 10
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	a4 01       	movw	r20, r8
    5ac8:	27 d1       	rcall	.+590    	; 0x5d18 <__ultoa_invert>
    5aca:	a8 2e       	mov	r10, r24
    5acc:	a8 18       	sub	r10, r8
    5ace:	43 c0       	rjmp	.+134    	; 0x5b56 <vfprintf+0x2aa>
    5ad0:	85 37       	cpi	r24, 0x75	; 117
    5ad2:	29 f4       	brne	.+10     	; 0x5ade <vfprintf+0x232>
    5ad4:	2f 7e       	andi	r18, 0xEF	; 239
    5ad6:	b2 2e       	mov	r11, r18
    5ad8:	2a e0       	ldi	r18, 0x0A	; 10
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	25 c0       	rjmp	.+74     	; 0x5b28 <vfprintf+0x27c>
    5ade:	f2 2f       	mov	r31, r18
    5ae0:	f9 7f       	andi	r31, 0xF9	; 249
    5ae2:	bf 2e       	mov	r11, r31
    5ae4:	8f 36       	cpi	r24, 0x6F	; 111
    5ae6:	c1 f0       	breq	.+48     	; 0x5b18 <vfprintf+0x26c>
    5ae8:	18 f4       	brcc	.+6      	; 0x5af0 <vfprintf+0x244>
    5aea:	88 35       	cpi	r24, 0x58	; 88
    5aec:	79 f0       	breq	.+30     	; 0x5b0c <vfprintf+0x260>
    5aee:	ad c0       	rjmp	.+346    	; 0x5c4a <vfprintf+0x39e>
    5af0:	80 37       	cpi	r24, 0x70	; 112
    5af2:	19 f0       	breq	.+6      	; 0x5afa <vfprintf+0x24e>
    5af4:	88 37       	cpi	r24, 0x78	; 120
    5af6:	21 f0       	breq	.+8      	; 0x5b00 <vfprintf+0x254>
    5af8:	a8 c0       	rjmp	.+336    	; 0x5c4a <vfprintf+0x39e>
    5afa:	2f 2f       	mov	r18, r31
    5afc:	20 61       	ori	r18, 0x10	; 16
    5afe:	b2 2e       	mov	r11, r18
    5b00:	b4 fe       	sbrs	r11, 4
    5b02:	0d c0       	rjmp	.+26     	; 0x5b1e <vfprintf+0x272>
    5b04:	8b 2d       	mov	r24, r11
    5b06:	84 60       	ori	r24, 0x04	; 4
    5b08:	b8 2e       	mov	r11, r24
    5b0a:	09 c0       	rjmp	.+18     	; 0x5b1e <vfprintf+0x272>
    5b0c:	24 ff       	sbrs	r18, 4
    5b0e:	0a c0       	rjmp	.+20     	; 0x5b24 <vfprintf+0x278>
    5b10:	9f 2f       	mov	r25, r31
    5b12:	96 60       	ori	r25, 0x06	; 6
    5b14:	b9 2e       	mov	r11, r25
    5b16:	06 c0       	rjmp	.+12     	; 0x5b24 <vfprintf+0x278>
    5b18:	28 e0       	ldi	r18, 0x08	; 8
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	05 c0       	rjmp	.+10     	; 0x5b28 <vfprintf+0x27c>
    5b1e:	20 e1       	ldi	r18, 0x10	; 16
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <vfprintf+0x27c>
    5b24:	20 e1       	ldi	r18, 0x10	; 16
    5b26:	32 e0       	ldi	r19, 0x02	; 2
    5b28:	f8 01       	movw	r30, r16
    5b2a:	b7 fe       	sbrs	r11, 7
    5b2c:	07 c0       	rjmp	.+14     	; 0x5b3c <vfprintf+0x290>
    5b2e:	60 81       	ld	r22, Z
    5b30:	71 81       	ldd	r23, Z+1	; 0x01
    5b32:	82 81       	ldd	r24, Z+2	; 0x02
    5b34:	93 81       	ldd	r25, Z+3	; 0x03
    5b36:	0c 5f       	subi	r16, 0xFC	; 252
    5b38:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <vfprintf+0x29c>
    5b3c:	60 81       	ld	r22, Z
    5b3e:	71 81       	ldd	r23, Z+1	; 0x01
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	0e 5f       	subi	r16, 0xFE	; 254
    5b46:	1f 4f       	sbci	r17, 0xFF	; 255
    5b48:	a4 01       	movw	r20, r8
    5b4a:	e6 d0       	rcall	.+460    	; 0x5d18 <__ultoa_invert>
    5b4c:	a8 2e       	mov	r10, r24
    5b4e:	a8 18       	sub	r10, r8
    5b50:	fb 2d       	mov	r31, r11
    5b52:	ff 77       	andi	r31, 0x7F	; 127
    5b54:	bf 2e       	mov	r11, r31
    5b56:	b6 fe       	sbrs	r11, 6
    5b58:	0b c0       	rjmp	.+22     	; 0x5b70 <vfprintf+0x2c4>
    5b5a:	2b 2d       	mov	r18, r11
    5b5c:	2e 7f       	andi	r18, 0xFE	; 254
    5b5e:	a5 14       	cp	r10, r5
    5b60:	50 f4       	brcc	.+20     	; 0x5b76 <vfprintf+0x2ca>
    5b62:	b4 fe       	sbrs	r11, 4
    5b64:	0a c0       	rjmp	.+20     	; 0x5b7a <vfprintf+0x2ce>
    5b66:	b2 fc       	sbrc	r11, 2
    5b68:	08 c0       	rjmp	.+16     	; 0x5b7a <vfprintf+0x2ce>
    5b6a:	2b 2d       	mov	r18, r11
    5b6c:	2e 7e       	andi	r18, 0xEE	; 238
    5b6e:	05 c0       	rjmp	.+10     	; 0x5b7a <vfprintf+0x2ce>
    5b70:	7a 2c       	mov	r7, r10
    5b72:	2b 2d       	mov	r18, r11
    5b74:	03 c0       	rjmp	.+6      	; 0x5b7c <vfprintf+0x2d0>
    5b76:	7a 2c       	mov	r7, r10
    5b78:	01 c0       	rjmp	.+2      	; 0x5b7c <vfprintf+0x2d0>
    5b7a:	75 2c       	mov	r7, r5
    5b7c:	24 ff       	sbrs	r18, 4
    5b7e:	0d c0       	rjmp	.+26     	; 0x5b9a <vfprintf+0x2ee>
    5b80:	fe 01       	movw	r30, r28
    5b82:	ea 0d       	add	r30, r10
    5b84:	f1 1d       	adc	r31, r1
    5b86:	80 81       	ld	r24, Z
    5b88:	80 33       	cpi	r24, 0x30	; 48
    5b8a:	11 f4       	brne	.+4      	; 0x5b90 <vfprintf+0x2e4>
    5b8c:	29 7e       	andi	r18, 0xE9	; 233
    5b8e:	09 c0       	rjmp	.+18     	; 0x5ba2 <vfprintf+0x2f6>
    5b90:	22 ff       	sbrs	r18, 2
    5b92:	06 c0       	rjmp	.+12     	; 0x5ba0 <vfprintf+0x2f4>
    5b94:	73 94       	inc	r7
    5b96:	73 94       	inc	r7
    5b98:	04 c0       	rjmp	.+8      	; 0x5ba2 <vfprintf+0x2f6>
    5b9a:	82 2f       	mov	r24, r18
    5b9c:	86 78       	andi	r24, 0x86	; 134
    5b9e:	09 f0       	breq	.+2      	; 0x5ba2 <vfprintf+0x2f6>
    5ba0:	73 94       	inc	r7
    5ba2:	23 fd       	sbrc	r18, 3
    5ba4:	12 c0       	rjmp	.+36     	; 0x5bca <vfprintf+0x31e>
    5ba6:	20 ff       	sbrs	r18, 0
    5ba8:	06 c0       	rjmp	.+12     	; 0x5bb6 <vfprintf+0x30a>
    5baa:	5a 2c       	mov	r5, r10
    5bac:	73 14       	cp	r7, r3
    5bae:	18 f4       	brcc	.+6      	; 0x5bb6 <vfprintf+0x30a>
    5bb0:	53 0c       	add	r5, r3
    5bb2:	57 18       	sub	r5, r7
    5bb4:	73 2c       	mov	r7, r3
    5bb6:	73 14       	cp	r7, r3
    5bb8:	60 f4       	brcc	.+24     	; 0x5bd2 <vfprintf+0x326>
    5bba:	b7 01       	movw	r22, r14
    5bbc:	80 e2       	ldi	r24, 0x20	; 32
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	2c 87       	std	Y+12, r18	; 0x0c
    5bc2:	78 d0       	rcall	.+240    	; 0x5cb4 <fputc>
    5bc4:	73 94       	inc	r7
    5bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bc8:	f6 cf       	rjmp	.-20     	; 0x5bb6 <vfprintf+0x30a>
    5bca:	73 14       	cp	r7, r3
    5bcc:	10 f4       	brcc	.+4      	; 0x5bd2 <vfprintf+0x326>
    5bce:	37 18       	sub	r3, r7
    5bd0:	01 c0       	rjmp	.+2      	; 0x5bd4 <vfprintf+0x328>
    5bd2:	31 2c       	mov	r3, r1
    5bd4:	24 ff       	sbrs	r18, 4
    5bd6:	11 c0       	rjmp	.+34     	; 0x5bfa <vfprintf+0x34e>
    5bd8:	b7 01       	movw	r22, r14
    5bda:	80 e3       	ldi	r24, 0x30	; 48
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	2c 87       	std	Y+12, r18	; 0x0c
    5be0:	69 d0       	rcall	.+210    	; 0x5cb4 <fputc>
    5be2:	2c 85       	ldd	r18, Y+12	; 0x0c
    5be4:	22 ff       	sbrs	r18, 2
    5be6:	16 c0       	rjmp	.+44     	; 0x5c14 <vfprintf+0x368>
    5be8:	21 ff       	sbrs	r18, 1
    5bea:	03 c0       	rjmp	.+6      	; 0x5bf2 <vfprintf+0x346>
    5bec:	88 e5       	ldi	r24, 0x58	; 88
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	02 c0       	rjmp	.+4      	; 0x5bf6 <vfprintf+0x34a>
    5bf2:	88 e7       	ldi	r24, 0x78	; 120
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	b7 01       	movw	r22, r14
    5bf8:	0c c0       	rjmp	.+24     	; 0x5c12 <vfprintf+0x366>
    5bfa:	82 2f       	mov	r24, r18
    5bfc:	86 78       	andi	r24, 0x86	; 134
    5bfe:	51 f0       	breq	.+20     	; 0x5c14 <vfprintf+0x368>
    5c00:	21 fd       	sbrc	r18, 1
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <vfprintf+0x35c>
    5c04:	80 e2       	ldi	r24, 0x20	; 32
    5c06:	01 c0       	rjmp	.+2      	; 0x5c0a <vfprintf+0x35e>
    5c08:	8b e2       	ldi	r24, 0x2B	; 43
    5c0a:	27 fd       	sbrc	r18, 7
    5c0c:	8d e2       	ldi	r24, 0x2D	; 45
    5c0e:	b7 01       	movw	r22, r14
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	50 d0       	rcall	.+160    	; 0x5cb4 <fputc>
    5c14:	a5 14       	cp	r10, r5
    5c16:	30 f4       	brcc	.+12     	; 0x5c24 <vfprintf+0x378>
    5c18:	b7 01       	movw	r22, r14
    5c1a:	80 e3       	ldi	r24, 0x30	; 48
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	4a d0       	rcall	.+148    	; 0x5cb4 <fputc>
    5c20:	5a 94       	dec	r5
    5c22:	f8 cf       	rjmp	.-16     	; 0x5c14 <vfprintf+0x368>
    5c24:	aa 94       	dec	r10
    5c26:	f4 01       	movw	r30, r8
    5c28:	ea 0d       	add	r30, r10
    5c2a:	f1 1d       	adc	r31, r1
    5c2c:	80 81       	ld	r24, Z
    5c2e:	b7 01       	movw	r22, r14
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	40 d0       	rcall	.+128    	; 0x5cb4 <fputc>
    5c34:	a1 10       	cpse	r10, r1
    5c36:	f6 cf       	rjmp	.-20     	; 0x5c24 <vfprintf+0x378>
    5c38:	33 20       	and	r3, r3
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <vfprintf+0x392>
    5c3c:	5d ce       	rjmp	.-838    	; 0x58f8 <vfprintf+0x4c>
    5c3e:	b7 01       	movw	r22, r14
    5c40:	80 e2       	ldi	r24, 0x20	; 32
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	37 d0       	rcall	.+110    	; 0x5cb4 <fputc>
    5c46:	3a 94       	dec	r3
    5c48:	f7 cf       	rjmp	.-18     	; 0x5c38 <vfprintf+0x38c>
    5c4a:	f7 01       	movw	r30, r14
    5c4c:	86 81       	ldd	r24, Z+6	; 0x06
    5c4e:	97 81       	ldd	r25, Z+7	; 0x07
    5c50:	02 c0       	rjmp	.+4      	; 0x5c56 <vfprintf+0x3aa>
    5c52:	8f ef       	ldi	r24, 0xFF	; 255
    5c54:	9f ef       	ldi	r25, 0xFF	; 255
    5c56:	2c 96       	adiw	r28, 0x0c	; 12
    5c58:	0f b6       	in	r0, 0x3f	; 63
    5c5a:	f8 94       	cli
    5c5c:	de bf       	out	0x3e, r29	; 62
    5c5e:	0f be       	out	0x3f, r0	; 63
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	ff 90       	pop	r15
    5c6c:	ef 90       	pop	r14
    5c6e:	df 90       	pop	r13
    5c70:	cf 90       	pop	r12
    5c72:	bf 90       	pop	r11
    5c74:	af 90       	pop	r10
    5c76:	9f 90       	pop	r9
    5c78:	8f 90       	pop	r8
    5c7a:	7f 90       	pop	r7
    5c7c:	6f 90       	pop	r6
    5c7e:	5f 90       	pop	r5
    5c80:	4f 90       	pop	r4
    5c82:	3f 90       	pop	r3
    5c84:	2f 90       	pop	r2
    5c86:	08 95       	ret

00005c88 <strnlen_P>:
    5c88:	fc 01       	movw	r30, r24
    5c8a:	05 90       	lpm	r0, Z+
    5c8c:	61 50       	subi	r22, 0x01	; 1
    5c8e:	70 40       	sbci	r23, 0x00	; 0
    5c90:	01 10       	cpse	r0, r1
    5c92:	d8 f7       	brcc	.-10     	; 0x5c8a <strnlen_P+0x2>
    5c94:	80 95       	com	r24
    5c96:	90 95       	com	r25
    5c98:	8e 0f       	add	r24, r30
    5c9a:	9f 1f       	adc	r25, r31
    5c9c:	08 95       	ret

00005c9e <strnlen>:
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	61 50       	subi	r22, 0x01	; 1
    5ca2:	70 40       	sbci	r23, 0x00	; 0
    5ca4:	01 90       	ld	r0, Z+
    5ca6:	01 10       	cpse	r0, r1
    5ca8:	d8 f7       	brcc	.-10     	; 0x5ca0 <strnlen+0x2>
    5caa:	80 95       	com	r24
    5cac:	90 95       	com	r25
    5cae:	8e 0f       	add	r24, r30
    5cb0:	9f 1f       	adc	r25, r31
    5cb2:	08 95       	ret

00005cb4 <fputc>:
    5cb4:	0f 93       	push	r16
    5cb6:	1f 93       	push	r17
    5cb8:	cf 93       	push	r28
    5cba:	df 93       	push	r29
    5cbc:	18 2f       	mov	r17, r24
    5cbe:	09 2f       	mov	r16, r25
    5cc0:	eb 01       	movw	r28, r22
    5cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    5cc4:	81 fd       	sbrc	r24, 1
    5cc6:	03 c0       	rjmp	.+6      	; 0x5cce <fputc+0x1a>
    5cc8:	8f ef       	ldi	r24, 0xFF	; 255
    5cca:	9f ef       	ldi	r25, 0xFF	; 255
    5ccc:	20 c0       	rjmp	.+64     	; 0x5d0e <fputc+0x5a>
    5cce:	82 ff       	sbrs	r24, 2
    5cd0:	10 c0       	rjmp	.+32     	; 0x5cf2 <fputc+0x3e>
    5cd2:	4e 81       	ldd	r20, Y+6	; 0x06
    5cd4:	5f 81       	ldd	r21, Y+7	; 0x07
    5cd6:	2c 81       	ldd	r18, Y+4	; 0x04
    5cd8:	3d 81       	ldd	r19, Y+5	; 0x05
    5cda:	42 17       	cp	r20, r18
    5cdc:	53 07       	cpc	r21, r19
    5cde:	7c f4       	brge	.+30     	; 0x5cfe <fputc+0x4a>
    5ce0:	e8 81       	ld	r30, Y
    5ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ce4:	9f 01       	movw	r18, r30
    5ce6:	2f 5f       	subi	r18, 0xFF	; 255
    5ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cea:	39 83       	std	Y+1, r19	; 0x01
    5cec:	28 83       	st	Y, r18
    5cee:	10 83       	st	Z, r17
    5cf0:	06 c0       	rjmp	.+12     	; 0x5cfe <fputc+0x4a>
    5cf2:	e8 85       	ldd	r30, Y+8	; 0x08
    5cf4:	f9 85       	ldd	r31, Y+9	; 0x09
    5cf6:	81 2f       	mov	r24, r17
    5cf8:	19 95       	eicall
    5cfa:	89 2b       	or	r24, r25
    5cfc:	29 f7       	brne	.-54     	; 0x5cc8 <fputc+0x14>
    5cfe:	2e 81       	ldd	r18, Y+6	; 0x06
    5d00:	3f 81       	ldd	r19, Y+7	; 0x07
    5d02:	2f 5f       	subi	r18, 0xFF	; 255
    5d04:	3f 4f       	sbci	r19, 0xFF	; 255
    5d06:	3f 83       	std	Y+7, r19	; 0x07
    5d08:	2e 83       	std	Y+6, r18	; 0x06
    5d0a:	81 2f       	mov	r24, r17
    5d0c:	90 2f       	mov	r25, r16
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	1f 91       	pop	r17
    5d14:	0f 91       	pop	r16
    5d16:	08 95       	ret

00005d18 <__ultoa_invert>:
    5d18:	fa 01       	movw	r30, r20
    5d1a:	aa 27       	eor	r26, r26
    5d1c:	28 30       	cpi	r18, 0x08	; 8
    5d1e:	51 f1       	breq	.+84     	; 0x5d74 <__ultoa_invert+0x5c>
    5d20:	20 31       	cpi	r18, 0x10	; 16
    5d22:	81 f1       	breq	.+96     	; 0x5d84 <__ultoa_invert+0x6c>
    5d24:	e8 94       	clt
    5d26:	6f 93       	push	r22
    5d28:	6e 7f       	andi	r22, 0xFE	; 254
    5d2a:	6e 5f       	subi	r22, 0xFE	; 254
    5d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	af 4f       	sbci	r26, 0xFF	; 255
    5d34:	b1 e0       	ldi	r27, 0x01	; 1
    5d36:	3e d0       	rcall	.+124    	; 0x5db4 <__ultoa_invert+0x9c>
    5d38:	b4 e0       	ldi	r27, 0x04	; 4
    5d3a:	3c d0       	rcall	.+120    	; 0x5db4 <__ultoa_invert+0x9c>
    5d3c:	67 0f       	add	r22, r23
    5d3e:	78 1f       	adc	r23, r24
    5d40:	89 1f       	adc	r24, r25
    5d42:	9a 1f       	adc	r25, r26
    5d44:	a1 1d       	adc	r26, r1
    5d46:	68 0f       	add	r22, r24
    5d48:	79 1f       	adc	r23, r25
    5d4a:	8a 1f       	adc	r24, r26
    5d4c:	91 1d       	adc	r25, r1
    5d4e:	a1 1d       	adc	r26, r1
    5d50:	6a 0f       	add	r22, r26
    5d52:	71 1d       	adc	r23, r1
    5d54:	81 1d       	adc	r24, r1
    5d56:	91 1d       	adc	r25, r1
    5d58:	a1 1d       	adc	r26, r1
    5d5a:	20 d0       	rcall	.+64     	; 0x5d9c <__ultoa_invert+0x84>
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <__ultoa_invert+0x48>
    5d5e:	68 94       	set
    5d60:	3f 91       	pop	r19
    5d62:	2a e0       	ldi	r18, 0x0A	; 10
    5d64:	26 9f       	mul	r18, r22
    5d66:	11 24       	eor	r1, r1
    5d68:	30 19       	sub	r19, r0
    5d6a:	30 5d       	subi	r19, 0xD0	; 208
    5d6c:	31 93       	st	Z+, r19
    5d6e:	de f6       	brtc	.-74     	; 0x5d26 <__ultoa_invert+0xe>
    5d70:	cf 01       	movw	r24, r30
    5d72:	08 95       	ret
    5d74:	46 2f       	mov	r20, r22
    5d76:	47 70       	andi	r20, 0x07	; 7
    5d78:	40 5d       	subi	r20, 0xD0	; 208
    5d7a:	41 93       	st	Z+, r20
    5d7c:	b3 e0       	ldi	r27, 0x03	; 3
    5d7e:	0f d0       	rcall	.+30     	; 0x5d9e <__ultoa_invert+0x86>
    5d80:	c9 f7       	brne	.-14     	; 0x5d74 <__ultoa_invert+0x5c>
    5d82:	f6 cf       	rjmp	.-20     	; 0x5d70 <__ultoa_invert+0x58>
    5d84:	46 2f       	mov	r20, r22
    5d86:	4f 70       	andi	r20, 0x0F	; 15
    5d88:	40 5d       	subi	r20, 0xD0	; 208
    5d8a:	4a 33       	cpi	r20, 0x3A	; 58
    5d8c:	18 f0       	brcs	.+6      	; 0x5d94 <__ultoa_invert+0x7c>
    5d8e:	49 5d       	subi	r20, 0xD9	; 217
    5d90:	31 fd       	sbrc	r19, 1
    5d92:	40 52       	subi	r20, 0x20	; 32
    5d94:	41 93       	st	Z+, r20
    5d96:	02 d0       	rcall	.+4      	; 0x5d9c <__ultoa_invert+0x84>
    5d98:	a9 f7       	brne	.-22     	; 0x5d84 <__ultoa_invert+0x6c>
    5d9a:	ea cf       	rjmp	.-44     	; 0x5d70 <__ultoa_invert+0x58>
    5d9c:	b4 e0       	ldi	r27, 0x04	; 4
    5d9e:	a6 95       	lsr	r26
    5da0:	97 95       	ror	r25
    5da2:	87 95       	ror	r24
    5da4:	77 95       	ror	r23
    5da6:	67 95       	ror	r22
    5da8:	ba 95       	dec	r27
    5daa:	c9 f7       	brne	.-14     	; 0x5d9e <__ultoa_invert+0x86>
    5dac:	00 97       	sbiw	r24, 0x00	; 0
    5dae:	61 05       	cpc	r22, r1
    5db0:	71 05       	cpc	r23, r1
    5db2:	08 95       	ret
    5db4:	9b 01       	movw	r18, r22
    5db6:	ac 01       	movw	r20, r24
    5db8:	0a 2e       	mov	r0, r26
    5dba:	06 94       	lsr	r0
    5dbc:	57 95       	ror	r21
    5dbe:	47 95       	ror	r20
    5dc0:	37 95       	ror	r19
    5dc2:	27 95       	ror	r18
    5dc4:	ba 95       	dec	r27
    5dc6:	c9 f7       	brne	.-14     	; 0x5dba <__ultoa_invert+0xa2>
    5dc8:	62 0f       	add	r22, r18
    5dca:	73 1f       	adc	r23, r19
    5dcc:	84 1f       	adc	r24, r20
    5dce:	95 1f       	adc	r25, r21
    5dd0:	a0 1d       	adc	r26, r0
    5dd2:	08 95       	ret

00005dd4 <_exit>:
    5dd4:	f8 94       	cli

00005dd6 <__stop_program>:
    5dd6:	ff cf       	rjmp	.-2      	; 0x5dd6 <__stop_program>
