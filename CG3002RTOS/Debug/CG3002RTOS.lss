
CG3002RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  000051fe  00005292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000051fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f18  008002e0  008002e0  00005372  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005372  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007f8  00000000  00000000  000053ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f185  00000000  00000000  00005bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002bfb  00000000  00000000  00014d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000050b8  00000000  00000000  00017946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001cb4  00000000  00000000  0001ca00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003af4  00000000  00000000  0001e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008e97  00000000  00000000  000221a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000820  00000000  00000000  0002b03f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c2       	rjmp	.+1222   	; 0x4c8 <__ctors_end>
       2:	00 00       	nop
       4:	92 c2       	rjmp	.+1316   	; 0x52a <__bad_interrupt>
       6:	00 00       	nop
       8:	90 c2       	rjmp	.+1312   	; 0x52a <__bad_interrupt>
       a:	00 00       	nop
       c:	8e c2       	rjmp	.+1308   	; 0x52a <__bad_interrupt>
       e:	00 00       	nop
      10:	8c c2       	rjmp	.+1304   	; 0x52a <__bad_interrupt>
      12:	00 00       	nop
      14:	8a c2       	rjmp	.+1300   	; 0x52a <__bad_interrupt>
      16:	00 00       	nop
      18:	88 c2       	rjmp	.+1296   	; 0x52a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	86 c2       	rjmp	.+1292   	; 0x52a <__bad_interrupt>
      1e:	00 00       	nop
      20:	84 c2       	rjmp	.+1288   	; 0x52a <__bad_interrupt>
      22:	00 00       	nop
      24:	82 c2       	rjmp	.+1284   	; 0x52a <__bad_interrupt>
      26:	00 00       	nop
      28:	80 c2       	rjmp	.+1280   	; 0x52a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7e c2       	rjmp	.+1276   	; 0x52a <__bad_interrupt>
      2e:	00 00       	nop
      30:	7c c2       	rjmp	.+1272   	; 0x52a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__vector_13>
      38:	78 c2       	rjmp	.+1264   	; 0x52a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	76 c2       	rjmp	.+1260   	; 0x52a <__bad_interrupt>
      3e:	00 00       	nop
      40:	74 c2       	rjmp	.+1256   	; 0x52a <__bad_interrupt>
      42:	00 00       	nop
      44:	72 c2       	rjmp	.+1252   	; 0x52a <__bad_interrupt>
      46:	00 00       	nop
      48:	70 c2       	rjmp	.+1248   	; 0x52a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6e c2       	rjmp	.+1244   	; 0x52a <__bad_interrupt>
      4e:	00 00       	nop
      50:	6c c2       	rjmp	.+1240   	; 0x52a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 25 13 	jmp	0x264a	; 0x264a <__vector_21>
      58:	68 c2       	rjmp	.+1232   	; 0x52a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__vector_23>
      60:	64 c2       	rjmp	.+1224   	; 0x52a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__vector_25>
      68:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__vector_26>
      6c:	5e c2       	rjmp	.+1212   	; 0x52a <__bad_interrupt>
      6e:	00 00       	nop
      70:	5c c2       	rjmp	.+1208   	; 0x52a <__bad_interrupt>
      72:	00 00       	nop
      74:	5a c2       	rjmp	.+1204   	; 0x52a <__bad_interrupt>
      76:	00 00       	nop
      78:	58 c2       	rjmp	.+1200   	; 0x52a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	56 c2       	rjmp	.+1196   	; 0x52a <__bad_interrupt>
      7e:	00 00       	nop
      80:	54 c2       	rjmp	.+1192   	; 0x52a <__bad_interrupt>
      82:	00 00       	nop
      84:	52 c2       	rjmp	.+1188   	; 0x52a <__bad_interrupt>
      86:	00 00       	nop
      88:	50 c2       	rjmp	.+1184   	; 0x52a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4e c2       	rjmp	.+1180   	; 0x52a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bd 20 	jmp	0x417a	; 0x417a <__vector_36>
      94:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__vector_37>
      98:	48 c2       	rjmp	.+1168   	; 0x52a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__vector_39>
      a0:	44 c2       	rjmp	.+1160   	; 0x52a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	42 c2       	rjmp	.+1156   	; 0x52a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	40 c2       	rjmp	.+1152   	; 0x52a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3e c2       	rjmp	.+1148   	; 0x52a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3c c2       	rjmp	.+1144   	; 0x52a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3a c2       	rjmp	.+1140   	; 0x52a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	38 c2       	rjmp	.+1136   	; 0x52a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	36 c2       	rjmp	.+1132   	; 0x52a <__bad_interrupt>
      be:	00 00       	nop
      c0:	34 c2       	rjmp	.+1128   	; 0x52a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	32 c2       	rjmp	.+1124   	; 0x52a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	30 c2       	rjmp	.+1120   	; 0x52a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2e c2       	rjmp	.+1116   	; 0x52a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__vector_52>
      d4:	2a c2       	rjmp	.+1108   	; 0x52a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	28 c2       	rjmp	.+1104   	; 0x52a <__bad_interrupt>
      da:	00 00       	nop
      dc:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__vector_55>
      e0:	24 c2       	rjmp	.+1096   	; 0x52a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 1a       	sub	r4, r16
      e6:	43 1a       	sub	r4, r19
      e8:	43 1a       	sub	r4, r19
      ea:	43 1a       	sub	r4, r19
      ec:	43 1a       	sub	r4, r19
      ee:	43 1a       	sub	r4, r19
      f0:	43 1a       	sub	r4, r19
      f2:	43 1a       	sub	r4, r19
      f4:	5a 19       	sub	r21, r10
      f6:	43 1a       	sub	r4, r19
      f8:	43 1a       	sub	r4, r19
      fa:	43 1a       	sub	r4, r19
      fc:	43 1a       	sub	r4, r19
      fe:	43 1a       	sub	r4, r19
     100:	43 1a       	sub	r4, r19
     102:	43 1a       	sub	r4, r19
     104:	5a 19       	sub	r21, r10
     106:	43 1a       	sub	r4, r19
     108:	43 1a       	sub	r4, r19
     10a:	43 1a       	sub	r4, r19
     10c:	43 1a       	sub	r4, r19
     10e:	43 1a       	sub	r4, r19
     110:	43 1a       	sub	r4, r19
     112:	43 1a       	sub	r4, r19
     114:	62 19       	sub	r22, r2
     116:	43 1a       	sub	r4, r19
     118:	43 1a       	sub	r4, r19
     11a:	43 1a       	sub	r4, r19
     11c:	43 1a       	sub	r4, r19
     11e:	43 1a       	sub	r4, r19
     120:	43 1a       	sub	r4, r19
     122:	43 1a       	sub	r4, r19
     124:	87 19       	sub	r24, r7
     126:	43 1a       	sub	r4, r19
     128:	43 1a       	sub	r4, r19
     12a:	43 1a       	sub	r4, r19
     12c:	43 1a       	sub	r4, r19
     12e:	43 1a       	sub	r4, r19
     130:	43 1a       	sub	r4, r19
     132:	43 1a       	sub	r4, r19
     134:	62 19       	sub	r22, r2
     136:	43 1a       	sub	r4, r19
     138:	43 1a       	sub	r4, r19
     13a:	43 1a       	sub	r4, r19
     13c:	43 1a       	sub	r4, r19
     13e:	43 1a       	sub	r4, r19
     140:	43 1a       	sub	r4, r19
     142:	43 1a       	sub	r4, r19
     144:	8c 19       	sub	r24, r12
     146:	43 1a       	sub	r4, r19
     148:	43 1a       	sub	r4, r19
     14a:	43 1a       	sub	r4, r19
     14c:	43 1a       	sub	r4, r19
     14e:	43 1a       	sub	r4, r19
     150:	43 1a       	sub	r4, r19
     152:	43 1a       	sub	r4, r19
     154:	91 19       	sub	r25, r1
     156:	43 1a       	sub	r4, r19
     158:	43 1a       	sub	r4, r19
     15a:	43 1a       	sub	r4, r19
     15c:	43 1a       	sub	r4, r19
     15e:	43 1a       	sub	r4, r19
     160:	43 1a       	sub	r4, r19
     162:	43 1a       	sub	r4, r19
     164:	a2 19       	sub	r26, r2
     166:	43 1a       	sub	r4, r19
     168:	43 1a       	sub	r4, r19
     16a:	43 1a       	sub	r4, r19
     16c:	43 1a       	sub	r4, r19
     16e:	43 1a       	sub	r4, r19
     170:	43 1a       	sub	r4, r19
     172:	43 1a       	sub	r4, r19
     174:	cb 19       	sub	r28, r11
     176:	43 1a       	sub	r4, r19
     178:	43 1a       	sub	r4, r19
     17a:	43 1a       	sub	r4, r19
     17c:	43 1a       	sub	r4, r19
     17e:	43 1a       	sub	r4, r19
     180:	43 1a       	sub	r4, r19
     182:	43 1a       	sub	r4, r19
     184:	96 19       	sub	r25, r6
     186:	43 1a       	sub	r4, r19
     188:	43 1a       	sub	r4, r19
     18a:	43 1a       	sub	r4, r19
     18c:	43 1a       	sub	r4, r19
     18e:	43 1a       	sub	r4, r19
     190:	43 1a       	sub	r4, r19
     192:	43 1a       	sub	r4, r19
     194:	b0 19       	sub	r27, r0
     196:	43 1a       	sub	r4, r19
     198:	43 1a       	sub	r4, r19
     19a:	43 1a       	sub	r4, r19
     19c:	43 1a       	sub	r4, r19
     19e:	43 1a       	sub	r4, r19
     1a0:	43 1a       	sub	r4, r19
     1a2:	43 1a       	sub	r4, r19
     1a4:	cd 19       	sub	r28, r13
     1a6:	43 1a       	sub	r4, r19
     1a8:	43 1a       	sub	r4, r19
     1aa:	43 1a       	sub	r4, r19
     1ac:	43 1a       	sub	r4, r19
     1ae:	43 1a       	sub	r4, r19
     1b0:	43 1a       	sub	r4, r19
     1b2:	43 1a       	sub	r4, r19
     1b4:	cd 19       	sub	r28, r13
     1b6:	43 1a       	sub	r4, r19
     1b8:	43 1a       	sub	r4, r19
     1ba:	43 1a       	sub	r4, r19
     1bc:	43 1a       	sub	r4, r19
     1be:	43 1a       	sub	r4, r19
     1c0:	43 1a       	sub	r4, r19
     1c2:	43 1a       	sub	r4, r19
     1c4:	cd 19       	sub	r28, r13
     1c6:	43 1a       	sub	r4, r19
     1c8:	43 1a       	sub	r4, r19
     1ca:	43 1a       	sub	r4, r19
     1cc:	43 1a       	sub	r4, r19
     1ce:	43 1a       	sub	r4, r19
     1d0:	43 1a       	sub	r4, r19
     1d2:	43 1a       	sub	r4, r19
     1d4:	cd 19       	sub	r28, r13
     1d6:	43 1a       	sub	r4, r19
     1d8:	43 1a       	sub	r4, r19
     1da:	43 1a       	sub	r4, r19
     1dc:	43 1a       	sub	r4, r19
     1de:	43 1a       	sub	r4, r19
     1e0:	43 1a       	sub	r4, r19
     1e2:	43 1a       	sub	r4, r19
     1e4:	d6 19       	sub	r29, r6
     1e6:	43 1a       	sub	r4, r19
     1e8:	43 1a       	sub	r4, r19
     1ea:	43 1a       	sub	r4, r19
     1ec:	43 1a       	sub	r4, r19
     1ee:	43 1a       	sub	r4, r19
     1f0:	43 1a       	sub	r4, r19
     1f2:	43 1a       	sub	r4, r19
     1f4:	07 1a       	sub	r0, r23
     1f6:	43 1a       	sub	r4, r19
     1f8:	43 1a       	sub	r4, r19
     1fa:	43 1a       	sub	r4, r19
     1fc:	43 1a       	sub	r4, r19
     1fe:	43 1a       	sub	r4, r19
     200:	43 1a       	sub	r4, r19
     202:	43 1a       	sub	r4, r19
     204:	d6 19       	sub	r29, r6
     206:	43 1a       	sub	r4, r19
     208:	43 1a       	sub	r4, r19
     20a:	43 1a       	sub	r4, r19
     20c:	43 1a       	sub	r4, r19
     20e:	43 1a       	sub	r4, r19
     210:	43 1a       	sub	r4, r19
     212:	43 1a       	sub	r4, r19
     214:	07 1a       	sub	r0, r23
     216:	43 1a       	sub	r4, r19
     218:	43 1a       	sub	r4, r19
     21a:	43 1a       	sub	r4, r19
     21c:	43 1a       	sub	r4, r19
     21e:	43 1a       	sub	r4, r19
     220:	43 1a       	sub	r4, r19
     222:	43 1a       	sub	r4, r19
     224:	ee 19       	sub	r30, r14
     226:	43 1a       	sub	r4, r19
     228:	43 1a       	sub	r4, r19
     22a:	43 1a       	sub	r4, r19
     22c:	43 1a       	sub	r4, r19
     22e:	43 1a       	sub	r4, r19
     230:	43 1a       	sub	r4, r19
     232:	43 1a       	sub	r4, r19
     234:	0b 1a       	sub	r0, r27
     236:	43 1a       	sub	r4, r19
     238:	43 1a       	sub	r4, r19
     23a:	43 1a       	sub	r4, r19
     23c:	43 1a       	sub	r4, r19
     23e:	43 1a       	sub	r4, r19
     240:	43 1a       	sub	r4, r19
     242:	43 1a       	sub	r4, r19
     244:	0b 1a       	sub	r0, r27
     246:	43 1a       	sub	r4, r19
     248:	43 1a       	sub	r4, r19
     24a:	43 1a       	sub	r4, r19
     24c:	43 1a       	sub	r4, r19
     24e:	43 1a       	sub	r4, r19
     250:	43 1a       	sub	r4, r19
     252:	43 1a       	sub	r4, r19
     254:	20 1a       	sub	r2, r16
     256:	43 1a       	sub	r4, r19
     258:	43 1a       	sub	r4, r19
     25a:	43 1a       	sub	r4, r19
     25c:	43 1a       	sub	r4, r19
     25e:	43 1a       	sub	r4, r19
     260:	43 1a       	sub	r4, r19
     262:	43 1a       	sub	r4, r19
     264:	3a 1a       	sub	r3, r26
     266:	43 1a       	sub	r4, r19
     268:	43 1a       	sub	r4, r19
     26a:	43 1a       	sub	r4, r19
     26c:	43 1a       	sub	r4, r19
     26e:	43 1a       	sub	r4, r19
     270:	43 1a       	sub	r4, r19
     272:	43 1a       	sub	r4, r19
     274:	3a 1a       	sub	r3, r26
     276:	03 6e       	ori	r16, 0xE3	; 227
     278:	db 36       	cpi	r29, 0x6B	; 107
     27a:	3d 9a       	sbi	0x07, 5	; 7
     27c:	99 99       	sbic	0x13, 1	; 19
     27e:	99 3d       	cpi	r25, 0xD9	; 217
     280:	ab aa       	std	Y+51, r10	; 0x33
     282:	aa 2a       	or	r10, r26
     284:	3e 00       	.word	0x003e	; ????
     286:	00 00       	nop
     288:	80 3f       	cpi	r24, 0xF0	; 240
     28a:	08 4a       	sbci	r16, 0xA8	; 168
     28c:	d7 3b       	cpi	r29, 0xB7	; 183
     28e:	3b ce       	rjmp	.-906    	; 0xffffff06 <__eeprom_end+0xff7eff06>
     290:	01 6e       	ori	r16, 0xE1	; 225
     292:	84 bc       	out	0x24, r8	; 36
     294:	bf fd       	.word	0xfdbf	; ????
     296:	c1 2f       	mov	r28, r17
     298:	3d 6c       	ori	r19, 0xCD	; 205
     29a:	74 31       	cpi	r23, 0x14	; 20
     29c:	9a bd       	out	0x2a, r25	; 42
     29e:	56 83       	std	Z+6, r21	; 0x06
     2a0:	3d da       	rcall	.-2950   	; 0xfffff71c <__eeprom_end+0xff7ef71c>
     2a2:	3d 00       	.word	0x003d	; ????
     2a4:	c7 7f       	andi	r28, 0xF7	; 247
     2a6:	11 be       	out	0x31, r1	; 49
     2a8:	d9 e4       	ldi	r29, 0x49	; 73
     2aa:	bb 4c       	sbci	r27, 0xCB	; 203
     2ac:	3e 91       	ld	r19, -X
     2ae:	6b aa       	std	Y+51, r6	; 0x33
     2b0:	aa be       	out	0x3a, r10	; 58
     2b2:	00 00       	nop
     2b4:	00 80       	ld	r0, Z
     2b6:	3f 07       	cpc	r19, r31
     2b8:	2c 7a       	andi	r18, 0xAC	; 172
     2ba:	a5 ba       	out	0x15, r10	; 21
     2bc:	6c c5       	rjmp	.+2776   	; 0xd96 <_Z16Drift_correctionv+0x1c2>
     2be:	90 da       	rcall	.-2784   	; 0xfffff7e0 <__eeprom_end+0xff7ef7e0>
     2c0:	3b 93       	.word	0x933b	; ????
     2c2:	65 fc       	sbrc	r6, 5
     2c4:	8b bc       	out	0x2b, r8	; 43
     2c6:	53 f8       	bld	r5, 3
     2c8:	10 fd       	sbrc	r17, 0
     2ca:	3c 56       	subi	r19, 0x6C	; 108
     2cc:	92 83       	std	Z+2, r25	; 0x02
     2ce:	4d bd       	out	0x2d, r20	; 45
     2d0:	87 9d       	mul	r24, r7
     2d2:	3a b6       	in	r3, 0x3a	; 58
     2d4:	3d cb       	rjmp	.-2438   	; 0xfffff950 <__eeprom_end+0xff7ef950>
     2d6:	c9 bf       	out	0x39, r28	; 57
     2d8:	5b be       	out	0x3b, r5	; 59
     2da:	73 da       	rcall	.-2842   	; 0xfffff7c2 <__eeprom_end+0xff7ef7c2>
     2dc:	0f c9       	rjmp	.-3554   	; 0xfffff4fc <__eeprom_end+0xff7ef4fc>
     2de:	3f 05       	cpc	r19, r15
     2e0:	a8 4c       	sbci	r26, 0xC8	; 200
     2e2:	cd b2       	in	r12, 0x1d	; 29
     2e4:	d4 4e       	sbci	r29, 0xE4	; 228
     2e6:	b9 38       	cpi	r27, 0x89	; 137
     2e8:	36 a9       	ldd	r19, Z+54	; 0x36
     2ea:	02 0c       	add	r0, r2
     2ec:	50 b9       	out	0x00, r21	; 0
     2ee:	91 86       	std	Z+9, r9	; 0x09
     2f0:	88 08       	sbc	r8, r8
     2f2:	3c a6       	std	Y+44, r3	; 0x2c
     2f4:	aa aa       	std	Y+50, r10	; 0x32
     2f6:	2a be       	out	0x3a, r2	; 58
     2f8:	00 00       	nop
     2fa:	00 80       	ld	r0, Z
     2fc:	3f 07       	cpc	r19, r31
     2fe:	63 42       	sbci	r22, 0x23	; 35
     300:	36 b7       	in	r19, 0x36	; 54
     302:	9b d8       	rcall	.-3786   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     304:	a7 1a       	sub	r10, r23
     306:	39 68       	ori	r19, 0x89	; 137
     308:	56 18       	sub	r5, r6
     30a:	ae ba       	out	0x1e, r10	; 30
     30c:	ab 55       	subi	r26, 0x5B	; 91
     30e:	8c 1d       	adc	r24, r12
     310:	3c b7       	in	r19, 0x3c	; 60
     312:	cc 57       	subi	r28, 0x7C	; 124
     314:	63 bd       	out	0x23, r22	; 35
     316:	6d ed       	ldi	r22, 0xDD	; 221
     318:	fd 75       	andi	r31, 0x5D	; 93
     31a:	3e f6       	brtc	.-114    	; 0x2aa <__SREG__+0x26b>
     31c:	17 72       	andi	r17, 0x27	; 39
     31e:	31 bf       	out	0x31, r19	; 49
     320:	00 00       	nop
     322:	00 80       	ld	r0, Z
     324:	3f 08       	sbc	r3, r15
     326:	00 00       	nop
     328:	00 be       	out	0x30, r0	; 48
     32a:	92 24       	eor	r9, r2
     32c:	49 12       	cpse	r4, r25
     32e:	3e ab       	std	Y+54, r19	; 0x36
     330:	aa aa       	std	Y+50, r10	; 0x32
     332:	2a be       	out	0x3a, r2	; 58
     334:	cd cc       	rjmp	.-1638   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     336:	cc 4c       	sbci	r28, 0xCC	; 204
     338:	3e 00       	.word	0x003e	; ????
     33a:	00 00       	nop
     33c:	80 be       	out	0x30, r8	; 48
     33e:	ab aa       	std	Y+51, r10	; 0x33
     340:	aa aa       	std	Y+50, r10	; 0x32
     342:	3e 00       	.word	0x003e	; ????
     344:	00 00       	nop
     346:	00 bf       	out	0x30, r16	; 48
     348:	00 00       	nop
     34a:	00 80       	ld	r0, Z
     34c:	3f 00       	.word	0x003f	; ????
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	08 41       	sbci	r16, 0x18	; 24
     354:	78 d3       	rcall	.+1776   	; 0xa46 <_Z10Read_Accelv+0x98>
     356:	bb 43       	sbci	r27, 0x3B	; 59
     358:	87 d1       	rcall	.+782    	; 0x668 <_Z18Vector_Dot_ProductPfS_+0x1a>
     35a:	13 3d       	cpi	r17, 0xD3	; 211
     35c:	19 0e       	add	r1, r25
     35e:	3c c3       	rjmp	.+1656   	; 0x9d8 <_Z10Read_Accelv+0x2a>
     360:	bd 42       	sbci	r27, 0x2D	; 45
     362:	82 ad       	ldd	r24, Z+58	; 0x3a
     364:	2b 3e       	cpi	r18, 0xEB	; 235
     366:	68 ec       	ldi	r22, 0xC8	; 200
     368:	82 76       	andi	r24, 0x62	; 98
     36a:	be d9       	rcall	.-3204   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     36c:	8f e1       	ldi	r24, 0x1F	; 31
     36e:	a9 3e       	cpi	r26, 0xE9	; 233
     370:	4c 80       	ldd	r4, Y+4	; 0x04
     372:	ef ff       	.word	0xffef	; ????
     374:	be 01       	movw	r22, r28
     376:	c4 ff       	sbrs	r28, 4
     378:	7f 3f       	cpi	r23, 0xFF	; 255
     37a:	00 00       	nop
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	35 25       	eor	r19, r5
     382:	39 25       	eor	r19, r9
     384:	29 25       	eor	r18, r9
     386:	2f 25       	eor	r18, r15
     388:	7e 25       	eor	r23, r14
     38a:	3d 25       	eor	r19, r13
     38c:	43 25       	eor	r20, r3
     38e:	49 25       	eor	r20, r9
     390:	4f 25       	eor	r20, r15
     392:	55 25       	eor	r21, r5
     394:	5b 25       	eor	r21, r11
     396:	61 25       	eor	r22, r1
     398:	67 25       	eor	r22, r7
     39a:	7e 25       	eor	r23, r14
     39c:	6d 25       	eor	r22, r13
     39e:	73 25       	eor	r23, r3
     3a0:	79 25       	eor	r23, r9

000003a2 <__trampolines_end>:
     3a2:	00 00       	nop
     3a4:	09 0a       	sbc	r0, r25
     3a6:	02 08       	sbc	r0, r2
     3a8:	0b 0c       	add	r0, r11
     3aa:	0d 07       	cpc	r16, r29
     3ac:	06 03       	mulsu	r16, r22
     3ae:	04 01       	movw	r0, r8
	...
     3cc:	00 00       	nop
     3ce:	11 10       	cpse	r1, r1
     3d0:	0f 00       	.word	0x000f	; ????
	...

000003e8 <digital_pin_to_bit_mask_PGM>:
     3e8:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     3f8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     408:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     418:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     428:	04 08 10 20 40 80                                   ... @.

0000042e <digital_pin_to_port_PGM>:
     42e:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     43e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     44e:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     45e:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     46e:	0b 0b 0b 0b 0b 0b                                   ......

00000474 <port_to_input_PGM>:
     474:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     484:	00 01 00 00 03 01 06 01 09 01                       ..........

0000048e <port_to_output_PGM>:
     48e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     49e:	02 01 00 00 05 01 08 01 0b 01                       ..........

000004a8 <port_to_mode_PGM>:
     4a8:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     4b8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000004c2 <__ctors_start>:
     4c2:	56 09       	sbc	r21, r6
     4c4:	28 1b       	sub	r18, r24
     4c6:	c0 22       	and	r12, r16

000004c8 <__ctors_end>:
     4c8:	11 24       	eor	r1, r1
     4ca:	1f be       	out	0x3f, r1	; 63
     4cc:	cf ef       	ldi	r28, 0xFF	; 255
     4ce:	d1 e2       	ldi	r29, 0x21	; 33
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	00 e0       	ldi	r16, 0x00	; 0
     4d6:	0c bf       	out	0x3c, r16	; 60

000004d8 <__do_copy_data>:
     4d8:	12 e0       	ldi	r17, 0x02	; 2
     4da:	a0 e0       	ldi	r26, 0x00	; 0
     4dc:	b2 e0       	ldi	r27, 0x02	; 2
     4de:	ee ef       	ldi	r30, 0xFE	; 254
     4e0:	f1 e5       	ldi	r31, 0x51	; 81
     4e2:	00 e0       	ldi	r16, 0x00	; 0
     4e4:	0b bf       	out	0x3b, r16	; 59
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__do_copy_data+0x14>
     4e8:	07 90       	elpm	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	a0 3e       	cpi	r26, 0xE0	; 224
     4ee:	b1 07       	cpc	r27, r17
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <__do_copy_data+0x10>

000004f2 <__do_clear_bss>:
     4f2:	21 e1       	ldi	r18, 0x11	; 17
     4f4:	a0 ee       	ldi	r26, 0xE0	; 224
     4f6:	b2 e0       	ldi	r27, 0x02	; 2
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <.do_clear_bss_start>

000004fa <.do_clear_bss_loop>:
     4fa:	1d 92       	st	X+, r1

000004fc <.do_clear_bss_start>:
     4fc:	a8 3f       	cpi	r26, 0xF8	; 248
     4fe:	b2 07       	cpc	r27, r18
     500:	e1 f7       	brne	.-8      	; 0x4fa <.do_clear_bss_loop>

00000502 <__do_global_ctors>:
     502:	14 e0       	ldi	r17, 0x04	; 4
     504:	c8 ec       	ldi	r28, 0xC8	; 200
     506:	d4 e0       	ldi	r29, 0x04	; 4
     508:	00 e0       	ldi	r16, 0x00	; 0
     50a:	06 c0       	rjmp	.+12     	; 0x518 <__do_global_ctors+0x16>
     50c:	22 97       	sbiw	r28, 0x02	; 2
     50e:	01 09       	sbc	r16, r1
     510:	fe 01       	movw	r30, r28
     512:	0b bf       	out	0x3b, r16	; 59
     514:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__tablejump_elpm__>
     518:	c2 3c       	cpi	r28, 0xC2	; 194
     51a:	d1 07       	cpc	r29, r17
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	08 07       	cpc	r16, r24
     520:	a9 f7       	brne	.-22     	; 0x50c <__do_global_ctors+0xa>
     522:	0e 94 08 0b 	call	0x1610	; 0x1610 <main>
     526:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <_exit>

0000052a <__bad_interrupt>:
     52a:	6a cd       	rjmp	.-1324   	; 0x0 <__vectors>

0000052c <_Z15Matrix_MultiplyPA3_fS0_S0_>:
			onVMotor(1);
		else if (ir_distance>=100 && ir_distance<=150)
			onVMotor(2);	
		vTaskDelay(70);	
		
	}
     52c:	2f 92       	push	r2
     52e:	3f 92       	push	r3
     530:	4f 92       	push	r4
     532:	5f 92       	push	r5
     534:	6f 92       	push	r6
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	62 97       	sbiw	r28, 0x12	; 18
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	98 8b       	std	Y+16, r25	; 0x10
     562:	8f 87       	std	Y+15, r24	; 0x0f
     564:	5a 8b       	std	Y+18, r21	; 0x12
     566:	49 8b       	std	Y+17, r20	; 0x11
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	2e 01       	movw	r4, r28
     56e:	8d e0       	ldi	r24, 0x0D	; 13
     570:	48 0e       	add	r4, r24
     572:	51 1c       	adc	r5, r1
     574:	7e 87       	std	Y+14, r23	; 0x0e
     576:	6d 87       	std	Y+13, r22	; 0x0d
     578:	46 c0       	rjmp	.+140    	; 0x606 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xda>
     57a:	f5 01       	movw	r30, r10
     57c:	61 91       	ld	r22, Z+
     57e:	71 91       	ld	r23, Z+
     580:	81 91       	ld	r24, Z+
     582:	91 91       	ld	r25, Z+
     584:	5f 01       	movw	r10, r30
     586:	f7 01       	movw	r30, r14
     588:	20 81       	ld	r18, Z
     58a:	31 81       	ldd	r19, Z+1	; 0x01
     58c:	42 81       	ldd	r20, Z+2	; 0x02
     58e:	53 81       	ldd	r21, Z+3	; 0x03
     590:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     594:	f8 01       	movw	r30, r16
     596:	61 93       	st	Z+, r22
     598:	71 93       	st	Z+, r23
     59a:	81 93       	st	Z+, r24
     59c:	91 93       	st	Z+, r25
     59e:	8f 01       	movw	r16, r30
     5a0:	fc e0       	ldi	r31, 0x0C	; 12
     5a2:	ef 0e       	add	r14, r31
     5a4:	f1 1c       	adc	r15, r1
     5a6:	04 15       	cp	r16, r4
     5a8:	15 05       	cpc	r17, r5
     5aa:	39 f7       	brne	.-50     	; 0x57a <_Z15Matrix_MultiplyPA3_fS0_S0_+0x4e>
     5ac:	2d 81       	ldd	r18, Y+5	; 0x05
     5ae:	3e 81       	ldd	r19, Y+6	; 0x06
     5b0:	4f 81       	ldd	r20, Y+7	; 0x07
     5b2:	58 85       	ldd	r21, Y+8	; 0x08
     5b4:	69 81       	ldd	r22, Y+1	; 0x01
     5b6:	7a 81       	ldd	r23, Y+2	; 0x02
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     5c0:	29 85       	ldd	r18, Y+9	; 0x09
     5c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     5c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     5c8:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     5cc:	f3 01       	movw	r30, r6
     5ce:	61 93       	st	Z+, r22
     5d0:	71 93       	st	Z+, r23
     5d2:	81 93       	st	Z+, r24
     5d4:	91 93       	st	Z+, r25
     5d6:	3f 01       	movw	r6, r30
     5d8:	f4 e0       	ldi	r31, 0x04	; 4
     5da:	cf 0e       	add	r12, r31
     5dc:	d1 1c       	adc	r13, r1
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	c8 16       	cp	r12, r24
     5e2:	d1 04       	cpc	r13, r1
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xcc>
     5e6:	8e 01       	movw	r16, r28
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	ed 84       	ldd	r14, Y+13	; 0x0d
     5ee:	fe 84       	ldd	r15, Y+14	; 0x0e
     5f0:	ec 0c       	add	r14, r12
     5f2:	fd 1c       	adc	r15, r13
     5f4:	51 01       	movw	r10, r2
     5f6:	c1 cf       	rjmp	.-126    	; 0x57a <_Z15Matrix_MultiplyPA3_fS0_S0_+0x4e>
     5f8:	ec e0       	ldi	r30, 0x0C	; 12
     5fa:	8e 0e       	add	r8, r30
     5fc:	91 1c       	adc	r9, r1
     5fe:	f4 e2       	ldi	r31, 0x24	; 36
     600:	8f 16       	cp	r8, r31
     602:	91 04       	cpc	r9, r1
     604:	59 f0       	breq	.+22     	; 0x61c <_Z15Matrix_MultiplyPA3_fS0_S0_+0xf0>
     606:	69 88       	ldd	r6, Y+17	; 0x11
     608:	7a 88       	ldd	r7, Y+18	; 0x12
     60a:	68 0c       	add	r6, r8
     60c:	79 1c       	adc	r7, r9
     60e:	c1 2c       	mov	r12, r1
     610:	d1 2c       	mov	r13, r1
     612:	2f 84       	ldd	r2, Y+15	; 0x0f
     614:	38 88       	ldd	r3, Y+16	; 0x10
     616:	28 0c       	add	r2, r8
     618:	39 1c       	adc	r3, r9
     61a:	e5 cf       	rjmp	.-54     	; 0x5e6 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xba>
     61c:	62 96       	adiw	r28, 0x12	; 18
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	7f 90       	pop	r7
     642:	6f 90       	pop	r6
     644:	5f 90       	pop	r5
     646:	4f 90       	pop	r4
     648:	3f 90       	pop	r3
     64a:	2f 90       	pop	r2
     64c:	08 95       	ret

0000064e <_Z18Vector_Dot_ProductPfS_>:
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	5c 01       	movw	r10, r24
     664:	06 2f       	mov	r16, r22
     666:	17 2f       	mov	r17, r23
     668:	c3 e0       	ldi	r28, 0x03	; 3
     66a:	d0 e0       	ldi	r29, 0x00	; 0
     66c:	c1 2c       	mov	r12, r1
     66e:	d1 2c       	mov	r13, r1
     670:	76 01       	movw	r14, r12
     672:	f5 01       	movw	r30, r10
     674:	61 91       	ld	r22, Z+
     676:	71 91       	ld	r23, Z+
     678:	81 91       	ld	r24, Z+
     67a:	91 91       	ld	r25, Z+
     67c:	5f 01       	movw	r10, r30
     67e:	f8 01       	movw	r30, r16
     680:	21 91       	ld	r18, Z+
     682:	31 91       	ld	r19, Z+
     684:	41 91       	ld	r20, Z+
     686:	51 91       	ld	r21, Z+
     688:	8f 01       	movw	r16, r30
     68a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     69a:	6b 01       	movw	r12, r22
     69c:	7c 01       	movw	r14, r24
     69e:	21 97       	sbiw	r28, 0x01	; 1
     6a0:	20 97       	sbiw	r28, 0x00	; 0
     6a2:	39 f7       	brne	.-50     	; 0x672 <_Z18Vector_Dot_ProductPfS_+0x24>
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	08 95       	ret

000006ba <_Z20Vector_Cross_ProductPfS_S_>:
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	5c 01       	movw	r10, r24
     6d0:	eb 01       	movw	r28, r22
     6d2:	8a 01       	movw	r16, r20
     6d4:	fa 01       	movw	r30, r20
     6d6:	20 85       	ldd	r18, Z+8	; 0x08
     6d8:	31 85       	ldd	r19, Z+9	; 0x09
     6da:	42 85       	ldd	r20, Z+10	; 0x0a
     6dc:	53 85       	ldd	r21, Z+11	; 0x0b
     6de:	6c 81       	ldd	r22, Y+4	; 0x04
     6e0:	7d 81       	ldd	r23, Y+5	; 0x05
     6e2:	8e 81       	ldd	r24, Y+6	; 0x06
     6e4:	9f 81       	ldd	r25, Y+7	; 0x07
     6e6:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
     6ee:	f8 01       	movw	r30, r16
     6f0:	24 81       	ldd	r18, Z+4	; 0x04
     6f2:	35 81       	ldd	r19, Z+5	; 0x05
     6f4:	46 81       	ldd	r20, Z+6	; 0x06
     6f6:	57 81       	ldd	r21, Z+7	; 0x07
     6f8:	68 85       	ldd	r22, Y+8	; 0x08
     6fa:	79 85       	ldd	r23, Y+9	; 0x09
     6fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     6fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     700:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     710:	f5 01       	movw	r30, r10
     712:	60 83       	st	Z, r22
     714:	71 83       	std	Z+1, r23	; 0x01
     716:	82 83       	std	Z+2, r24	; 0x02
     718:	93 83       	std	Z+3, r25	; 0x03
     71a:	f8 01       	movw	r30, r16
     71c:	20 81       	ld	r18, Z
     71e:	31 81       	ldd	r19, Z+1	; 0x01
     720:	42 81       	ldd	r20, Z+2	; 0x02
     722:	53 81       	ldd	r21, Z+3	; 0x03
     724:	68 85       	ldd	r22, Y+8	; 0x08
     726:	79 85       	ldd	r23, Y+9	; 0x09
     728:	8a 85       	ldd	r24, Y+10	; 0x0a
     72a:	9b 85       	ldd	r25, Y+11	; 0x0b
     72c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
     734:	f8 01       	movw	r30, r16
     736:	20 85       	ldd	r18, Z+8	; 0x08
     738:	31 85       	ldd	r19, Z+9	; 0x09
     73a:	42 85       	ldd	r20, Z+10	; 0x0a
     73c:	53 85       	ldd	r21, Z+11	; 0x0b
     73e:	68 81       	ld	r22, Y
     740:	79 81       	ldd	r23, Y+1	; 0x01
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     756:	f5 01       	movw	r30, r10
     758:	64 83       	std	Z+4, r22	; 0x04
     75a:	75 83       	std	Z+5, r23	; 0x05
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	97 83       	std	Z+7, r25	; 0x07
     760:	f8 01       	movw	r30, r16
     762:	24 81       	ldd	r18, Z+4	; 0x04
     764:	35 81       	ldd	r19, Z+5	; 0x05
     766:	46 81       	ldd	r20, Z+6	; 0x06
     768:	57 81       	ldd	r21, Z+7	; 0x07
     76a:	68 81       	ld	r22, Y
     76c:	79 81       	ldd	r23, Y+1	; 0x01
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	9b 81       	ldd	r25, Y+3	; 0x03
     772:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
     77a:	f8 01       	movw	r30, r16
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	42 81       	ldd	r20, Z+2	; 0x02
     782:	53 81       	ldd	r21, Z+3	; 0x03
     784:	6c 81       	ldd	r22, Y+4	; 0x04
     786:	7d 81       	ldd	r23, Y+5	; 0x05
     788:	8e 81       	ldd	r24, Y+6	; 0x06
     78a:	9f 81       	ldd	r25, Y+7	; 0x07
     78c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     79c:	f5 01       	movw	r30, r10
     79e:	60 87       	std	Z+8, r22	; 0x08
     7a0:	71 87       	std	Z+9, r23	; 0x09
     7a2:	82 87       	std	Z+10, r24	; 0x0a
     7a4:	93 87       	std	Z+11, r25	; 0x0b
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	08 95       	ret

000007bc <_Z12Vector_ScalePfS_f>:
     7bc:	8f 92       	push	r8
     7be:	9f 92       	push	r9
     7c0:	af 92       	push	r10
     7c2:	bf 92       	push	r11
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	49 01       	movw	r8, r18
     7d2:	5a 01       	movw	r10, r20
     7d4:	06 2f       	mov	r16, r22
     7d6:	17 2f       	mov	r17, r23
     7d8:	7c 01       	movw	r14, r24
     7da:	c0 e0       	ldi	r28, 0x00	; 0
     7dc:	d0 e0       	ldi	r29, 0x00	; 0
     7de:	f8 01       	movw	r30, r16
     7e0:	61 91       	ld	r22, Z+
     7e2:	71 91       	ld	r23, Z+
     7e4:	81 91       	ld	r24, Z+
     7e6:	91 91       	ld	r25, Z+
     7e8:	8f 01       	movw	r16, r30
     7ea:	a5 01       	movw	r20, r10
     7ec:	94 01       	movw	r18, r8
     7ee:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     7f2:	f7 01       	movw	r30, r14
     7f4:	61 93       	st	Z+, r22
     7f6:	71 93       	st	Z+, r23
     7f8:	81 93       	st	Z+, r24
     7fa:	91 93       	st	Z+, r25
     7fc:	7f 01       	movw	r14, r30
     7fe:	21 96       	adiw	r28, 0x01	; 1
     800:	c3 30       	cpi	r28, 0x03	; 3
     802:	d1 05       	cpc	r29, r1
     804:	61 f7       	brne	.-40     	; 0x7de <_Z12Vector_ScalePfS_f+0x22>
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	08 95       	ret

0000081c <_Z10Vector_AddPfS_S_>:
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	e6 2e       	mov	r14, r22
     82e:	f7 2e       	mov	r15, r23
     830:	04 2f       	mov	r16, r20
     832:	15 2f       	mov	r17, r21
     834:	6c 01       	movw	r12, r24
     836:	c0 e0       	ldi	r28, 0x00	; 0
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	f7 01       	movw	r30, r14
     83c:	61 91       	ld	r22, Z+
     83e:	71 91       	ld	r23, Z+
     840:	81 91       	ld	r24, Z+
     842:	91 91       	ld	r25, Z+
     844:	7f 01       	movw	r14, r30
     846:	f8 01       	movw	r30, r16
     848:	21 91       	ld	r18, Z+
     84a:	31 91       	ld	r19, Z+
     84c:	41 91       	ld	r20, Z+
     84e:	51 91       	ld	r21, Z+
     850:	8f 01       	movw	r16, r30
     852:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     856:	f6 01       	movw	r30, r12
     858:	61 93       	st	Z+, r22
     85a:	71 93       	st	Z+, r23
     85c:	81 93       	st	Z+, r24
     85e:	91 93       	st	Z+, r25
     860:	6f 01       	movw	r12, r30
     862:	21 96       	adiw	r28, 0x01	; 1
     864:	c3 30       	cpi	r28, 0x03	; 3
     866:	d1 05       	cpc	r29, r1
     868:	41 f7       	brne	.-48     	; 0x83a <_Z10Vector_AddPfS_S_+0x1e>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	08 95       	ret

0000087c <_Z8I2C_Initv>:
     87c:	85 ef       	ldi	r24, 0xF5	; 245
     87e:	9e e0       	ldi	r25, 0x0E	; 14
     880:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <_ZN7TwoWire5beginEv>
     884:	08 95       	ret

00000886 <_Z9Gyro_Initv>:
     886:	42 e0       	ldi	r20, 0x02	; 2
     888:	63 e0       	ldi	r22, 0x03	; 3
     88a:	8e e1       	ldi	r24, 0x1E	; 30
     88c:	97 e0       	ldi	r25, 0x07	; 7
     88e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE>
     892:	8e e1       	ldi	r24, 0x1E	; 30
     894:	97 e0       	ldi	r25, 0x07	; 7
     896:	4b d7       	rcall	.+3734   	; 0x172e <_ZN3L3G13enableDefaultEv>
     898:	40 e2       	ldi	r20, 0x20	; 32
     89a:	63 e2       	ldi	r22, 0x23	; 35
     89c:	8e e1       	ldi	r24, 0x1E	; 30
     89e:	97 e0       	ldi	r25, 0x07	; 7
     8a0:	26 d7       	rcall	.+3660   	; 0x16ee <_ZN3L3G8writeRegEhh>
     8a2:	4f e0       	ldi	r20, 0x0F	; 15
     8a4:	60 e2       	ldi	r22, 0x20	; 32
     8a6:	8e e1       	ldi	r24, 0x1E	; 30
     8a8:	97 e0       	ldi	r25, 0x07	; 7
     8aa:	21 c7       	rjmp	.+3650   	; 0x16ee <_ZN3L3G8writeRegEhh>
     8ac:	08 95       	ret

000008ae <_Z9Read_Gyrov>:
     8ae:	8e e1       	ldi	r24, 0x1E	; 30
     8b0:	97 e0       	ldi	r25, 0x07	; 7
     8b2:	52 d7       	rcall	.+3748   	; 0x1758 <_ZN3L3G4readEv>
     8b4:	40 91 1e 07 	lds	r20, 0x071E
     8b8:	50 91 1f 07 	lds	r21, 0x071F
     8bc:	50 93 d9 07 	sts	0x07D9, r21
     8c0:	40 93 d8 07 	sts	0x07D8, r20
     8c4:	20 91 20 07 	lds	r18, 0x0720
     8c8:	30 91 21 07 	lds	r19, 0x0721
     8cc:	30 93 db 07 	sts	0x07DB, r19
     8d0:	20 93 da 07 	sts	0x07DA, r18
     8d4:	80 91 22 07 	lds	r24, 0x0722
     8d8:	90 91 23 07 	lds	r25, 0x0723
     8dc:	90 93 dd 07 	sts	0x07DD, r25
     8e0:	80 93 dc 07 	sts	0x07DC, r24
     8e4:	60 91 cc 07 	lds	r22, 0x07CC
     8e8:	70 91 cd 07 	lds	r23, 0x07CD
     8ec:	46 1b       	sub	r20, r22
     8ee:	57 0b       	sbc	r21, r23
     8f0:	e0 91 4c 02 	lds	r30, 0x024C
     8f4:	f0 91 4d 02 	lds	r31, 0x024D
     8f8:	e4 9f       	mul	r30, r20
     8fa:	b0 01       	movw	r22, r0
     8fc:	e5 9f       	mul	r30, r21
     8fe:	70 0d       	add	r23, r0
     900:	f4 9f       	mul	r31, r20
     902:	70 0d       	add	r23, r0
     904:	11 24       	eor	r1, r1
     906:	70 93 cb 07 	sts	0x07CB, r23
     90a:	60 93 ca 07 	sts	0x07CA, r22
     90e:	40 91 ce 07 	lds	r20, 0x07CE
     912:	50 91 cf 07 	lds	r21, 0x07CF
     916:	24 1b       	sub	r18, r20
     918:	35 0b       	sbc	r19, r21
     91a:	60 91 4e 02 	lds	r22, 0x024E
     91e:	70 91 4f 02 	lds	r23, 0x024F
     922:	62 9f       	mul	r22, r18
     924:	a0 01       	movw	r20, r0
     926:	63 9f       	mul	r22, r19
     928:	50 0d       	add	r21, r0
     92a:	72 9f       	mul	r23, r18
     92c:	50 0d       	add	r21, r0
     92e:	11 24       	eor	r1, r1
     930:	50 93 c9 07 	sts	0x07C9, r21
     934:	40 93 c8 07 	sts	0x07C8, r20
     938:	20 91 d0 07 	lds	r18, 0x07D0
     93c:	30 91 d1 07 	lds	r19, 0x07D1
     940:	82 1b       	sub	r24, r18
     942:	93 0b       	sbc	r25, r19
     944:	40 91 50 02 	lds	r20, 0x0250
     948:	50 91 51 02 	lds	r21, 0x0251
     94c:	48 9f       	mul	r20, r24
     94e:	90 01       	movw	r18, r0
     950:	49 9f       	mul	r20, r25
     952:	30 0d       	add	r19, r0
     954:	58 9f       	mul	r21, r24
     956:	30 0d       	add	r19, r0
     958:	11 24       	eor	r1, r1
     95a:	30 93 c7 07 	sts	0x07C7, r19
     95e:	20 93 c6 07 	sts	0x07C6, r18
     962:	08 95       	ret

00000964 <_Z10Accel_Initv>:
     964:	42 e0       	ldi	r20, 0x02	; 2
     966:	64 e0       	ldi	r22, 0x04	; 4
     968:	88 ef       	ldi	r24, 0xF8	; 248
     96a:	96 e0       	ldi	r25, 0x06	; 6
     96c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>
     970:	88 ef       	ldi	r24, 0xF8	; 248
     972:	96 e0       	ldi	r25, 0x06	; 6
     974:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN6LSM30313enableDefaultEv>
     978:	80 91 11 07 	lds	r24, 0x0711
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	49 f0       	breq	.+18     	; 0x992 <_Z10Accel_Initv+0x2e>
     980:	83 30       	cpi	r24, 0x03	; 3
     982:	71 f4       	brne	.+28     	; 0x9a0 <_Z10Accel_Initv+0x3c>
     984:	48 e1       	ldi	r20, 0x18	; 24
     986:	61 e2       	ldi	r22, 0x21	; 33
     988:	88 ef       	ldi	r24, 0xF8	; 248
     98a:	96 e0       	ldi	r25, 0x06	; 6
     98c:	0c 94 07 11 	jmp	0x220e	; 0x220e <_ZN6LSM3038writeRegEhh>
     990:	08 95       	ret
     992:	48 e2       	ldi	r20, 0x28	; 40
     994:	63 e2       	ldi	r22, 0x23	; 35
     996:	88 ef       	ldi	r24, 0xF8	; 248
     998:	96 e0       	ldi	r25, 0x06	; 6
     99a:	0c 94 07 11 	jmp	0x220e	; 0x220e <_ZN6LSM3038writeRegEhh>
     99e:	08 95       	ret
     9a0:	40 e3       	ldi	r20, 0x30	; 48
     9a2:	63 e2       	ldi	r22, 0x23	; 35
     9a4:	88 ef       	ldi	r24, 0xF8	; 248
     9a6:	96 e0       	ldi	r25, 0x06	; 6
     9a8:	0c 94 07 11 	jmp	0x220e	; 0x220e <_ZN6LSM3038writeRegEhh>
     9ac:	08 95       	ret

000009ae <_Z10Read_Accelv>:
     9ae:	88 ef       	ldi	r24, 0xF8	; 248
     9b0:	96 e0       	ldi	r25, 0x06	; 6
     9b2:	0e 94 4e 11 	call	0x229c	; 0x229c <_ZN6LSM3037readAccEv>
     9b6:	40 91 f8 06 	lds	r20, 0x06F8
     9ba:	50 91 f9 06 	lds	r21, 0x06F9
     9be:	55 95       	asr	r21
     9c0:	47 95       	ror	r20
     9c2:	55 95       	asr	r21
     9c4:	47 95       	ror	r20
     9c6:	55 95       	asr	r21
     9c8:	47 95       	ror	r20
     9ca:	55 95       	asr	r21
     9cc:	47 95       	ror	r20
     9ce:	50 93 df 07 	sts	0x07DF, r21
     9d2:	40 93 de 07 	sts	0x07DE, r20
     9d6:	20 91 fa 06 	lds	r18, 0x06FA
     9da:	30 91 fb 06 	lds	r19, 0x06FB
     9de:	35 95       	asr	r19
     9e0:	27 95       	ror	r18
     9e2:	35 95       	asr	r19
     9e4:	27 95       	ror	r18
     9e6:	35 95       	asr	r19
     9e8:	27 95       	ror	r18
     9ea:	35 95       	asr	r19
     9ec:	27 95       	ror	r18
     9ee:	30 93 e1 07 	sts	0x07E1, r19
     9f2:	20 93 e0 07 	sts	0x07E0, r18
     9f6:	80 91 fc 06 	lds	r24, 0x06FC
     9fa:	90 91 fd 06 	lds	r25, 0x06FD
     9fe:	95 95       	asr	r25
     a00:	87 95       	ror	r24
     a02:	95 95       	asr	r25
     a04:	87 95       	ror	r24
     a06:	95 95       	asr	r25
     a08:	87 95       	ror	r24
     a0a:	95 95       	asr	r25
     a0c:	87 95       	ror	r24
     a0e:	90 93 e3 07 	sts	0x07E3, r25
     a12:	80 93 e2 07 	sts	0x07E2, r24
     a16:	60 91 d2 07 	lds	r22, 0x07D2
     a1a:	70 91 d3 07 	lds	r23, 0x07D3
     a1e:	46 1b       	sub	r20, r22
     a20:	57 0b       	sbc	r21, r23
     a22:	e0 91 52 02 	lds	r30, 0x0252
     a26:	f0 91 53 02 	lds	r31, 0x0253
     a2a:	e4 9f       	mul	r30, r20
     a2c:	b0 01       	movw	r22, r0
     a2e:	e5 9f       	mul	r30, r21
     a30:	70 0d       	add	r23, r0
     a32:	f4 9f       	mul	r31, r20
     a34:	70 0d       	add	r23, r0
     a36:	11 24       	eor	r1, r1
     a38:	70 93 c5 07 	sts	0x07C5, r23
     a3c:	60 93 c4 07 	sts	0x07C4, r22
     a40:	40 91 d4 07 	lds	r20, 0x07D4
     a44:	50 91 d5 07 	lds	r21, 0x07D5
     a48:	24 1b       	sub	r18, r20
     a4a:	35 0b       	sbc	r19, r21
     a4c:	60 91 54 02 	lds	r22, 0x0254
     a50:	70 91 55 02 	lds	r23, 0x0255
     a54:	62 9f       	mul	r22, r18
     a56:	a0 01       	movw	r20, r0
     a58:	63 9f       	mul	r22, r19
     a5a:	50 0d       	add	r21, r0
     a5c:	72 9f       	mul	r23, r18
     a5e:	50 0d       	add	r21, r0
     a60:	11 24       	eor	r1, r1
     a62:	50 93 c3 07 	sts	0x07C3, r21
     a66:	40 93 c2 07 	sts	0x07C2, r20
     a6a:	20 91 d6 07 	lds	r18, 0x07D6
     a6e:	30 91 d7 07 	lds	r19, 0x07D7
     a72:	82 1b       	sub	r24, r18
     a74:	93 0b       	sbc	r25, r19
     a76:	40 91 56 02 	lds	r20, 0x0256
     a7a:	50 91 57 02 	lds	r21, 0x0257
     a7e:	48 9f       	mul	r20, r24
     a80:	90 01       	movw	r18, r0
     a82:	49 9f       	mul	r20, r25
     a84:	30 0d       	add	r19, r0
     a86:	58 9f       	mul	r21, r24
     a88:	30 0d       	add	r19, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	30 93 c1 07 	sts	0x07C1, r19
     a90:	20 93 c0 07 	sts	0x07C0, r18
     a94:	08 95       	ret

00000a96 <_Z9Normalizev>:
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	a4 97       	sbiw	r28, 0x24	; 36
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	60 e3       	ldi	r22, 0x30	; 48
     ab4:	72 e0       	ldi	r23, 0x02	; 2
     ab6:	84 e2       	ldi	r24, 0x24	; 36
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	c9 dd       	rcall	.-1134   	; 0x64e <_Z18Vector_Dot_ProductPfS_>
     abc:	90 58       	subi	r25, 0x80	; 128
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5f e3       	ldi	r21, 0x3F	; 63
     ac6:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     aca:	6b 01       	movw	r12, r22
     acc:	7c 01       	movw	r14, r24
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	60 e3       	ldi	r22, 0x30	; 48
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	70 de       	rcall	.-800    	; 0x7bc <_Z12Vector_ScalePfS_f>
     adc:	a7 01       	movw	r20, r14
     ade:	96 01       	movw	r18, r12
     ae0:	64 e2       	ldi	r22, 0x24	; 36
     ae2:	72 e0       	ldi	r23, 0x02	; 2
     ae4:	ce 01       	movw	r24, r28
     ae6:	0d 96       	adiw	r24, 0x0d	; 13
     ae8:	69 de       	rcall	.-814    	; 0x7bc <_Z12Vector_ScalePfS_f>
     aea:	44 e2       	ldi	r20, 0x24	; 36
     aec:	52 e0       	ldi	r21, 0x02	; 2
     aee:	be 01       	movw	r22, r28
     af0:	6f 5f       	subi	r22, 0xFF	; 255
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	cb 01       	movw	r24, r22
     af6:	92 de       	rcall	.-732    	; 0x81c <_Z10Vector_AddPfS_S_>
     af8:	40 e3       	ldi	r20, 0x30	; 48
     afa:	52 e0       	ldi	r21, 0x02	; 2
     afc:	be 01       	movw	r22, r28
     afe:	63 5f       	subi	r22, 0xF3	; 243
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	cb 01       	movw	r24, r22
     b04:	8b de       	rcall	.-746    	; 0x81c <_Z10Vector_AddPfS_S_>
     b06:	ae 01       	movw	r20, r28
     b08:	43 5f       	subi	r20, 0xF3	; 243
     b0a:	5f 4f       	sbci	r21, 0xFF	; 255
     b0c:	be 01       	movw	r22, r28
     b0e:	6f 5f       	subi	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	ce 01       	movw	r24, r28
     b14:	49 96       	adiw	r24, 0x19	; 25
     b16:	d1 dd       	rcall	.-1118   	; 0x6ba <_Z20Vector_Cross_ProductPfS_S_>
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	cb 01       	movw	r24, r22
     b20:	96 dd       	rcall	.-1236   	; 0x64e <_Z18Vector_Dot_ProductPfS_>
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 e4       	ldi	r24, 0x40	; 64
     b2c:	90 e4       	ldi	r25, 0x40	; 64
     b2e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	be 01       	movw	r22, r28
     b44:	6f 5f       	subi	r22, 0xFF	; 255
     b46:	7f 4f       	sbci	r23, 0xFF	; 255
     b48:	84 e2       	ldi	r24, 0x24	; 36
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	37 de       	rcall	.-914    	; 0x7bc <_Z12Vector_ScalePfS_f>
     b4e:	be 01       	movw	r22, r28
     b50:	63 5f       	subi	r22, 0xF3	; 243
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	cb 01       	movw	r24, r22
     b56:	7b dd       	rcall	.-1290   	; 0x64e <_Z18Vector_Dot_ProductPfS_>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e4       	ldi	r24, 0x40	; 64
     b62:	90 e4       	ldi	r25, 0x40	; 64
     b64:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	be 01       	movw	r22, r28
     b7a:	63 5f       	subi	r22, 0xF3	; 243
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	80 e3       	ldi	r24, 0x30	; 48
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	1c de       	rcall	.-968    	; 0x7bc <_Z12Vector_ScalePfS_f>
     b84:	be 01       	movw	r22, r28
     b86:	67 5e       	subi	r22, 0xE7	; 231
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	cb 01       	movw	r24, r22
     b8c:	60 dd       	rcall	.-1344   	; 0x64e <_Z18Vector_Dot_ProductPfS_>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	90 e4       	ldi	r25, 0x40	; 64
     b9a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	be 01       	movw	r22, r28
     bb0:	67 5e       	subi	r22, 0xE7	; 231
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	8c e3       	ldi	r24, 0x3C	; 60
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	01 de       	rcall	.-1022   	; 0x7bc <_Z12Vector_ScalePfS_f>
     bba:	a4 96       	adiw	r28, 0x24	; 36
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <_Z16Drift_correctionv>:
     bd4:	4f 92       	push	r4
     bd6:	5f 92       	push	r5
     bd8:	6f 92       	push	r6
     bda:	7f 92       	push	r7
     bdc:	8f 92       	push	r8
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	60 91 b0 07 	lds	r22, 0x07B0
     bf0:	70 91 b1 07 	lds	r23, 0x07B1
     bf4:	80 91 b2 07 	lds	r24, 0x07B2
     bf8:	90 91 b3 07 	lds	r25, 0x07B3
     bfc:	80 90 b4 07 	lds	r8, 0x07B4
     c00:	90 90 b5 07 	lds	r9, 0x07B5
     c04:	a0 90 b6 07 	lds	r10, 0x07B6
     c08:	b0 90 b7 07 	lds	r11, 0x07B7
     c0c:	c0 90 b8 07 	lds	r12, 0x07B8
     c10:	d0 90 b9 07 	lds	r13, 0x07B9
     c14:	e0 90 ba 07 	lds	r14, 0x07BA
     c18:	f0 90 bb 07 	lds	r15, 0x07BB
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     c24:	2b 01       	movw	r4, r22
     c26:	3c 01       	movw	r6, r24
     c28:	a5 01       	movw	r20, r10
     c2a:	94 01       	movw	r18, r8
     c2c:	c5 01       	movw	r24, r10
     c2e:	b4 01       	movw	r22, r8
     c30:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	c3 01       	movw	r24, r6
     c3a:	b2 01       	movw	r22, r4
     c3c:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     c40:	4b 01       	movw	r8, r22
     c42:	5c 01       	movw	r10, r24
     c44:	a7 01       	movw	r20, r14
     c46:	96 01       	movw	r18, r12
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	c5 01       	movw	r24, r10
     c56:	b4 01       	movw	r22, r8
     c58:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     c5c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <sqrt>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	5b e3       	ldi	r21, 0x3B	; 59
     c68:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	9f e3       	ldi	r25, 0x3F	; 63
     c78:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     c7c:	6b 01       	movw	r12, r22
     c7e:	7c 01       	movw	r14, r24
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	a9 01       	movw	r20, r18
     c86:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__gesf2>
     c8a:	18 16       	cp	r1, r24
     c8c:	b4 f4       	brge	.+44     	; 0xcba <_Z16Drift_correctionv+0xe6>
     c8e:	a7 01       	movw	r20, r14
     c90:	96 01       	movw	r18, r12
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	9f e3       	ldi	r25, 0x3F	; 63
     ca6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__cmpsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	04 f5       	brge	.+64     	; 0xcf8 <_Z16Drift_correctionv+0x124>
     cb8:	5a c0       	rjmp	.+180    	; 0xd6e <_Z16Drift_correctionv+0x19a>
     cba:	a7 01       	movw	r20, r14
     cbc:	96 01       	movw	r18, r12
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     cd2:	4b 01       	movw	r8, r22
     cd4:	5c 01       	movw	r10, r24
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	a9 01       	movw	r20, r18
     cdc:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__cmpsf2>
     ce0:	88 23       	and	r24, r24
     ce2:	0c f4       	brge	.+2      	; 0xce6 <_Z16Drift_correctionv+0x112>
     ce4:	48 c0       	rjmp	.+144    	; 0xd76 <_Z16Drift_correctionv+0x1a2>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	a9 01       	movw	r20, r18
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__gesf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	bc f4       	brge	.+46     	; 0xd26 <_Z16Drift_correctionv+0x152>
     cf8:	a7 01       	movw	r20, r14
     cfa:	96 01       	movw	r18, r12
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	9f e3       	ldi	r25, 0x3F	; 63
     d10:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__gesf2>
     d20:	18 16       	cp	r1, r24
     d22:	6c f1       	brlt	.+90     	; 0xd7e <_Z16Drift_correctionv+0x1aa>
     d24:	13 c0       	rjmp	.+38     	; 0xd4c <_Z16Drift_correctionv+0x178>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	c5 01       	movw	r24, r10
     d30:	b4 01       	movw	r22, r8
     d32:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__gesf2>
     d36:	18 16       	cp	r1, r24
     d38:	5c f1       	brlt	.+86     	; 0xd90 <_Z16Drift_correctionv+0x1bc>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	a9 01       	movw	r20, r18
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__gesf2>
     d48:	18 16       	cp	r1, r24
     d4a:	54 f5       	brge	.+84     	; 0xda0 <_Z16Drift_correctionv+0x1cc>
     d4c:	a7 01       	movw	r20, r14
     d4e:	96 01       	movw	r18, r12
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 e8       	ldi	r24, 0x80	; 128
     d62:	9f e3       	ldi	r25, 0x3F	; 63
     d64:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     d68:	4b 01       	movw	r8, r22
     d6a:	5c 01       	movw	r10, r24
     d6c:	19 c0       	rjmp	.+50     	; 0xda0 <_Z16Drift_correctionv+0x1cc>
     d6e:	81 2c       	mov	r8, r1
     d70:	91 2c       	mov	r9, r1
     d72:	54 01       	movw	r10, r8
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <_Z16Drift_correctionv+0x1cc>
     d76:	81 2c       	mov	r8, r1
     d78:	91 2c       	mov	r9, r1
     d7a:	54 01       	movw	r10, r8
     d7c:	11 c0       	rjmp	.+34     	; 0xda0 <_Z16Drift_correctionv+0x1cc>
     d7e:	0f 2e       	mov	r0, r31
     d80:	81 2c       	mov	r8, r1
     d82:	91 2c       	mov	r9, r1
     d84:	f0 e8       	ldi	r31, 0x80	; 128
     d86:	af 2e       	mov	r10, r31
     d88:	ff e3       	ldi	r31, 0x3F	; 63
     d8a:	bf 2e       	mov	r11, r31
     d8c:	f0 2d       	mov	r31, r0
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <_Z16Drift_correctionv+0x1cc>
     d90:	0f 2e       	mov	r0, r31
     d92:	81 2c       	mov	r8, r1
     d94:	91 2c       	mov	r9, r1
     d96:	f0 e8       	ldi	r31, 0x80	; 128
     d98:	af 2e       	mov	r10, r31
     d9a:	ff e3       	ldi	r31, 0x3F	; 63
     d9c:	bf 2e       	mov	r11, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	4c e3       	ldi	r20, 0x3C	; 60
     da2:	52 e0       	ldi	r21, 0x02	; 2
     da4:	60 eb       	ldi	r22, 0xB0	; 176
     da6:	77 e0       	ldi	r23, 0x07	; 7
     da8:	8c e5       	ldi	r24, 0x5C	; 92
     daa:	97 e0       	ldi	r25, 0x07	; 7
     dac:	86 dc       	rcall	.-1780   	; 0x6ba <_Z20Vector_Cross_ProductPfS_S_>
     dae:	2a e0       	ldi	r18, 0x0A	; 10
     db0:	37 ed       	ldi	r19, 0xD7	; 215
     db2:	43 ea       	ldi	r20, 0xA3	; 163
     db4:	5c e3       	ldi	r21, 0x3C	; 60
     db6:	c5 01       	movw	r24, r10
     db8:	b4 01       	movw	r22, r8
     dba:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	6c e5       	ldi	r22, 0x5C	; 92
     dc4:	77 e0       	ldi	r23, 0x07	; 7
     dc6:	8c e8       	ldi	r24, 0x8C	; 140
     dc8:	97 e0       	ldi	r25, 0x07	; 7
     dca:	f8 dc       	rcall	.-1552   	; 0x7bc <_Z12Vector_ScalePfS_f>
     dcc:	2c ea       	ldi	r18, 0xAC	; 172
     dce:	35 ec       	ldi	r19, 0xC5	; 197
     dd0:	47 ea       	ldi	r20, 0xA7	; 167
     dd2:	57 e3       	ldi	r21, 0x37	; 55
     dd4:	c5 01       	movw	r24, r10
     dd6:	b4 01       	movw	r22, r8
     dd8:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	6c e5       	ldi	r22, 0x5C	; 92
     de2:	77 e0       	ldi	r23, 0x07	; 7
     de4:	8c ee       	ldi	r24, 0xEC	; 236
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	e9 dc       	rcall	.-1582   	; 0x7bc <_Z12Vector_ScalePfS_f>
     dea:	4c ee       	ldi	r20, 0xEC	; 236
     dec:	52 e0       	ldi	r21, 0x02	; 2
     dee:	60 e8       	ldi	r22, 0x80	; 128
     df0:	77 e0       	ldi	r23, 0x07	; 7
     df2:	cb 01       	movw	r24, r22
     df4:	13 dd       	rcall	.-1498   	; 0x81c <_Z10Vector_AddPfS_S_>
     df6:	c0 90 bc 07 	lds	r12, 0x07BC
     dfa:	d0 90 bd 07 	lds	r13, 0x07BD
     dfe:	e0 90 be 07 	lds	r14, 0x07BE
     e02:	f0 90 bf 07 	lds	r15, 0x07BF
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 0e 1c 	call	0x381c	; 0x381c <cos>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <sin>
     e1a:	20 91 24 02 	lds	r18, 0x0224
     e1e:	30 91 25 02 	lds	r19, 0x0225
     e22:	40 91 26 02 	lds	r20, 0x0226
     e26:	50 91 27 02 	lds	r21, 0x0227
     e2a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
     e32:	20 91 30 02 	lds	r18, 0x0230
     e36:	30 91 31 02 	lds	r19, 0x0231
     e3a:	40 91 32 02 	lds	r20, 0x0232
     e3e:	50 91 33 02 	lds	r21, 0x0233
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	6c e3       	ldi	r22, 0x3C	; 60
     e5c:	72 e0       	ldi	r23, 0x02	; 2
     e5e:	80 e5       	ldi	r24, 0x50	; 80
     e60:	97 e0       	ldi	r25, 0x07	; 7
     e62:	ac dc       	rcall	.-1704   	; 0x7bc <_Z12Vector_ScalePfS_f>
     e64:	2a e9       	ldi	r18, 0x9A	; 154
     e66:	39 e9       	ldi	r19, 0x99	; 153
     e68:	49 e9       	ldi	r20, 0x99	; 153
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	60 e5       	ldi	r22, 0x50	; 80
     e6e:	77 e0       	ldi	r23, 0x07	; 7
     e70:	80 ee       	ldi	r24, 0xE0	; 224
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	a3 dc       	rcall	.-1722   	; 0x7bc <_Z12Vector_ScalePfS_f>
     e76:	40 ee       	ldi	r20, 0xE0	; 224
     e78:	52 e0       	ldi	r21, 0x02	; 2
     e7a:	6c e8       	ldi	r22, 0x8C	; 140
     e7c:	77 e0       	ldi	r23, 0x07	; 7
     e7e:	cb 01       	movw	r24, r22
     e80:	cd dc       	rcall	.-1638   	; 0x81c <_Z10Vector_AddPfS_S_>
     e82:	2c ea       	ldi	r18, 0xAC	; 172
     e84:	35 ec       	ldi	r19, 0xC5	; 197
     e86:	47 ea       	ldi	r20, 0xA7	; 167
     e88:	57 e3       	ldi	r21, 0x37	; 55
     e8a:	60 e5       	ldi	r22, 0x50	; 80
     e8c:	77 e0       	ldi	r23, 0x07	; 7
     e8e:	8c ee       	ldi	r24, 0xEC	; 236
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	94 dc       	rcall	.-1752   	; 0x7bc <_Z12Vector_ScalePfS_f>
     e94:	4c ee       	ldi	r20, 0xEC	; 236
     e96:	52 e0       	ldi	r21, 0x02	; 2
     e98:	60 e8       	ldi	r22, 0x80	; 128
     e9a:	77 e0       	ldi	r23, 0x07	; 7
     e9c:	cb 01       	movw	r24, r22
     e9e:	be dc       	rcall	.-1668   	; 0x81c <_Z10Vector_AddPfS_S_>
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	08 95       	ret

00000eba <_Z13Matrix_updatev>:
     eba:	4f 92       	push	r4
     ebc:	5f 92       	push	r5
     ebe:	6f 92       	push	r6
     ec0:	7f 92       	push	r7
     ec2:	8f 92       	push	r8
     ec4:	9f 92       	push	r9
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	00 d0       	rcall	.+0      	; 0xedc <_Z13Matrix_updatev+0x22>
     edc:	1f 92       	push	r1
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	60 91 ca 07 	lds	r22, 0x07CA
     ee6:	70 91 cb 07 	lds	r23, 0x07CB
     eea:	88 27       	eor	r24, r24
     eec:	77 fd       	sbrc	r23, 7
     eee:	80 95       	com	r24
     ef0:	98 2f       	mov	r25, r24
     ef2:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     ef6:	29 e7       	ldi	r18, 0x79	; 121
     ef8:	32 e2       	ldi	r19, 0x22	; 34
     efa:	40 ea       	ldi	r20, 0xA0	; 160
     efc:	5a e3       	ldi	r21, 0x3A	; 58
     efe:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     f02:	60 93 a4 07 	sts	0x07A4, r22
     f06:	70 93 a5 07 	sts	0x07A5, r23
     f0a:	80 93 a6 07 	sts	0x07A6, r24
     f0e:	90 93 a7 07 	sts	0x07A7, r25
     f12:	60 91 c8 07 	lds	r22, 0x07C8
     f16:	70 91 c9 07 	lds	r23, 0x07C9
     f1a:	88 27       	eor	r24, r24
     f1c:	77 fd       	sbrc	r23, 7
     f1e:	80 95       	com	r24
     f20:	98 2f       	mov	r25, r24
     f22:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     f26:	29 e7       	ldi	r18, 0x79	; 121
     f28:	32 e2       	ldi	r19, 0x22	; 34
     f2a:	40 ea       	ldi	r20, 0xA0	; 160
     f2c:	5a e3       	ldi	r21, 0x3A	; 58
     f2e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     f32:	60 93 a8 07 	sts	0x07A8, r22
     f36:	70 93 a9 07 	sts	0x07A9, r23
     f3a:	80 93 aa 07 	sts	0x07AA, r24
     f3e:	90 93 ab 07 	sts	0x07AB, r25
     f42:	60 91 c6 07 	lds	r22, 0x07C6
     f46:	70 91 c7 07 	lds	r23, 0x07C7
     f4a:	88 27       	eor	r24, r24
     f4c:	77 fd       	sbrc	r23, 7
     f4e:	80 95       	com	r24
     f50:	98 2f       	mov	r25, r24
     f52:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     f56:	29 e7       	ldi	r18, 0x79	; 121
     f58:	32 e2       	ldi	r19, 0x22	; 34
     f5a:	40 ea       	ldi	r20, 0xA0	; 160
     f5c:	5a e3       	ldi	r21, 0x3A	; 58
     f5e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
     f62:	60 93 ac 07 	sts	0x07AC, r22
     f66:	70 93 ad 07 	sts	0x07AD, r23
     f6a:	80 93 ae 07 	sts	0x07AE, r24
     f6e:	90 93 af 07 	sts	0x07AF, r25
     f72:	60 91 c4 07 	lds	r22, 0x07C4
     f76:	70 91 c5 07 	lds	r23, 0x07C5
     f7a:	88 27       	eor	r24, r24
     f7c:	77 fd       	sbrc	r23, 7
     f7e:	80 95       	com	r24
     f80:	98 2f       	mov	r25, r24
     f82:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     f86:	60 93 b0 07 	sts	0x07B0, r22
     f8a:	70 93 b1 07 	sts	0x07B1, r23
     f8e:	80 93 b2 07 	sts	0x07B2, r24
     f92:	90 93 b3 07 	sts	0x07B3, r25
     f96:	60 91 c2 07 	lds	r22, 0x07C2
     f9a:	70 91 c3 07 	lds	r23, 0x07C3
     f9e:	88 27       	eor	r24, r24
     fa0:	77 fd       	sbrc	r23, 7
     fa2:	80 95       	com	r24
     fa4:	98 2f       	mov	r25, r24
     fa6:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     faa:	60 93 b4 07 	sts	0x07B4, r22
     fae:	70 93 b5 07 	sts	0x07B5, r23
     fb2:	80 93 b6 07 	sts	0x07B6, r24
     fb6:	90 93 b7 07 	sts	0x07B7, r25
     fba:	60 91 c0 07 	lds	r22, 0x07C0
     fbe:	70 91 c1 07 	lds	r23, 0x07C1
     fc2:	88 27       	eor	r24, r24
     fc4:	77 fd       	sbrc	r23, 7
     fc6:	80 95       	com	r24
     fc8:	98 2f       	mov	r25, r24
     fca:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
     fce:	60 93 b8 07 	sts	0x07B8, r22
     fd2:	70 93 b9 07 	sts	0x07B9, r23
     fd6:	80 93 ba 07 	sts	0x07BA, r24
     fda:	90 93 bb 07 	sts	0x07BB, r25
     fde:	40 e8       	ldi	r20, 0x80	; 128
     fe0:	57 e0       	ldi	r21, 0x07	; 7
     fe2:	64 ea       	ldi	r22, 0xA4	; 164
     fe4:	77 e0       	ldi	r23, 0x07	; 7
     fe6:	84 e7       	ldi	r24, 0x74	; 116
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	18 dc       	rcall	.-2000   	; 0x81c <_Z10Vector_AddPfS_S_>
     fec:	4c e8       	ldi	r20, 0x8C	; 140
     fee:	57 e0       	ldi	r21, 0x07	; 7
     ff0:	64 e7       	ldi	r22, 0x74	; 116
     ff2:	77 e0       	ldi	r23, 0x07	; 7
     ff4:	88 e9       	ldi	r24, 0x98	; 152
     ff6:	97 e0       	ldi	r25, 0x07	; 7
     ff8:	11 dc       	rcall	.-2014   	; 0x81c <_Z10Vector_AddPfS_S_>
     ffa:	10 92 00 02 	sts	0x0200, r1
     ffe:	10 92 01 02 	sts	0x0201, r1
    1002:	10 92 02 02 	sts	0x0202, r1
    1006:	10 92 03 02 	sts	0x0203, r1
    100a:	c0 90 48 02 	lds	r12, 0x0248
    100e:	d0 90 49 02 	lds	r13, 0x0249
    1012:	e0 90 4a 02 	lds	r14, 0x024A
    1016:	f0 90 4b 02 	lds	r15, 0x024B
    101a:	46 01       	movw	r8, r12
    101c:	57 01       	movw	r10, r14
    101e:	b7 fa       	bst	r11, 7
    1020:	b0 94       	com	r11
    1022:	b7 f8       	bld	r11, 7
    1024:	b0 94       	com	r11
    1026:	40 90 a0 07 	lds	r4, 0x07A0
    102a:	50 90 a1 07 	lds	r5, 0x07A1
    102e:	60 90 a2 07 	lds	r6, 0x07A2
    1032:	70 90 a3 07 	lds	r7, 0x07A3
    1036:	a3 01       	movw	r20, r6
    1038:	92 01       	movw	r18, r4
    103a:	c5 01       	movw	r24, r10
    103c:	b4 01       	movw	r22, r8
    103e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1042:	60 93 04 02 	sts	0x0204, r22
    1046:	70 93 05 02 	sts	0x0205, r23
    104a:	80 93 06 02 	sts	0x0206, r24
    104e:	90 93 07 02 	sts	0x0207, r25
    1052:	80 91 9c 07 	lds	r24, 0x079C
    1056:	90 91 9d 07 	lds	r25, 0x079D
    105a:	a0 91 9e 07 	lds	r26, 0x079E
    105e:	b0 91 9f 07 	lds	r27, 0x079F
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	ab 83       	std	Y+3, r26	; 0x03
    1068:	bc 83       	std	Y+4, r27	; 0x04
    106a:	9c 01       	movw	r18, r24
    106c:	ad 01       	movw	r20, r26
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1076:	60 93 08 02 	sts	0x0208, r22
    107a:	70 93 09 02 	sts	0x0209, r23
    107e:	80 93 0a 02 	sts	0x020A, r24
    1082:	90 93 0b 02 	sts	0x020B, r25
    1086:	a3 01       	movw	r20, r6
    1088:	92 01       	movw	r18, r4
    108a:	c7 01       	movw	r24, r14
    108c:	b6 01       	movw	r22, r12
    108e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1092:	60 93 0c 02 	sts	0x020C, r22
    1096:	70 93 0d 02 	sts	0x020D, r23
    109a:	80 93 0e 02 	sts	0x020E, r24
    109e:	90 93 0f 02 	sts	0x020F, r25
    10a2:	10 92 10 02 	sts	0x0210, r1
    10a6:	10 92 11 02 	sts	0x0211, r1
    10aa:	10 92 12 02 	sts	0x0212, r1
    10ae:	10 92 13 02 	sts	0x0213, r1
    10b2:	40 90 98 07 	lds	r4, 0x0798
    10b6:	50 90 99 07 	lds	r5, 0x0799
    10ba:	60 90 9a 07 	lds	r6, 0x079A
    10be:	70 90 9b 07 	lds	r7, 0x079B
    10c2:	a3 01       	movw	r20, r6
    10c4:	92 01       	movw	r18, r4
    10c6:	c5 01       	movw	r24, r10
    10c8:	b4 01       	movw	r22, r8
    10ca:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    10ce:	60 93 14 02 	sts	0x0214, r22
    10d2:	70 93 15 02 	sts	0x0215, r23
    10d6:	80 93 16 02 	sts	0x0216, r24
    10da:	90 93 17 02 	sts	0x0217, r25
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	4b 81       	ldd	r20, Y+3	; 0x03
    10e4:	5c 81       	ldd	r21, Y+4	; 0x04
    10e6:	c5 01       	movw	r24, r10
    10e8:	b4 01       	movw	r22, r8
    10ea:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    10ee:	60 93 18 02 	sts	0x0218, r22
    10f2:	70 93 19 02 	sts	0x0219, r23
    10f6:	80 93 1a 02 	sts	0x021A, r24
    10fa:	90 93 1b 02 	sts	0x021B, r25
    10fe:	a3 01       	movw	r20, r6
    1100:	92 01       	movw	r18, r4
    1102:	c7 01       	movw	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    110a:	60 93 1c 02 	sts	0x021C, r22
    110e:	70 93 1d 02 	sts	0x021D, r23
    1112:	80 93 1e 02 	sts	0x021E, r24
    1116:	90 93 1f 02 	sts	0x021F, r25
    111a:	10 92 20 02 	sts	0x0220, r1
    111e:	10 92 21 02 	sts	0x0221, r1
    1122:	10 92 22 02 	sts	0x0222, r1
    1126:	10 92 23 02 	sts	0x0223, r1
    112a:	4a e2       	ldi	r20, 0x2A	; 42
    112c:	57 e0       	ldi	r21, 0x07	; 7
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	72 e0       	ldi	r23, 0x02	; 2
    1132:	84 e2       	ldi	r24, 0x24	; 36
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	fa d9       	rcall	.-3084   	; 0x52c <_Z15Matrix_MultiplyPA3_fS0_S0_>
    1138:	c1 2c       	mov	r12, r1
    113a:	d1 2c       	mov	r13, r1
    113c:	a1 2c       	mov	r10, r1
    113e:	b1 2c       	mov	r11, r1
    1140:	21 c0       	rjmp	.+66     	; 0x1184 <_Z13Matrix_updatev+0x2ca>
    1142:	d8 01       	movw	r26, r16
    1144:	2d 91       	ld	r18, X+
    1146:	3d 91       	ld	r19, X+
    1148:	4d 91       	ld	r20, X+
    114a:	5d 91       	ld	r21, X+
    114c:	8d 01       	movw	r16, r26
    114e:	f4 01       	movw	r30, r8
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    115c:	d4 01       	movw	r26, r8
    115e:	6d 93       	st	X+, r22
    1160:	7d 93       	st	X+, r23
    1162:	8d 93       	st	X+, r24
    1164:	9d 93       	st	X+, r25
    1166:	4d 01       	movw	r8, r26
    1168:	bf ef       	ldi	r27, 0xFF	; 255
    116a:	eb 1a       	sub	r14, r27
    116c:	fb 0a       	sbc	r15, r27
    116e:	e3 e0       	ldi	r30, 0x03	; 3
    1170:	ee 16       	cp	r14, r30
    1172:	f1 04       	cpc	r15, r1
    1174:	31 f7       	brne	.-52     	; 0x1142 <_Z13Matrix_updatev+0x288>
    1176:	fc e0       	ldi	r31, 0x0C	; 12
    1178:	cf 0e       	add	r12, r31
    117a:	d1 1c       	adc	r13, r1
    117c:	84 e2       	ldi	r24, 0x24	; 36
    117e:	c8 16       	cp	r12, r24
    1180:	d1 04       	cpc	r13, r1
    1182:	51 f0       	breq	.+20     	; 0x1198 <_Z13Matrix_updatev+0x2de>
    1184:	d6 01       	movw	r26, r12
    1186:	ac 5d       	subi	r26, 0xDC	; 220
    1188:	bd 4f       	sbci	r27, 0xFD	; 253
    118a:	4d 01       	movw	r8, r26
    118c:	86 01       	movw	r16, r12
    118e:	06 5d       	subi	r16, 0xD6	; 214
    1190:	18 4f       	sbci	r17, 0xF8	; 248
    1192:	ea 2c       	mov	r14, r10
    1194:	fb 2c       	mov	r15, r11
    1196:	d5 cf       	rjmp	.-86     	; 0x1142 <_Z13Matrix_updatev+0x288>
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	7f 90       	pop	r7
    11ba:	6f 90       	pop	r6
    11bc:	5f 90       	pop	r5
    11be:	4f 90       	pop	r4
    11c0:	08 95       	ret

000011c2 <_Z12Euler_anglesv>:
    11c2:	60 91 3c 02 	lds	r22, 0x023C
    11c6:	70 91 3d 02 	lds	r23, 0x023D
    11ca:	80 91 3e 02 	lds	r24, 0x023E
    11ce:	90 91 3f 02 	lds	r25, 0x023F
    11d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <asin>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	b0 58       	subi	r27, 0x80	; 128
    11dc:	80 93 6c 07 	sts	0x076C, r24
    11e0:	90 93 6d 07 	sts	0x076D, r25
    11e4:	a0 93 6e 07 	sts	0x076E, r26
    11e8:	b0 93 6f 07 	sts	0x076F, r27
    11ec:	20 91 44 02 	lds	r18, 0x0244
    11f0:	30 91 45 02 	lds	r19, 0x0245
    11f4:	40 91 46 02 	lds	r20, 0x0246
    11f8:	50 91 47 02 	lds	r21, 0x0247
    11fc:	60 91 40 02 	lds	r22, 0x0240
    1200:	70 91 41 02 	lds	r23, 0x0241
    1204:	80 91 42 02 	lds	r24, 0x0242
    1208:	90 91 43 02 	lds	r25, 0x0243
    120c:	0e 94 b7 1b 	call	0x376e	; 0x376e <atan2>
    1210:	60 93 70 07 	sts	0x0770, r22
    1214:	70 93 71 07 	sts	0x0771, r23
    1218:	80 93 72 07 	sts	0x0772, r24
    121c:	90 93 73 07 	sts	0x0773, r25
    1220:	20 91 24 02 	lds	r18, 0x0224
    1224:	30 91 25 02 	lds	r19, 0x0225
    1228:	40 91 26 02 	lds	r20, 0x0226
    122c:	50 91 27 02 	lds	r21, 0x0227
    1230:	60 91 30 02 	lds	r22, 0x0230
    1234:	70 91 31 02 	lds	r23, 0x0231
    1238:	80 91 32 02 	lds	r24, 0x0232
    123c:	90 91 33 02 	lds	r25, 0x0233
    1240:	0e 94 b7 1b 	call	0x376e	; 0x376e <atan2>
    1244:	60 93 68 07 	sts	0x0768, r22
    1248:	70 93 69 07 	sts	0x0769, r23
    124c:	80 93 6a 07 	sts	0x076A, r24
    1250:	90 93 6b 07 	sts	0x076B, r25
    1254:	08 95       	ret

00001256 <_Z12readIRSensorv>:
    1256:	86 e3       	ldi	r24, 0x36	; 54
    1258:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <analogRead>
    125c:	bc 01       	movw	r22, r24
    125e:	88 27       	eor	r24, r24
    1260:	77 fd       	sbrc	r23, 7
    1262:	80 95       	com	r24
    1264:	98 2f       	mov	r25, r24
    1266:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 ea       	ldi	r20, 0xA0	; 160
    1270:	5b e3       	ldi	r21, 0x3B	; 59
    1272:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1276:	60 93 ee 07 	sts	0x07EE, r22
    127a:	70 93 ef 07 	sts	0x07EF, r23
    127e:	80 93 f0 07 	sts	0x07F0, r24
    1282:	90 93 f1 07 	sts	0x07F1, r25
    1286:	28 e4       	ldi	r18, 0x48	; 72
    1288:	31 ee       	ldi	r19, 0xE1	; 225
    128a:	4a e9       	ldi	r20, 0x9A	; 154
    128c:	5f eb       	ldi	r21, 0xBF	; 191
    128e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <pow>
    1292:	21 e7       	ldi	r18, 0x71	; 113
    1294:	3d e3       	ldi	r19, 0x3D	; 61
    1296:	48 e5       	ldi	r20, 0x58	; 88
    1298:	52 e4       	ldi	r21, 0x42	; 66
    129a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    129e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__fixunssfsi>
    12a2:	70 93 ed 07 	sts	0x07ED, r23
    12a6:	60 93 ec 07 	sts	0x07EC, r22
    12aa:	08 95       	ret

000012ac <_GLOBAL__sub_I_SENSOR_SIGN>:
    12ac:	2c e2       	ldi	r18, 0x2C	; 44
    12ae:	31 e0       	ldi	r19, 0x01	; 1
    12b0:	47 e1       	ldi	r20, 0x17	; 23
    12b2:	66 e1       	ldi	r22, 0x16	; 22
    12b4:	82 ef       	ldi	r24, 0xF2	; 242
    12b6:	97 e0       	ldi	r25, 0x07	; 7
    12b8:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7NewPingC1Ehhj>
    12bc:	2c e2       	ldi	r18, 0x2C	; 44
    12be:	31 e0       	ldi	r19, 0x01	; 1
    12c0:	49 e1       	ldi	r20, 0x19	; 25
    12c2:	68 e1       	ldi	r22, 0x18	; 24
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	98 e0       	ldi	r25, 0x08	; 8
    12c8:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7NewPingC1Ehhj>
    12cc:	2c e2       	ldi	r18, 0x2C	; 44
    12ce:	31 e0       	ldi	r19, 0x01	; 1
    12d0:	4b e1       	ldi	r20, 0x1B	; 27
    12d2:	6a e1       	ldi	r22, 0x1A	; 26
    12d4:	86 e1       	ldi	r24, 0x16	; 22
    12d6:	98 e0       	ldi	r25, 0x08	; 8
    12d8:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7NewPingC1Ehhj>
    12dc:	2c e2       	ldi	r18, 0x2C	; 44
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	4d e1       	ldi	r20, 0x1D	; 29
    12e2:	6c e1       	ldi	r22, 0x1C	; 28
    12e4:	88 e2       	ldi	r24, 0x28	; 40
    12e6:	98 e0       	ldi	r25, 0x08	; 8
    12e8:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7NewPingC1Ehhj>
    12ec:	2c e2       	ldi	r18, 0x2C	; 44
    12ee:	31 e0       	ldi	r19, 0x01	; 1
    12f0:	4f e1       	ldi	r20, 0x1F	; 31
    12f2:	6e e1       	ldi	r22, 0x1E	; 30
    12f4:	8a e3       	ldi	r24, 0x3A	; 58
    12f6:	98 e0       	ldi	r25, 0x08	; 8
    12f8:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN7NewPingC1Ehhj>
    12fc:	8e e1       	ldi	r24, 0x1E	; 30
    12fe:	97 e0       	ldi	r25, 0x07	; 7
    1300:	ef d1       	rcall	.+990    	; 0x16e0 <_ZN3L3GC1Ev>
    1302:	88 ef       	ldi	r24, 0xF8	; 248
    1304:	96 e0       	ldi	r25, 0x06	; 6
    1306:	ee c3       	rjmp	.+2012   	; 0x1ae4 <_ZN6LSM303C1Ev>
    1308:	08 95       	ret

0000130a <_Z10debugPrintPKc>:
    130a:	bc 01       	movw	r22, r24
    130c:	8d ea       	ldi	r24, 0xAD	; 173
    130e:	9f e0       	ldi	r25, 0x0F	; 15
    1310:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN5Print7printlnEPKc>
    1314:	8d ea       	ldi	r24, 0xAD	; 173
    1316:	9f e0       	ldi	r25, 0x0F	; 15
    1318:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <_ZN14HardwareSerial5flushEv>
    131c:	08 95       	ret

0000131e <_Z7dprintfPKcz>:
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	fe 01       	movw	r30, r28
    1328:	36 96       	adiw	r30, 0x06	; 6
    132a:	61 91       	ld	r22, Z+
    132c:	71 91       	ld	r23, Z+
    132e:	af 01       	movw	r20, r30
    1330:	88 ef       	ldi	r24, 0xF8	; 248
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 41 26 	call	0x4c82	; 0x4c82 <vsprintf>
    1338:	88 ef       	ldi	r24, 0xF8	; 248
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	e6 df       	rcall	.-52     	; 0x130a <_Z10debugPrintPKc>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <_Z5task2Pv>:
{
	while(1)
	{
		vTaskDelay(100);
		readIRSensor(); 
		dprintf("Hi: %d %d %d %d",ToDeg(roll) ,ToDeg(pitch), ToDeg(yaw),compass.heading());
    1344:	ce e9       	ldi	r28, 0x9E	; 158
    1346:	d2 e0       	ldi	r29, 0x02	; 2

void task2(void	*p)
{
	while(1)
	{
		vTaskDelay(100);
    1348:	84 e6       	ldi	r24, 0x64	; 100
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <vTaskDelay>
		readIRSensor(); 
    1350:	82 df       	rcall	.-252    	; 0x1256 <_Z12readIRSensorv>
		dprintf("Hi: %d %d %d %d",ToDeg(roll) ,ToDeg(pitch), ToDeg(yaw),compass.heading());
    1352:	88 ef       	ldi	r24, 0xF8	; 248
    1354:	96 e0       	ldi	r25, 0x06	; 6
    1356:	e7 d6       	rcall	.+3534   	; 0x2126 <_ZN6LSM3037headingEv>
    1358:	9f 93       	push	r25
    135a:	8f 93       	push	r24
    135c:	7f 93       	push	r23
    135e:	6f 93       	push	r22
    1360:	21 ee       	ldi	r18, 0xE1	; 225
    1362:	3e e2       	ldi	r19, 0x2E	; 46
    1364:	45 e6       	ldi	r20, 0x65	; 101
    1366:	52 e4       	ldi	r21, 0x42	; 66
    1368:	60 91 68 07 	lds	r22, 0x0768
    136c:	70 91 69 07 	lds	r23, 0x0769
    1370:	80 91 6a 07 	lds	r24, 0x076A
    1374:	90 91 6b 07 	lds	r25, 0x076B
    1378:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    137c:	9f 93       	push	r25
    137e:	8f 93       	push	r24
    1380:	7f 93       	push	r23
    1382:	6f 93       	push	r22
    1384:	21 ee       	ldi	r18, 0xE1	; 225
    1386:	3e e2       	ldi	r19, 0x2E	; 46
    1388:	45 e6       	ldi	r20, 0x65	; 101
    138a:	52 e4       	ldi	r21, 0x42	; 66
    138c:	60 91 6c 07 	lds	r22, 0x076C
    1390:	70 91 6d 07 	lds	r23, 0x076D
    1394:	80 91 6e 07 	lds	r24, 0x076E
    1398:	90 91 6f 07 	lds	r25, 0x076F
    139c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    13a0:	9f 93       	push	r25
    13a2:	8f 93       	push	r24
    13a4:	7f 93       	push	r23
    13a6:	6f 93       	push	r22
    13a8:	21 ee       	ldi	r18, 0xE1	; 225
    13aa:	3e e2       	ldi	r19, 0x2E	; 46
    13ac:	45 e6       	ldi	r20, 0x65	; 101
    13ae:	52 e4       	ldi	r21, 0x42	; 66
    13b0:	60 91 70 07 	lds	r22, 0x0770
    13b4:	70 91 71 07 	lds	r23, 0x0771
    13b8:	80 91 72 07 	lds	r24, 0x0772
    13bc:	90 91 73 07 	lds	r25, 0x0773
    13c0:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    13c4:	9f 93       	push	r25
    13c6:	8f 93       	push	r24
    13c8:	7f 93       	push	r23
    13ca:	6f 93       	push	r22
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	a6 df       	rcall	.-180    	; 0x131e <_Z7dprintfPKcz>
		if((millis()-timer)>=50)  // Main loop runs at 50Hz
    13d2:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    13d6:	c0 90 e8 07 	lds	r12, 0x07E8
    13da:	d0 90 e9 07 	lds	r13, 0x07E9
    13de:	e0 90 ea 07 	lds	r14, 0x07EA
    13e2:	f0 90 eb 07 	lds	r15, 0x07EB
    13e6:	ab 01       	movw	r20, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	4c 19       	sub	r20, r12
    13ec:	5d 09       	sbc	r21, r13
    13ee:	6e 09       	sbc	r22, r14
    13f0:	7f 09       	sbc	r23, r15
    13f2:	8d b7       	in	r24, 0x3d	; 61
    13f4:	9e b7       	in	r25, 0x3e	; 62
    13f6:	42 96       	adiw	r24, 0x12	; 18
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	9e bf       	out	0x3e, r25	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	8d bf       	out	0x3d, r24	; 61
    1402:	42 33       	cpi	r20, 0x32	; 50
    1404:	51 05       	cpc	r21, r1
    1406:	61 05       	cpc	r22, r1
    1408:	71 05       	cpc	r23, r1
    140a:	08 f4       	brcc	.+2      	; 0x140e <_Z5task2Pv+0xca>
    140c:	9d cf       	rjmp	.-198    	; 0x1348 <_Z5task2Pv+0x4>
		{
			counter++;
    140e:	20 91 4e 07 	lds	r18, 0x074E
    1412:	30 91 4f 07 	lds	r19, 0x074F
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	30 93 4f 07 	sts	0x074F, r19
    141e:	20 93 4e 07 	sts	0x074E, r18
			timer_old = timer;
    1422:	c0 92 e4 07 	sts	0x07E4, r12
    1426:	d0 92 e5 07 	sts	0x07E5, r13
    142a:	e0 92 e6 07 	sts	0x07E6, r14
    142e:	f0 92 e7 07 	sts	0x07E7, r15
			timer=millis();
    1432:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    1436:	60 93 e8 07 	sts	0x07E8, r22
    143a:	70 93 e9 07 	sts	0x07E9, r23
    143e:	80 93 ea 07 	sts	0x07EA, r24
    1442:	90 93 eb 07 	sts	0x07EB, r25
			if (timer>timer_old)
    1446:	00 91 e4 07 	lds	r16, 0x07E4
    144a:	10 91 e5 07 	lds	r17, 0x07E5
    144e:	20 91 e6 07 	lds	r18, 0x07E6
    1452:	30 91 e7 07 	lds	r19, 0x07E7
    1456:	06 17       	cp	r16, r22
    1458:	17 07       	cpc	r17, r23
    145a:	28 07       	cpc	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	ac f4       	brge	.+42     	; 0x148a <_Z5task2Pv+0x146>
			G_Dt = (timer-timer_old)/1000.0;    // Real time of loop run. We use this on the DCM algorithm (gyro integration time)
    1460:	60 1b       	sub	r22, r16
    1462:	71 0b       	sbc	r23, r17
    1464:	82 0b       	sbc	r24, r18
    1466:	93 0b       	sbc	r25, r19
    1468:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a e7       	ldi	r20, 0x7A	; 122
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1478:	60 93 48 02 	sts	0x0248, r22
    147c:	70 93 49 02 	sts	0x0249, r23
    1480:	80 93 4a 02 	sts	0x024A, r24
    1484:	90 93 4b 02 	sts	0x024B, r25
    1488:	08 c0       	rjmp	.+16     	; 0x149a <_Z5task2Pv+0x156>
			else
			G_Dt = 0;
    148a:	10 92 48 02 	sts	0x0248, r1
    148e:	10 92 49 02 	sts	0x0249, r1
    1492:	10 92 4a 02 	sts	0x024A, r1
    1496:	10 92 4b 02 	sts	0x024B, r1
			// *** DCM algorithm
			// Data adquisition
			//Read_Gyro();   // This read gyro data
			//Read_Accel();     // Read I2C accelerometer
			
			if (counter > 5)  // Read compass data at 10Hz... (5 loop runs)
    149a:	80 91 4e 07 	lds	r24, 0x074E
    149e:	90 91 4f 07 	lds	r25, 0x074F
    14a2:	06 97       	sbiw	r24, 0x06	; 6
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <_Z5task2Pv+0x16a>
			{
				counter=0;
    14a6:	10 92 4f 07 	sts	0x074F, r1
    14aa:	10 92 4e 07 	sts	0x074E, r1
				//Read_Compass();    // Read I2C magnetometer
				//Compass_Heading(); // Calculate magnetic heading
			}
			
			// Calculations...
			Matrix_update();
    14ae:	05 dd       	rcall	.-1526   	; 0xeba <_Z13Matrix_updatev>
			Normalize();
    14b0:	f2 da       	rcall	.-2588   	; 0xa96 <_Z9Normalizev>
			Drift_correction();
    14b2:	90 db       	rcall	.-2272   	; 0xbd4 <_Z16Drift_correctionv>
			Euler_angles();
    14b4:	86 de       	rcall	.-756    	; 0x11c2 <_Z12Euler_anglesv>
    14b6:	48 cf       	rjmp	.-368    	; 0x1348 <_Z5task2Pv+0x4>

000014b8 <setup>:
{
	//	Do	nothing.
}

void setup()
{
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
	Serial.begin(115200);	
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	52 ec       	ldi	r21, 0xC2	; 194
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	8d ea       	ldi	r24, 0xAD	; 173
    14da:	9f e0       	ldi	r25, 0x0F	; 15
    14dc:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN14HardwareSerial5beginEm>
	pinMode (STATUS_LED,OUTPUT);  // Status LED
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	8d e0       	ldi	r24, 0x0D	; 13
    14e4:	0e 94 7f 25 	call	0x4afe	; 0x4afe <pinMode>
	
	I2C_Init();
    14e8:	c9 d9       	rcall	.-3182   	; 0x87c <_Z8I2C_Initv>
	dprintf("be");
    14ea:	8e ea       	ldi	r24, 0xAE	; 174
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	15 df       	rcall	.-470    	; 0x131e <_Z7dprintfPKcz>
	//Serial.println("Pololu MinIMU-9 + Arduino AHRS");

	//digitalWrite(STATUS_LED,LOW);
	//vTaskDelay(1500);
	
	Accel_Init();
    14f4:	37 da       	rcall	.-2962   	; 0x964 <_Z10Accel_Initv>
	Compass_Init();
	Gyro_Init();
    14f6:	c7 d9       	rcall	.-3186   	; 0x886 <_Z9Gyro_Initv>
	
	//vTaskDelay(20);
	delay(20);
    14f8:	64 e1       	ldi	r22, 0x14	; 20
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 71 24 	call	0x48e2	; 0x48e2 <delay>
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	00 e2       	ldi	r16, 0x20	; 32
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	0f 2e       	mov	r0, r31
    150e:	f8 ed       	ldi	r31, 0xD8	; 216
    1510:	ef 2e       	mov	r14, r31
    1512:	f7 e0       	ldi	r31, 0x07	; 7
    1514:	ff 2e       	mov	r15, r31
    1516:	f0 2d       	mov	r31, r0
    1518:	cc ec       	ldi	r28, 0xCC	; 204
    151a:	d7 e0       	ldi	r29, 0x07	; 7
    151c:	0f 2e       	mov	r0, r31
    151e:	f4 ee       	ldi	r31, 0xE4	; 228
    1520:	af 2e       	mov	r10, r31
    1522:	f7 e0       	ldi	r31, 0x07	; 7
    1524:	bf 2e       	mov	r11, r31
    1526:	f0 2d       	mov	r31, r0
	
	for(int i=0;i<32;i++)    // We take some readings...
	{
		Read_Gyro();
    1528:	c2 d9       	rcall	.-3196   	; 0x8ae <_Z9Read_Gyrov>
		Read_Accel();
    152a:	41 da       	rcall	.-2942   	; 0x9ae <_Z10Read_Accelv>
    152c:	d7 01       	movw	r26, r14
    152e:	8c 2e       	mov	r8, r28
    1530:	9d 2e       	mov	r9, r29
    1532:	fe 01       	movw	r30, r28
		for(int y=0; y<6; y++)   // Cumulate values
		AN_OFFSET[y] += AN[y];
    1534:	8d 91       	ld	r24, X+
    1536:	9d 91       	ld	r25, X+
    1538:	20 81       	ld	r18, Z
    153a:	31 81       	ldd	r19, Z+1	; 0x01
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	81 93       	st	Z+, r24
    1542:	91 93       	st	Z+, r25
	
	for(int i=0;i<32;i++)    // We take some readings...
	{
		Read_Gyro();
		Read_Accel();
		for(int y=0; y<6; y++)   // Cumulate values
    1544:	aa 15       	cp	r26, r10
    1546:	bb 05       	cpc	r27, r11
    1548:	a9 f7       	brne	.-22     	; 0x1534 <setup+0x7c>
		AN_OFFSET[y] += AN[y];
	//	vTaskDelay(20);
		delay(20);
    154a:	64 e1       	ldi	r22, 0x14	; 20
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 71 24 	call	0x48e2	; 0x48e2 <delay>
    1556:	01 50       	subi	r16, 0x01	; 1
    1558:	11 09       	sbc	r17, r1
	Gyro_Init();
	
	//vTaskDelay(20);
	delay(20);
	
	for(int i=0;i<32;i++)    // We take some readings...
    155a:	01 15       	cp	r16, r1
    155c:	11 05       	cpc	r17, r1
    155e:	21 f7       	brne	.-56     	; 0x1528 <setup+0x70>
    1560:	28 ed       	ldi	r18, 0xD8	; 216
    1562:	37 e0       	ldi	r19, 0x07	; 7
    1564:	e8 2d       	mov	r30, r8
    1566:	f9 2d       	mov	r31, r9
    1568:	df 01       	movw	r26, r30
	//	vTaskDelay(20);
		delay(20);
	}
	
	for(int y=0; y<6; y++)
	AN_OFFSET[y] = AN_OFFSET[y]/32;
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	99 23       	and	r25, r25
    1570:	0c f4       	brge	.+2      	; 0x1574 <setup+0xbc>
    1572:	4f 96       	adiw	r24, 0x1f	; 31
    1574:	95 95       	asr	r25
    1576:	87 95       	ror	r24
    1578:	95 95       	asr	r25
    157a:	87 95       	ror	r24
    157c:	95 95       	asr	r25
    157e:	87 95       	ror	r24
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	8d 93       	st	X+, r24
    158a:	9c 93       	st	X, r25
    158c:	32 96       	adiw	r30, 0x02	; 2
		AN_OFFSET[y] += AN[y];
	//	vTaskDelay(20);
		delay(20);
	}
	
	for(int y=0; y<6; y++)
    158e:	e2 17       	cp	r30, r18
    1590:	f3 07       	cpc	r31, r19
    1592:	51 f7       	brne	.-44     	; 0x1568 <setup+0xb0>
	AN_OFFSET[y] = AN_OFFSET[y]/32;
	
	AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];
    1594:	e6 ed       	ldi	r30, 0xD6	; 214
    1596:	f7 e0       	ldi	r31, 0x07	; 7
    1598:	80 91 56 02 	lds	r24, 0x0256
    159c:	d8 2e       	mov	r13, r24
    159e:	c1 2c       	mov	r12, r1
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	8c 19       	sub	r24, r12
    15a6:	9d 09       	sbc	r25, r13
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
	//Serial.println("Offset:");
	//for(int y=0; y<6; y++)
	//Serial.println(AN_OFFSET[y]);
	
	//vTaskDelay(2000);
	delay(2000);
    15ac:	60 ed       	ldi	r22, 0xD0	; 208
    15ae:	77 e0       	ldi	r23, 0x07	; 7
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 71 24 	call	0x48e2	; 0x48e2 <delay>
	digitalWrite(STATUS_LED,HIGH);
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	8d e0       	ldi	r24, 0x0D	; 13
    15bc:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <digitalWrite>
	
	timer=millis();
    15c0:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    15c4:	60 93 e8 07 	sts	0x07E8, r22
    15c8:	70 93 e9 07 	sts	0x07E9, r23
    15cc:	80 93 ea 07 	sts	0x07EA, r24
    15d0:	90 93 eb 07 	sts	0x07EB, r25
	delay(20);
    15d4:	64 e1       	ldi	r22, 0x14	; 20
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <delay>
	//vTaskDelay(20);
	counter=0;
    15e0:	10 92 4f 07 	sts	0x074F, r1
    15e4:	10 92 4e 07 	sts	0x074E, r1
	dprintf("en");
    15e8:	81 eb       	ldi	r24, 0xB1	; 177
    15ea:	92 e0       	ldi	r25, 0x02	; 2
    15ec:	9f 93       	push	r25
    15ee:	8f 93       	push	r24
    15f0:	96 de       	rcall	.-724    	; 0x131e <_Z7dprintfPKcz>
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	08 95       	ret

00001610 <main>:


int	main(void)
{
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	1f 92       	push	r1
    1624:	1f 92       	push	r1
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	init();
    162a:	0e 94 99 24 	call	0x4932	; 0x4932 <init>
	setup();
    162e:	44 df       	rcall	.-376    	; 0x14b8 <setup>
	TaskHandle_t	t1,	t2;
	//	Create	tasks
	//xTaskCreate(task1,	"Task	1",	STACK_DEPTH,	NULL,	6,	&t1);
	xTaskCreate(task2,	"Task	2",	STACK_DEPTH,	NULL,	5,	&t2);
    1630:	a1 2c       	mov	r10, r1
    1632:	b1 2c       	mov	r11, r1
    1634:	c1 2c       	mov	r12, r1
    1636:	d1 2c       	mov	r13, r1
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	7c 01       	movw	r14, r24
    163e:	05 e0       	ldi	r16, 0x05	; 5
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	64 eb       	ldi	r22, 0xB4	; 180
    164a:	72 e0       	ldi	r23, 0x02	; 2
    164c:	82 ea       	ldi	r24, 0xA2	; 162
    164e:	99 e0       	ldi	r25, 0x09	; 9
    1650:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGenericCreate>
	vTaskStartScheduler();
    1654:	0e 94 20 16 	call	0x2c40	; 0x2c40 <vTaskStartScheduler>
	
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	08 95       	ret

00001674 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    167a:	0e 94 49 16 	call	0x2c92	; 0x2c92 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    167e:	80 91 4c 08 	lds	r24, 0x084C
    1682:	90 91 4d 08 	lds	r25, 0x084D
    1686:	89 2b       	or	r24, r25
    1688:	31 f4       	brne	.+12     	; 0x1696 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    168a:	81 e5       	ldi	r24, 0x51	; 81
    168c:	98 e0       	ldi	r25, 0x08	; 8
    168e:	90 93 4d 08 	sts	0x084D, r25
    1692:	80 93 4c 08 	sts	0x084C, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1696:	40 91 4e 08 	lds	r20, 0x084E
    169a:	50 91 4f 08 	lds	r21, 0x084F
    169e:	9e 01       	movw	r18, r28
    16a0:	24 0f       	add	r18, r20
    16a2:	35 1f       	adc	r19, r21
    16a4:	2b 3d       	cpi	r18, 0xDB	; 219
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	38 07       	cpc	r19, r24
    16aa:	70 f4       	brcc	.+28     	; 0x16c8 <pvPortMalloc+0x54>
    16ac:	42 17       	cp	r20, r18
    16ae:	53 07       	cpc	r21, r19
    16b0:	70 f4       	brcc	.+28     	; 0x16ce <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    16b2:	c0 91 4c 08 	lds	r28, 0x084C
    16b6:	d0 91 4d 08 	lds	r29, 0x084D
    16ba:	c4 0f       	add	r28, r20
    16bc:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    16be:	30 93 4f 08 	sts	0x084F, r19
    16c2:	20 93 4e 08 	sts	0x084E, r18
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    16c8:	c0 e0       	ldi	r28, 0x00	; 0
    16ca:	d0 e0       	ldi	r29, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <pvPortMalloc+0x5e>
    16ce:	c0 e0       	ldi	r28, 0x00	; 0
    16d0:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    16d2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    16d6:	ce 01       	movw	r24, r28
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    16de:	08 95       	ret

000016e0 <_ZN3L3GC1Ev>:
  Wire.requestFrom(address, (byte)1);
  value = Wire.read();
  Wire.endTransmission();

  return value;
}
    16e0:	fc 01       	movw	r30, r24
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	87 83       	std	Z+7, r24	; 0x07
    16e6:	12 86       	std	Z+10, r1	; 0x0a
    16e8:	11 86       	std	Z+9, r1	; 0x09
    16ea:	13 86       	std	Z+11, r1	; 0x0b
    16ec:	08 95       	ret

000016ee <_ZN3L3G8writeRegEhh>:
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    16f8:	06 2f       	mov	r16, r22
    16fa:	14 2f       	mov	r17, r20
    16fc:	68 85       	ldd	r22, Y+8	; 0x08
    16fe:	85 ef       	ldi	r24, 0xF5	; 245
    1700:	9e e0       	ldi	r25, 0x0E	; 14
    1702:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
    1706:	60 2f       	mov	r22, r16
    1708:	85 ef       	ldi	r24, 0xF5	; 245
    170a:	9e e0       	ldi	r25, 0x0E	; 14
    170c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    1710:	61 2f       	mov	r22, r17
    1712:	85 ef       	ldi	r24, 0xF5	; 245
    1714:	9e e0       	ldi	r25, 0x0E	; 14
    1716:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    171a:	85 ef       	ldi	r24, 0xF5	; 245
    171c:	9e e0       	ldi	r25, 0x0E	; 14
    171e:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    1722:	8e 83       	std	Y+6, r24	; 0x06
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <_ZN3L3G13enableDefaultEv>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	ec 01       	movw	r28, r24
    1734:	8f 81       	ldd	r24, Y+7	; 0x07
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	21 f4       	brne	.+8      	; 0x1742 <_ZN3L3G13enableDefaultEv+0x14>
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	69 e3       	ldi	r22, 0x39	; 57
    173e:	ce 01       	movw	r24, r28
    1740:	d6 df       	rcall	.-84     	; 0x16ee <_ZN3L3G8writeRegEhh>
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	63 e2       	ldi	r22, 0x23	; 35
    1746:	ce 01       	movw	r24, r28
    1748:	d2 df       	rcall	.-92     	; 0x16ee <_ZN3L3G8writeRegEhh>
    174a:	4f e6       	ldi	r20, 0x6F	; 111
    174c:	60 e2       	ldi	r22, 0x20	; 32
    174e:	ce 01       	movw	r24, r28
    1750:	ce df       	rcall	.-100    	; 0x16ee <_ZN3L3G8writeRegEhh>
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <_ZN3L3G4readEv>:

// Reads the 3 gyro channels and stores them in vector g
void L3G::read()
{
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ec 01       	movw	r28, r24
  Wire.beginTransmission(address);
    1770:	68 85       	ldd	r22, Y+8	; 0x08
    1772:	85 ef       	ldi	r24, 0xF5	; 245
    1774:	9e e0       	ldi	r25, 0x0E	; 14
    1776:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    177a:	e0 91 f5 0e 	lds	r30, 0x0EF5
    177e:	f0 91 f6 0e 	lds	r31, 0x0EF6
    1782:	01 90       	ld	r0, Z+
    1784:	f0 81       	ld	r31, Z
    1786:	e0 2d       	mov	r30, r0
    1788:	68 ea       	ldi	r22, 0xA8	; 168
    178a:	85 ef       	ldi	r24, 0xF5	; 245
    178c:	9e e0       	ldi	r25, 0x0E	; 14
    178e:	19 95       	eicall
  // assert the MSB of the address to get the gyro
  // to do slave-transmit subaddress updating.
  Wire.write(OUT_X_L | (1 << 7));
  Wire.endTransmission();
    1790:	85 ef       	ldi	r24, 0xF5	; 245
    1792:	9e e0       	ldi	r25, 0x0E	; 14
    1794:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(address, (byte)6);
    1798:	46 e0       	ldi	r20, 0x06	; 6
    179a:	68 85       	ldd	r22, Y+8	; 0x08
    179c:	85 ef       	ldi	r24, 0xF5	; 245
    179e:	9e e0       	ldi	r25, 0x0E	; 14
    17a0:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN7TwoWire11requestFromEhh>
  
  unsigned int millis_start = millis();
    17a4:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    17a8:	8b 01       	movw	r16, r22
  while (Wire.available() < 6)
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <_ZN3L3G4readEv+0x74>
  {
    if (io_timeout > 0 && ((unsigned int)millis() - millis_start) > io_timeout)
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	89 2b       	or	r24, r25
    17b2:	61 f0       	breq	.+24     	; 0x17cc <_ZN3L3G4readEv+0x74>
    17b4:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    17b8:	60 1b       	sub	r22, r16
    17ba:	71 0b       	sbc	r23, r17
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	86 17       	cp	r24, r22
    17c2:	97 07       	cpc	r25, r23
    17c4:	18 f4       	brcc	.+6      	; 0x17cc <_ZN3L3G4readEv+0x74>
    {
      did_timeout = true;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
      return;
    17ca:	32 c0       	rjmp	.+100    	; 0x1830 <_ZN3L3G4readEv+0xd8>
  Wire.write(OUT_X_L | (1 << 7));
  Wire.endTransmission();
  Wire.requestFrom(address, (byte)6);
  
  unsigned int millis_start = millis();
  while (Wire.available() < 6)
    17cc:	85 ef       	ldi	r24, 0xF5	; 245
    17ce:	9e e0       	ldi	r25, 0x0E	; 14
    17d0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <_ZN7TwoWire9availableEv>
    17d4:	06 97       	sbiw	r24, 0x06	; 6
    17d6:	54 f3       	brlt	.-44     	; 0x17ac <_ZN3L3G4readEv+0x54>
      did_timeout = true;
      return;
    }
  }

  uint8_t xlg = Wire.read();
    17d8:	85 ef       	ldi	r24, 0xF5	; 245
    17da:	9e e0       	ldi	r25, 0x0E	; 14
    17dc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    17e0:	a8 2e       	mov	r10, r24
  uint8_t xhg = Wire.read();
    17e2:	85 ef       	ldi	r24, 0xF5	; 245
    17e4:	9e e0       	ldi	r25, 0x0E	; 14
    17e6:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    17ea:	98 2e       	mov	r9, r24
  uint8_t ylg = Wire.read();
    17ec:	85 ef       	ldi	r24, 0xF5	; 245
    17ee:	9e e0       	ldi	r25, 0x0E	; 14
    17f0:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    17f4:	08 2f       	mov	r16, r24
  uint8_t yhg = Wire.read();
    17f6:	85 ef       	ldi	r24, 0xF5	; 245
    17f8:	9e e0       	ldi	r25, 0x0E	; 14
    17fa:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    17fe:	b8 2e       	mov	r11, r24
  uint8_t zlg = Wire.read();
    1800:	85 ef       	ldi	r24, 0xF5	; 245
    1802:	9e e0       	ldi	r25, 0x0E	; 14
    1804:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    1808:	18 2f       	mov	r17, r24
  uint8_t zhg = Wire.read();
    180a:	85 ef       	ldi	r24, 0xF5	; 245
    180c:	9e e0       	ldi	r25, 0x0E	; 14
    180e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>

  // combine high and low bytes
  g.x = (int16_t)(xhg << 8 | xlg);
    1812:	d9 2c       	mov	r13, r9
    1814:	c1 2c       	mov	r12, r1
    1816:	ca 28       	or	r12, r10
    1818:	d9 82       	std	Y+1, r13	; 0x01
    181a:	c8 82       	st	Y, r12
  g.y = (int16_t)(yhg << 8 | ylg);
    181c:	fb 2c       	mov	r15, r11
    181e:	e1 2c       	mov	r14, r1
    1820:	e0 2a       	or	r14, r16
    1822:	fb 82       	std	Y+3, r15	; 0x03
    1824:	ea 82       	std	Y+2, r14	; 0x02
  g.z = (int16_t)(zhg << 8 | zlg);
    1826:	98 2f       	mov	r25, r24
    1828:	88 27       	eor	r24, r24
    182a:	81 2b       	or	r24, r17
    182c:	9d 83       	std	Y+5, r25	; 0x05
    182e:	8c 83       	std	Y+4, r24	; 0x04
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	08 95       	ret

00001848 <_ZN3L3G7testRegEhNS_7regAddrE>:
}

// Private Methods //////////////////////////////////////////////////////////////

int L3G::testReg(byte address, regAddr reg)
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	c6 2f       	mov	r28, r22
    184e:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    1850:	85 ef       	ldi	r24, 0xF5	; 245
    1852:	9e e0       	ldi	r25, 0x0E	; 14
    1854:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    1858:	6d 2f       	mov	r22, r29
    185a:	85 ef       	ldi	r24, 0xF5	; 245
    185c:	9e e0       	ldi	r25, 0x0E	; 14
    185e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    1862:	85 ef       	ldi	r24, 0xF5	; 245
    1864:	9e e0       	ldi	r25, 0x0E	; 14
    1866:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    186a:	81 11       	cpse	r24, r1
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <_ZN3L3G7testRegEhNS_7regAddrE+0x48>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	6c 2f       	mov	r22, r28
    1872:	85 ef       	ldi	r24, 0xF5	; 245
    1874:	9e e0       	ldi	r25, 0x0E	; 14
    1876:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    187a:	85 ef       	ldi	r24, 0xF5	; 245
    187c:	9e e0       	ldi	r25, 0x0E	; 14
    187e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <_ZN7TwoWire9availableEv>
    1882:	89 2b       	or	r24, r25
    1884:	41 f0       	breq	.+16     	; 0x1896 <_ZN3L3G7testRegEhNS_7regAddrE+0x4e>
  {
    return Wire.read();
    1886:	85 ef       	ldi	r24, 0xF5	; 245
    1888:	9e e0       	ldi	r25, 0x0E	; 14
    188a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    188e:	05 c0       	rjmp	.+10     	; 0x189a <_ZN3L3G7testRegEhNS_7regAddrE+0x52>
{
  Wire.beginTransmission(address);
  Wire.write((byte)reg);
  if (Wire.endTransmission() != 0)
  {
    return TEST_REG_ERROR;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	02 c0       	rjmp	.+4      	; 0x189a <_ZN3L3G7testRegEhNS_7regAddrE+0x52>
  {
    return Wire.read();
  }
  else
  {
    return TEST_REG_ERROR;
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool L3G::init(deviceType device, sa0State sa0)
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ec 01       	movw	r28, r24
    18aa:	16 2f       	mov	r17, r22
    18ac:	04 2f       	mov	r16, r20
  int id;
  
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    18ae:	63 30       	cpi	r22, 0x03	; 3
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x14>
    18b2:	56 c0       	rjmp	.+172    	; 0x1960 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xc0>
    18b4:	42 30       	cpi	r20, 0x02	; 2
    18b6:	c9 f5       	brne	.+114    	; 0x192a <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x8a>
    18b8:	56 c0       	rjmp	.+172    	; 0x1966 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xc6>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
        if (device == device_auto)
    18ba:	13 30       	cpi	r17, 0x03	; 3
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x20>
    18be:	58 c0       	rjmp	.+176    	; 0x1970 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd0>
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    18c0:	87 3d       	cpi	r24, 0xD7	; 215
    18c2:	91 05       	cpc	r25, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x28>
    18c6:	58 c0       	rjmp	.+176    	; 0x1978 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd8>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    18c8:	01 e0       	ldi	r16, 0x01	; 1
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    18ca:	11 e0       	ldi	r17, 0x01	; 1
    18cc:	2c c0       	rjmp	.+88     	; 0x1926 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    18ce:	01 30       	cpi	r16, 0x01	; 1
    18d0:	91 f0       	breq	.+36     	; 0x18f6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
    18d2:	4f e0       	ldi	r20, 0x0F	; 15
    18d4:	6a e6       	ldi	r22, 0x6A	; 106
    18d6:	ce 01       	movw	r24, r28
    18d8:	b7 df       	rcall	.-146    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    18da:	8f 3f       	cpi	r24, 0xFF	; 255
    18dc:	2f ef       	ldi	r18, 0xFF	; 255
    18de:	92 07       	cpc	r25, r18
    18e0:	51 f0       	breq	.+20     	; 0x18f6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
        if (device == device_auto)
    18e2:	13 30       	cpi	r17, 0x03	; 3
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x48>
    18e6:	46 c0       	rjmp	.+140    	; 0x1974 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xd4>
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    18e8:	87 3d       	cpi	r24, 0xD7	; 215
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x50>
    18ee:	47 c0       	rjmp	.+142    	; 0x197e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xde>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    18f0:	00 e0       	ldi	r16, 0x00	; 0
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    18f2:	12 e0       	ldi	r17, 0x02	; 2
    18f4:	18 c0       	rjmp	.+48     	; 0x1926 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
        }
      }
    }
    
    // check for L3G4200D if device is still unidentified or was specified to be this type
    if (device == device_auto || device == device_4200D)
    18f6:	13 30       	cpi	r17, 0x03	; 3
    18f8:	11 f0       	breq	.+4      	; 0x18fe <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5e>
    18fa:	11 11       	cpse	r17, r1
    18fc:	14 c0       	rjmp	.+40     	; 0x1926 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
    {
      if (sa0 != sa0_low && testReg(L3G4200D_SA0_HIGH_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
    18fe:	00 23       	and	r16, r16
    1900:	49 f0       	breq	.+18     	; 0x1914 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x74>
    1902:	4f e0       	ldi	r20, 0x0F	; 15
    1904:	69 e6       	ldi	r22, 0x69	; 105
    1906:	ce 01       	movw	r24, r28
    1908:	9f df       	rcall	.-194    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    190a:	83 3d       	cpi	r24, 0xD3	; 211
    190c:	91 05       	cpc	r25, r1
    190e:	d1 f1       	breq	.+116    	; 0x1984 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xe4>
      {
        // device responds to address 1101001; it's a 4200D with SA0 high
        device = device_4200D;
        sa0 = sa0_high;
      }
      else if (sa0 != sa0_high && testReg(L3G4200D_SA0_LOW_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
    1910:	01 30       	cpi	r16, 0x01	; 1
    1912:	39 f0       	breq	.+14     	; 0x1922 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x82>
    1914:	4f e0       	ldi	r20, 0x0F	; 15
    1916:	68 e6       	ldi	r22, 0x68	; 104
    1918:	ce 01       	movw	r24, r28
    191a:	96 df       	rcall	.-212    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    191c:	83 3d       	cpi	r24, 0xD3	; 211
    191e:	91 05       	cpc	r25, r1
    1920:	99 f1       	breq	.+102    	; 0x1988 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xe8>
        sa0 = sa0_low;
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    1922:	13 30       	cpi	r17, 0x03	; 3
    1924:	b9 f0       	breq	.+46     	; 0x1954 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xb4>
    1926:	02 30       	cpi	r16, 0x02	; 2
    1928:	b9 f0       	breq	.+46     	; 0x1958 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xb8>
    {
      return false;
    }
  }
  
  _device = device;
    192a:	1f 83       	std	Y+7, r17	; 0x07

  // set device address
  switch (device)
    192c:	11 23       	and	r17, r17
    192e:	51 f0       	breq	.+20     	; 0x1944 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xa4>
    1930:	13 30       	cpi	r17, 0x03	; 3
    1932:	a0 f4       	brcc	.+40     	; 0x195c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xbc>
  {
    case device_D20H:
    case device_D20:
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
    1934:	01 30       	cpi	r16, 0x01	; 1
    1936:	11 f4       	brne	.+4      	; 0x193c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x9c>
    1938:	8b e6       	ldi	r24, 0x6B	; 107
    193a:	01 c0       	rjmp	.+2      	; 0x193e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x9e>
    193c:	8a e6       	ldi	r24, 0x6A	; 106
    193e:	88 87       	std	Y+8, r24	; 0x08
    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
    1940:	81 e0       	ldi	r24, 0x01	; 1
  switch (device)
  {
    case device_D20H:
    case device_D20:
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
      break;
    1942:	41 c0       	rjmp	.+130    	; 0x19c6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>

    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
    1944:	01 30       	cpi	r16, 0x01	; 1
    1946:	11 f4       	brne	.+4      	; 0x194c <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xac>
    1948:	89 e6       	ldi	r24, 0x69	; 105
    194a:	01 c0       	rjmp	.+2      	; 0x194e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xae>
    194c:	88 e6       	ldi	r24, 0x68	; 104
    194e:	88 87       	std	Y+8, r24	; 0x08
      break;
  }
  
  return true;
    1950:	81 e0       	ldi	r24, 0x01	; 1
      address = (sa0 == sa0_high) ? D20_SA0_HIGH_ADDRESS : D20_SA0_LOW_ADDRESS;
      break;

    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
    1952:	39 c0       	rjmp	.+114    	; 0x19c6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    {
      return false;
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	37 c0       	rjmp	.+110    	; 0x19c6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	35 c0       	rjmp	.+106    	; 0x19c6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
    case device_4200D:
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	33 c0       	rjmp	.+102    	; 0x19c6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x126>
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    1960:	44 23       	and	r20, r20
    1962:	41 f1       	breq	.+80     	; 0x19b4 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x114>
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x102>
  
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	86 0f       	add	r24, r22
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	30 f6       	brcc	.-116    	; 0x18fa <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
    196e:	0f c0       	rjmp	.+30     	; 0x198e <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xee>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    1970:	01 e0       	ldi	r16, 0x01	; 1
    1972:	c3 cf       	rjmp	.-122    	; 0x18fa <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	c1 cf       	rjmp	.-126    	; 0x18fa <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x5a>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101011; it's a D20H or D20 with SA0 high     
        sa0 = sa0_high;
    1978:	01 e0       	ldi	r16, 0x01	; 1
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    197a:	12 e0       	ldi	r17, 0x02	; 2
    197c:	d4 cf       	rjmp	.-88     	; 0x1926 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
      {
        // device responds to address 1101010; it's a D20H or D20 with SA0 low      
        sa0 = sa0_low;
    197e:	00 e0       	ldi	r16, 0x00	; 0
        if (device == device_auto)
        {
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
    1980:	11 e0       	ldi	r17, 0x01	; 1
    1982:	d1 cf       	rjmp	.-94     	; 0x1926 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x86>
    {
      if (sa0 != sa0_low && testReg(L3G4200D_SA0_HIGH_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
      {
        // device responds to address 1101001; it's a 4200D with SA0 high
        device = device_4200D;
        sa0 = sa0_high;
    1984:	01 e0       	ldi	r16, 0x01	; 1
    1986:	01 c0       	rjmp	.+2      	; 0x198a <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xea>
      }
      else if (sa0 != sa0_high && testReg(L3G4200D_SA0_LOW_ADDRESS, WHO_AM_I) == L3G4200D_WHO_ID)
      {
        // device responds to address 1101000; it's a 4200D with SA0 low
        device = device_4200D;
        sa0 = sa0_low;
    1988:	00 e0       	ldi	r16, 0x00	; 0
    {
      return false;
    }
  }
  
  _device = device;
    198a:	1f 82       	std	Y+7, r1	; 0x07
    198c:	db cf       	rjmp	.-74     	; 0x1944 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0xa4>
  {
    // check for L3GD20H, D20 if device is unidentified or was specified to be one of these types
    if (device == device_auto || device == device_D20H || device == device_D20)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && (id = testReg(D20_SA0_HIGH_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    198e:	4f e0       	ldi	r20, 0x0F	; 15
    1990:	6b e6       	ldi	r22, 0x6B	; 107
    1992:	ce 01       	movw	r24, r28
    1994:	59 df       	rcall	.-334    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    1996:	8f 3f       	cpi	r24, 0xFF	; 255
    1998:	2f ef       	ldi	r18, 0xFF	; 255
    199a:	92 07       	cpc	r25, r18
    199c:	09 f0       	breq	.+2      	; 0x19a0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x100>
    199e:	8d cf       	rjmp	.-230    	; 0x18ba <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x1a>
    19a0:	98 cf       	rjmp	.-208    	; 0x18d2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x32>
    19a2:	4f e0       	ldi	r20, 0x0F	; 15
    19a4:	6b e6       	ldi	r22, 0x6B	; 107
    19a6:	50 df       	rcall	.-352    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    19a8:	8f 3f       	cpi	r24, 0xFF	; 255
    19aa:	2f ef       	ldi	r18, 0xFF	; 255
    19ac:	92 07       	cpc	r25, r18
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x112>
    19b0:	87 cf       	rjmp	.-242    	; 0x18c0 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x20>
    19b2:	8d cf       	rjmp	.-230    	; 0x18ce <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x2e>
          // use ID from WHO_AM_I register to determine device type
          device = (id == D20H_WHO_ID) ? device_D20H : device_D20;
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && (id = testReg(D20_SA0_LOW_ADDRESS, WHO_AM_I)) != TEST_REG_ERROR)
    19b4:	4f e0       	ldi	r20, 0x0F	; 15
    19b6:	6a e6       	ldi	r22, 0x6A	; 106
    19b8:	47 df       	rcall	.-370    	; 0x1848 <_ZN3L3G7testRegEhNS_7regAddrE>
    19ba:	8f 3f       	cpi	r24, 0xFF	; 255
    19bc:	2f ef       	ldi	r18, 0xFF	; 255
    19be:	92 07       	cpc	r25, r18
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x124>
    19c2:	92 cf       	rjmp	.-220    	; 0x18e8 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x48>
    19c4:	98 cf       	rjmp	.-208    	; 0x18f6 <_ZN3L3G4initENS_10deviceTypeENS_8sa0StateE+0x56>
      address = (sa0 == sa0_high) ? L3G4200D_SA0_HIGH_ADDRESS : L3G4200D_SA0_LOW_ADDRESS;
      break;
  }
  
  return true;
}
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    19d0:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19d2:	03 96       	adiw	r24, 0x03	; 3
    19d4:	92 83       	std	Z+2, r25	; 0x02
    19d6:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    19d8:	2f ef       	ldi	r18, 0xFF	; 255
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	34 83       	std	Z+4, r19	; 0x04
    19de:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19e0:	96 83       	std	Z+6, r25	; 0x06
    19e2:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    19e4:	90 87       	std	Z+8, r25	; 0x08
    19e6:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    19e8:	10 82       	st	Z, r1
    19ea:	08 95       	ret

000019ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    19ec:	fc 01       	movw	r30, r24
    19ee:	11 86       	std	Z+9, r1	; 0x09
    19f0:	10 86       	std	Z+8, r1	; 0x08
    19f2:	08 95       	ret

000019f4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	9c 01       	movw	r18, r24
    19fa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    19fc:	dc 01       	movw	r26, r24
    19fe:	11 96       	adiw	r26, 0x01	; 1
    1a00:	cd 91       	ld	r28, X+
    1a02:	dc 91       	ld	r29, X
    1a04:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1a06:	d3 83       	std	Z+3, r29	; 0x03
    1a08:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	95 83       	std	Z+5, r25	; 0x05
    1a10:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	dc 01       	movw	r26, r24
    1a18:	13 96       	adiw	r26, 0x03	; 3
    1a1a:	7c 93       	st	X, r23
    1a1c:	6e 93       	st	-X, r22
    1a1e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1a20:	7d 83       	std	Y+5, r23	; 0x05
    1a22:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a24:	31 87       	std	Z+9, r19	; 0x09
    1a26:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1a28:	f9 01       	movw	r30, r18
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	80 83       	st	Z, r24
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1a3c:	48 81       	ld	r20, Y
    1a3e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1a40:	4f 3f       	cpi	r20, 0xFF	; 255
    1a42:	2f ef       	ldi	r18, 0xFF	; 255
    1a44:	52 07       	cpc	r21, r18
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1a48:	fc 01       	movw	r30, r24
    1a4a:	a7 81       	ldd	r26, Z+7	; 0x07
    1a4c:	b0 85       	ldd	r27, Z+8	; 0x08
    1a4e:	0d c0       	rjmp	.+26     	; 0x1a6a <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a50:	dc 01       	movw	r26, r24
    1a52:	13 96       	adiw	r26, 0x03	; 3
    1a54:	12 96       	adiw	r26, 0x02	; 2
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	13 97       	sbiw	r26, 0x03	; 3
    1a5c:	20 81       	ld	r18, Z
    1a5e:	31 81       	ldd	r19, Z+1	; 0x01
    1a60:	42 17       	cp	r20, r18
    1a62:	53 07       	cpc	r21, r19
    1a64:	10 f0       	brcs	.+4      	; 0x1a6a <vListInsert+0x34>
    1a66:	df 01       	movw	r26, r30
    1a68:	f5 cf       	rjmp	.-22     	; 0x1a54 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1a6a:	12 96       	adiw	r26, 0x02	; 2
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	13 97       	sbiw	r26, 0x03	; 3
    1a72:	fb 83       	std	Y+3, r31	; 0x03
    1a74:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1a76:	d5 83       	std	Z+5, r29	; 0x05
    1a78:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1a7a:	bd 83       	std	Y+5, r27	; 0x05
    1a7c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1a7e:	13 96       	adiw	r26, 0x03	; 3
    1a80:	dc 93       	st	X, r29
    1a82:	ce 93       	st	-X, r28
    1a84:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a86:	99 87       	std	Y+9, r25	; 0x09
    1a88:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 81       	ld	r18, Z
    1a8e:	2f 5f       	subi	r18, 0xFF	; 255
    1a90:	20 83       	st	Z, r18
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1a9e:	a0 85       	ldd	r26, Z+8	; 0x08
    1aa0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1aa2:	c2 81       	ldd	r28, Z+2	; 0x02
    1aa4:	d3 81       	ldd	r29, Z+3	; 0x03
    1aa6:	84 81       	ldd	r24, Z+4	; 0x04
    1aa8:	95 81       	ldd	r25, Z+5	; 0x05
    1aaa:	9d 83       	std	Y+5, r25	; 0x05
    1aac:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1aae:	c4 81       	ldd	r28, Z+4	; 0x04
    1ab0:	d5 81       	ldd	r29, Z+5	; 0x05
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	9b 83       	std	Y+3, r25	; 0x03
    1ab8:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1aba:	11 96       	adiw	r26, 0x01	; 1
    1abc:	cd 91       	ld	r28, X+
    1abe:	dc 91       	ld	r29, X
    1ac0:	12 97       	sbiw	r26, 0x02	; 2
    1ac2:	ce 17       	cp	r28, r30
    1ac4:	df 07       	cpc	r29, r31
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	12 96       	adiw	r26, 0x02	; 2
    1ace:	9c 93       	st	X, r25
    1ad0:	8e 93       	st	-X, r24
    1ad2:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ad4:	11 86       	std	Z+9, r1	; 0x09
    1ad6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1ad8:	8c 91       	ld	r24, X
    1ada:	81 50       	subi	r24, 0x01	; 1
    1adc:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <_ZN6LSM303C1Ev>:
// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303::read(void)
{
  readAcc();
  readMag();
}
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	86 e0       	ldi	r24, 0x06	; 6
    1aec:	e1 e6       	ldi	r30, 0x61	; 97
    1aee:	f2 e0       	ldi	r31, 0x02	; 2
    1af0:	de 01       	movw	r26, r28
    1af2:	52 96       	adiw	r26, 0x12	; 18
    1af4:	01 90       	ld	r0, Z+
    1af6:	0d 92       	st	X+, r0
    1af8:	8a 95       	dec	r24
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <_ZN6LSM303C1Ev+0x10>
    1afc:	86 e0       	ldi	r24, 0x06	; 6
    1afe:	e7 e6       	ldi	r30, 0x67	; 103
    1b00:	f2 e0       	ldi	r31, 0x02	; 2
    1b02:	de 01       	movw	r26, r28
    1b04:	1c 96       	adiw	r26, 0x0c	; 12
    1b06:	01 90       	ld	r0, Z+
    1b08:	0d 92       	st	X+, r0
    1b0a:	8a 95       	dec	r24
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <_ZN6LSM303C1Ev+0x22>
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	89 8f       	std	Y+25, r24	; 0x19
    1b12:	1c a2       	std	Y+36, r1	; 0x24
    1b14:	1b a2       	std	Y+35, r1	; 0x23
    1b16:	1d a2       	std	Y+37, r1	; 0x25
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>:
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE+0x22>
    1b40:	1f 92       	push	r1
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8c 01       	movw	r16, r24
    1b48:	dc 01       	movw	r26, r24
    1b4a:	4d 90       	ld	r4, X+
    1b4c:	5d 90       	ld	r5, X+
    1b4e:	6d 90       	ld	r6, X+
    1b50:	7c 90       	ld	r7, X
    1b52:	13 97       	sbiw	r26, 0x03	; 3
    1b54:	14 96       	adiw	r26, 0x04	; 4
    1b56:	8d 90       	ld	r8, X+
    1b58:	9d 90       	ld	r9, X+
    1b5a:	ad 90       	ld	r10, X+
    1b5c:	bc 90       	ld	r11, X
    1b5e:	17 97       	sbiw	r26, 0x07	; 7
    1b60:	18 96       	adiw	r26, 0x08	; 8
    1b62:	8d 91       	ld	r24, X+
    1b64:	9d 91       	ld	r25, X+
    1b66:	0d 90       	ld	r0, X+
    1b68:	bc 91       	ld	r27, X
    1b6a:	a0 2d       	mov	r26, r0
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	ab 83       	std	Y+3, r26	; 0x03
    1b72:	bc 83       	std	Y+4, r27	; 0x04
    1b74:	a3 01       	movw	r20, r6
    1b76:	92 01       	movw	r18, r4
    1b78:	c3 01       	movw	r24, r6
    1b7a:	b2 01       	movw	r22, r4
    1b7c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1b80:	6b 01       	movw	r12, r22
    1b82:	7c 01       	movw	r14, r24
    1b84:	a5 01       	movw	r20, r10
    1b86:	94 01       	movw	r18, r8
    1b88:	c5 01       	movw	r24, r10
    1b8a:	b4 01       	movw	r22, r8
    1b8c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	c7 01       	movw	r24, r14
    1b96:	b6 01       	movw	r22, r12
    1b98:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    1b9c:	6b 01       	movw	r12, r22
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ba6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ba8:	ca 01       	movw	r24, r20
    1baa:	b9 01       	movw	r22, r18
    1bac:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    1bbc:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <sqrt>
    1bc0:	6b 01       	movw	r12, r22
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	c3 01       	movw	r24, r6
    1bca:	b2 01       	movw	r22, r4
    1bcc:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	60 83       	st	Z, r22
    1bd4:	71 83       	std	Z+1, r23	; 0x01
    1bd6:	82 83       	std	Z+2, r24	; 0x02
    1bd8:	93 83       	std	Z+3, r25	; 0x03
    1bda:	a7 01       	movw	r20, r14
    1bdc:	96 01       	movw	r18, r12
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1be6:	d8 01       	movw	r26, r16
    1be8:	14 96       	adiw	r26, 0x04	; 4
    1bea:	6d 93       	st	X+, r22
    1bec:	7d 93       	st	X+, r23
    1bee:	8d 93       	st	X+, r24
    1bf0:	9c 93       	st	X, r25
    1bf2:	17 97       	sbiw	r26, 0x07	; 7
    1bf4:	a7 01       	movw	r20, r14
    1bf6:	96 01       	movw	r18, r12
    1bf8:	69 81       	ldd	r22, Y+1	; 0x01
    1bfa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1c04:	f8 01       	movw	r30, r16
    1c06:	60 87       	std	Z+8, r22	; 0x08
    1c08:	71 87       	std	Z+9, r23	; 0x09
    1c0a:	82 87       	std	Z+10, r24	; 0x0a
    1c0c:	93 87       	std	Z+11, r25	; 0x0b
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	df 90       	pop	r13
    1c24:	cf 90       	pop	r12
    1c26:	bf 90       	pop	r11
    1c28:	af 90       	pop	r10
    1c2a:	9f 90       	pop	r9
    1c2c:	8f 90       	pop	r8
    1c2e:	7f 90       	pop	r7
    1c30:	6f 90       	pop	r6
    1c32:	5f 90       	pop	r5
    1c34:	4f 90       	pop	r4
    1c36:	08 95       	ret

00001c38 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>:
    1c38:	4f 92       	push	r4
    1c3a:	5f 92       	push	r5
    1c3c:	6f 92       	push	r6
    1c3e:	7f 92       	push	r7
    1c40:	8f 92       	push	r8
    1c42:	9f 92       	push	r9
    1c44:	af 92       	push	r10
    1c46:	bf 92       	push	r11
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	aa 97       	sbiw	r28, 0x2a	; 42
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	8c 01       	movw	r16, r24
    1c6a:	29 8f       	std	Y+25, r18	; 0x19
    1c6c:	3a 8f       	std	Y+26, r19	; 0x1a
    1c6e:	4b 8f       	std	Y+27, r20	; 0x1b
    1c70:	5c 8f       	std	Y+28, r21	; 0x1c
    1c72:	6d 8f       	std	Y+29, r22	; 0x1d
    1c74:	7e 8f       	std	Y+30, r23	; 0x1e
    1c76:	dc 01       	movw	r26, r24
    1c78:	16 96       	adiw	r26, 0x06	; 6
    1c7a:	cd 90       	ld	r12, X+
    1c7c:	dc 90       	ld	r13, X
    1c7e:	17 97       	sbiw	r26, 0x07	; 7
    1c80:	ee 24       	eor	r14, r14
    1c82:	d7 fc       	sbrc	r13, 7
    1c84:	e0 94       	com	r14
    1c86:	fe 2c       	mov	r15, r14
    1c88:	52 96       	adiw	r26, 0x12	; 18
    1c8a:	4d 91       	ld	r20, X+
    1c8c:	5c 91       	ld	r21, X
    1c8e:	53 97       	sbiw	r26, 0x13	; 19
    1c90:	66 27       	eor	r22, r22
    1c92:	57 fd       	sbrc	r21, 7
    1c94:	60 95       	com	r22
    1c96:	76 2f       	mov	r23, r22
    1c98:	1c 96       	adiw	r26, 0x0c	; 12
    1c9a:	8d 91       	ld	r24, X+
    1c9c:	9c 91       	ld	r25, X
    1c9e:	1d 97       	sbiw	r26, 0x0d	; 13
    1ca0:	aa 27       	eor	r26, r26
    1ca2:	97 fd       	sbrc	r25, 7
    1ca4:	a0 95       	com	r26
    1ca6:	ba 2f       	mov	r27, r26
    1ca8:	48 0f       	add	r20, r24
    1caa:	59 1f       	adc	r21, r25
    1cac:	6a 1f       	adc	r22, r26
    1cae:	7b 1f       	adc	r23, r27
    1cb0:	db 01       	movw	r26, r22
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	77 23       	and	r23, r23
    1cb6:	1c f4       	brge	.+6      	; 0x1cbe <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x86>
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	b5 95       	asr	r27
    1cc0:	a7 95       	ror	r26
    1cc2:	97 95       	ror	r25
    1cc4:	87 95       	ror	r24
    1cc6:	a7 01       	movw	r20, r14
    1cc8:	96 01       	movw	r18, r12
    1cca:	28 1b       	sub	r18, r24
    1ccc:	39 0b       	sbc	r19, r25
    1cce:	4a 0b       	sbc	r20, r26
    1cd0:	5b 0b       	sbc	r21, r27
    1cd2:	2f 8f       	std	Y+31, r18	; 0x1f
    1cd4:	38 a3       	std	Y+32, r19	; 0x20
    1cd6:	49 a3       	std	Y+33, r20	; 0x21
    1cd8:	5a a3       	std	Y+34, r21	; 0x22
    1cda:	d8 01       	movw	r26, r16
    1cdc:	18 96       	adiw	r26, 0x08	; 8
    1cde:	cd 90       	ld	r12, X+
    1ce0:	dc 90       	ld	r13, X
    1ce2:	19 97       	sbiw	r26, 0x09	; 9
    1ce4:	ee 24       	eor	r14, r14
    1ce6:	d7 fc       	sbrc	r13, 7
    1ce8:	e0 94       	com	r14
    1cea:	fe 2c       	mov	r15, r14
    1cec:	54 96       	adiw	r26, 0x14	; 20
    1cee:	4d 91       	ld	r20, X+
    1cf0:	5c 91       	ld	r21, X
    1cf2:	55 97       	sbiw	r26, 0x15	; 21
    1cf4:	66 27       	eor	r22, r22
    1cf6:	57 fd       	sbrc	r21, 7
    1cf8:	60 95       	com	r22
    1cfa:	76 2f       	mov	r23, r22
    1cfc:	1e 96       	adiw	r26, 0x0e	; 14
    1cfe:	8d 91       	ld	r24, X+
    1d00:	9c 91       	ld	r25, X
    1d02:	1f 97       	sbiw	r26, 0x0f	; 15
    1d04:	aa 27       	eor	r26, r26
    1d06:	97 fd       	sbrc	r25, 7
    1d08:	a0 95       	com	r26
    1d0a:	ba 2f       	mov	r27, r26
    1d0c:	48 0f       	add	r20, r24
    1d0e:	59 1f       	adc	r21, r25
    1d10:	6a 1f       	adc	r22, r26
    1d12:	7b 1f       	adc	r23, r27
    1d14:	db 01       	movw	r26, r22
    1d16:	ca 01       	movw	r24, r20
    1d18:	77 23       	and	r23, r23
    1d1a:	1c f4       	brge	.+6      	; 0x1d22 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0xea>
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	b1 1d       	adc	r27, r1
    1d22:	b5 95       	asr	r27
    1d24:	a7 95       	ror	r26
    1d26:	97 95       	ror	r25
    1d28:	87 95       	ror	r24
    1d2a:	a7 01       	movw	r20, r14
    1d2c:	96 01       	movw	r18, r12
    1d2e:	28 1b       	sub	r18, r24
    1d30:	39 0b       	sbc	r19, r25
    1d32:	4a 0b       	sbc	r20, r26
    1d34:	5b 0b       	sbc	r21, r27
    1d36:	2b a3       	std	Y+35, r18	; 0x23
    1d38:	3c a3       	std	Y+36, r19	; 0x24
    1d3a:	4d a3       	std	Y+37, r20	; 0x25
    1d3c:	5e a3       	std	Y+38, r21	; 0x26
    1d3e:	d8 01       	movw	r26, r16
    1d40:	1a 96       	adiw	r26, 0x0a	; 10
    1d42:	4d 90       	ld	r4, X+
    1d44:	5c 90       	ld	r5, X
    1d46:	1b 97       	sbiw	r26, 0x0b	; 11
    1d48:	66 24       	eor	r6, r6
    1d4a:	57 fc       	sbrc	r5, 7
    1d4c:	60 94       	com	r6
    1d4e:	76 2c       	mov	r7, r6
    1d50:	56 96       	adiw	r26, 0x16	; 22
    1d52:	4d 91       	ld	r20, X+
    1d54:	5c 91       	ld	r21, X
    1d56:	57 97       	sbiw	r26, 0x17	; 23
    1d58:	66 27       	eor	r22, r22
    1d5a:	57 fd       	sbrc	r21, 7
    1d5c:	60 95       	com	r22
    1d5e:	76 2f       	mov	r23, r22
    1d60:	50 96       	adiw	r26, 0x10	; 16
    1d62:	8d 91       	ld	r24, X+
    1d64:	9c 91       	ld	r25, X
    1d66:	51 97       	sbiw	r26, 0x11	; 17
    1d68:	aa 27       	eor	r26, r26
    1d6a:	97 fd       	sbrc	r25, 7
    1d6c:	a0 95       	com	r26
    1d6e:	ba 2f       	mov	r27, r26
    1d70:	48 0f       	add	r20, r24
    1d72:	59 1f       	adc	r21, r25
    1d74:	6a 1f       	adc	r22, r26
    1d76:	7b 1f       	adc	r23, r27
    1d78:	db 01       	movw	r26, r22
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	77 23       	and	r23, r23
    1d7e:	1c f4       	brge	.+6      	; 0x1d86 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x14e>
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	a1 1d       	adc	r26, r1
    1d84:	b1 1d       	adc	r27, r1
    1d86:	b5 95       	asr	r27
    1d88:	a7 95       	ror	r26
    1d8a:	97 95       	ror	r25
    1d8c:	87 95       	ror	r24
    1d8e:	48 1a       	sub	r4, r24
    1d90:	59 0a       	sbc	r5, r25
    1d92:	6a 0a       	sbc	r6, r26
    1d94:	7b 0a       	sbc	r7, r27
    1d96:	f8 01       	movw	r30, r16
    1d98:	84 80       	ldd	r8, Z+4	; 0x04
    1d9a:	95 80       	ldd	r9, Z+5	; 0x05
    1d9c:	aa 24       	eor	r10, r10
    1d9e:	97 fc       	sbrc	r9, 7
    1da0:	a0 94       	com	r10
    1da2:	ba 2c       	mov	r11, r10
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	9c 01       	movw	r18, r24
    1daa:	44 27       	eor	r20, r20
    1dac:	37 fd       	sbrc	r19, 7
    1dae:	40 95       	com	r20
    1db0:	54 2f       	mov	r21, r20
    1db2:	2f a3       	std	Y+39, r18	; 0x27
    1db4:	38 a7       	std	Y+40, r19	; 0x28
    1db6:	49 a7       	std	Y+41, r20	; 0x29
    1db8:	5a a7       	std	Y+42, r21	; 0x2a
    1dba:	2b a1       	ldd	r18, Y+35	; 0x23
    1dbc:	3c a1       	ldd	r19, Y+36	; 0x24
    1dbe:	4d a1       	ldd	r20, Y+37	; 0x25
    1dc0:	5e a1       	ldd	r21, Y+38	; 0x26
    1dc2:	c5 01       	movw	r24, r10
    1dc4:	b4 01       	movw	r22, r8
    1dc6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1dca:	6b 01       	movw	r12, r22
    1dcc:	7c 01       	movw	r14, r24
    1dce:	a3 01       	movw	r20, r6
    1dd0:	92 01       	movw	r18, r4
    1dd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dda:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1dde:	a7 01       	movw	r20, r14
    1de0:	96 01       	movw	r18, r12
    1de2:	26 1b       	sub	r18, r22
    1de4:	37 0b       	sbc	r19, r23
    1de6:	48 0b       	sbc	r20, r24
    1de8:	59 0b       	sbc	r21, r25
    1dea:	ca 01       	movw	r24, r20
    1dec:	b9 01       	movw	r22, r18
    1dee:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1df2:	6d 87       	std	Y+13, r22	; 0x0d
    1df4:	7e 87       	std	Y+14, r23	; 0x0e
    1df6:	8f 87       	std	Y+15, r24	; 0x0f
    1df8:	98 8b       	std	Y+16, r25	; 0x10
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	cd 90       	ld	r12, X+
    1dfe:	dc 90       	ld	r13, X
    1e00:	ee 24       	eor	r14, r14
    1e02:	d7 fc       	sbrc	r13, 7
    1e04:	e0 94       	com	r14
    1e06:	fe 2c       	mov	r15, r14
    1e08:	a3 01       	movw	r20, r6
    1e0a:	92 01       	movw	r18, r4
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	b6 01       	movw	r22, r12
    1e10:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1e14:	2b 01       	movw	r4, r22
    1e16:	3c 01       	movw	r6, r24
    1e18:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1e1a:	38 a1       	ldd	r19, Y+32	; 0x20
    1e1c:	49 a1       	ldd	r20, Y+33	; 0x21
    1e1e:	5a a1       	ldd	r21, Y+34	; 0x22
    1e20:	c5 01       	movw	r24, r10
    1e22:	b4 01       	movw	r22, r8
    1e24:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1e28:	a3 01       	movw	r20, r6
    1e2a:	92 01       	movw	r18, r4
    1e2c:	26 1b       	sub	r18, r22
    1e2e:	37 0b       	sbc	r19, r23
    1e30:	48 0b       	sbc	r20, r24
    1e32:	59 0b       	sbc	r21, r25
    1e34:	ca 01       	movw	r24, r20
    1e36:	b9 01       	movw	r22, r18
    1e38:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1e3c:	69 8b       	std	Y+17, r22	; 0x11
    1e3e:	7a 8b       	std	Y+18, r23	; 0x12
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1e46:	38 a1       	ldd	r19, Y+32	; 0x20
    1e48:	49 a1       	ldd	r20, Y+33	; 0x21
    1e4a:	5a a1       	ldd	r21, Y+34	; 0x22
    1e4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e50:	89 a5       	ldd	r24, Y+41	; 0x29
    1e52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e54:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1e58:	4b 01       	movw	r8, r22
    1e5a:	5c 01       	movw	r10, r24
    1e5c:	2b a1       	ldd	r18, Y+35	; 0x23
    1e5e:	3c a1       	ldd	r19, Y+36	; 0x24
    1e60:	4d a1       	ldd	r20, Y+37	; 0x25
    1e62:	5e a1       	ldd	r21, Y+38	; 0x26
    1e64:	c7 01       	movw	r24, r14
    1e66:	b6 01       	movw	r22, r12
    1e68:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__mulsi3>
    1e6c:	a5 01       	movw	r20, r10
    1e6e:	94 01       	movw	r18, r8
    1e70:	26 1b       	sub	r18, r22
    1e72:	37 0b       	sbc	r19, r23
    1e74:	48 0b       	sbc	r20, r24
    1e76:	59 0b       	sbc	r21, r25
    1e78:	ca 01       	movw	r24, r20
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1e80:	6d 8b       	std	Y+21, r22	; 0x15
    1e82:	7e 8b       	std	Y+22, r23	; 0x16
    1e84:	8f 8b       	std	Y+23, r24	; 0x17
    1e86:	98 8f       	std	Y+24, r25	; 0x18
    1e88:	ce 01       	movw	r24, r28
    1e8a:	0d 96       	adiw	r24, 0x0d	; 13
    1e8c:	48 de       	rcall	.-880    	; 0x1b1e <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>
    1e8e:	d8 01       	movw	r26, r16
    1e90:	12 96       	adiw	r26, 0x02	; 2
    1e92:	6d 91       	ld	r22, X+
    1e94:	7c 91       	ld	r23, X
    1e96:	13 97       	sbiw	r26, 0x03	; 3
    1e98:	88 27       	eor	r24, r24
    1e9a:	77 fd       	sbrc	r23, 7
    1e9c:	80 95       	com	r24
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1ea4:	6b 01       	movw	r12, r22
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	2d 89       	ldd	r18, Y+21	; 0x15
    1eaa:	3e 89       	ldd	r19, Y+22	; 0x16
    1eac:	4f 89       	ldd	r20, Y+23	; 0x17
    1eae:	58 8d       	ldd	r21, Y+24	; 0x18
    1eb0:	2f 8f       	std	Y+31, r18	; 0x1f
    1eb2:	38 a3       	std	Y+32, r19	; 0x20
    1eb4:	49 a3       	std	Y+33, r20	; 0x21
    1eb6:	5a a3       	std	Y+34, r21	; 0x22
    1eb8:	d8 01       	movw	r26, r16
    1eba:	14 96       	adiw	r26, 0x04	; 4
    1ebc:	6d 91       	ld	r22, X+
    1ebe:	7c 91       	ld	r23, X
    1ec0:	15 97       	sbiw	r26, 0x05	; 5
    1ec2:	88 27       	eor	r24, r24
    1ec4:	77 fd       	sbrc	r23, 7
    1ec6:	80 95       	com	r24
    1ec8:	98 2f       	mov	r25, r24
    1eca:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1ece:	2b 01       	movw	r4, r22
    1ed0:	3c 01       	movw	r6, r24
    1ed2:	29 89       	ldd	r18, Y+17	; 0x11
    1ed4:	3a 89       	ldd	r19, Y+18	; 0x12
    1ed6:	4b 89       	ldd	r20, Y+19	; 0x13
    1ed8:	5c 89       	ldd	r21, Y+20	; 0x14
    1eda:	2b a3       	std	Y+35, r18	; 0x23
    1edc:	3c a3       	std	Y+36, r19	; 0x24
    1ede:	4d a3       	std	Y+37, r20	; 0x25
    1ee0:	5e a3       	std	Y+38, r21	; 0x26
    1ee2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1ee4:	38 a1       	ldd	r19, Y+32	; 0x20
    1ee6:	49 a1       	ldd	r20, Y+33	; 0x21
    1ee8:	5a a1       	ldd	r21, Y+34	; 0x22
    1eea:	c7 01       	movw	r24, r14
    1eec:	b6 01       	movw	r22, r12
    1eee:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1ef2:	4b 01       	movw	r8, r22
    1ef4:	5c 01       	movw	r10, r24
    1ef6:	2b a1       	ldd	r18, Y+35	; 0x23
    1ef8:	3c a1       	ldd	r19, Y+36	; 0x24
    1efa:	4d a1       	ldd	r20, Y+37	; 0x25
    1efc:	5e a1       	ldd	r21, Y+38	; 0x26
    1efe:	c3 01       	movw	r24, r6
    1f00:	b2 01       	movw	r22, r4
    1f02:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	c5 01       	movw	r24, r10
    1f0c:	b4 01       	movw	r22, r8
    1f0e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	af 85       	ldd	r26, Y+15	; 0x0f
    1f20:	b8 89       	ldd	r27, Y+16	; 0x10
    1f22:	8f a3       	std	Y+39, r24	; 0x27
    1f24:	98 a7       	std	Y+40, r25	; 0x28
    1f26:	a9 a7       	std	Y+41, r26	; 0x29
    1f28:	ba a7       	std	Y+42, r27	; 0x2a
    1f2a:	d8 01       	movw	r26, r16
    1f2c:	6d 91       	ld	r22, X+
    1f2e:	7c 91       	ld	r23, X
    1f30:	88 27       	eor	r24, r24
    1f32:	77 fd       	sbrc	r23, 7
    1f34:	80 95       	com	r24
    1f36:	98 2f       	mov	r25, r24
    1f38:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1f3c:	4b 01       	movw	r8, r22
    1f3e:	5c 01       	movw	r10, r24
    1f40:	2f a1       	ldd	r18, Y+39	; 0x27
    1f42:	38 a5       	ldd	r19, Y+40	; 0x28
    1f44:	49 a5       	ldd	r20, Y+41	; 0x29
    1f46:	5a a5       	ldd	r21, Y+42	; 0x2a
    1f48:	c3 01       	movw	r24, r6
    1f4a:	b2 01       	movw	r22, r4
    1f4c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1f50:	2b 01       	movw	r4, r22
    1f52:	3c 01       	movw	r6, r24
    1f54:	a5 01       	movw	r20, r10
    1f56:	94 01       	movw	r18, r8
    1f58:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f5a:	78 a1       	ldd	r23, Y+32	; 0x20
    1f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f60:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	c3 01       	movw	r24, r6
    1f6a:	b2 01       	movw	r22, r4
    1f6c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
    1f70:	6d 83       	std	Y+5, r22	; 0x05
    1f72:	7e 83       	std	Y+6, r23	; 0x06
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a5 01       	movw	r20, r10
    1f7a:	94 01       	movw	r18, r8
    1f7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f80:	8d a1       	ldd	r24, Y+37	; 0x25
    1f82:	9e a1       	ldd	r25, Y+38	; 0x26
    1f84:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1f88:	4b 01       	movw	r8, r22
    1f8a:	5c 01       	movw	r10, r24
    1f8c:	2f a1       	ldd	r18, Y+39	; 0x27
    1f8e:	38 a5       	ldd	r19, Y+40	; 0x28
    1f90:	49 a5       	ldd	r20, Y+41	; 0x29
    1f92:	5a a5       	ldd	r21, Y+42	; 0x2a
    1f94:	c7 01       	movw	r24, r14
    1f96:	b6 01       	movw	r22, r12
    1f98:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    1f9c:	9b 01       	movw	r18, r22
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	c5 01       	movw	r24, r10
    1fa2:	b4 01       	movw	r22, r8
    1fa4:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
    1fa8:	69 87       	std	Y+9, r22	; 0x09
    1faa:	7a 87       	std	Y+10, r23	; 0x0a
    1fac:	8b 87       	std	Y+11, r24	; 0x0b
    1fae:	9c 87       	std	Y+12, r25	; 0x0c
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	b4 dd       	rcall	.-1176   	; 0x1b1e <_ZN6LSM30316vector_normalizeEPNS_6vectorIfEE>
    1fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fba:	88 27       	eor	r24, r24
    1fbc:	77 fd       	sbrc	r23, 7
    1fbe:	80 95       	com	r24
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1fc6:	2b 01       	movw	r4, r22
    1fc8:	3c 01       	movw	r6, r24
    1fca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1fcc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1fce:	88 27       	eor	r24, r24
    1fd0:	77 fd       	sbrc	r23, 7
    1fd2:	80 95       	com	r24
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1fda:	4b 01       	movw	r8, r22
    1fdc:	5c 01       	movw	r10, r24
    1fde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fe0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fe2:	88 27       	eor	r24, r24
    1fe4:	77 fd       	sbrc	r23, 7
    1fe6:	80 95       	com	r24
    1fe8:	98 2f       	mov	r25, r24
    1fea:	0e 94 a7 1c 	call	0x394e	; 0x394e <__floatsisf>
    1fee:	6b 01       	movw	r12, r22
    1ff0:	7c 01       	movw	r14, r24
    1ff2:	29 81       	ldd	r18, Y+1	; 0x01
    1ff4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ff8:	5c 81       	ldd	r21, Y+4	; 0x04
    1ffa:	c3 01       	movw	r24, r6
    1ffc:	b2 01       	movw	r22, r4
    1ffe:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    2002:	6f 8f       	std	Y+31, r22	; 0x1f
    2004:	78 a3       	std	Y+32, r23	; 0x20
    2006:	89 a3       	std	Y+33, r24	; 0x21
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	2d 81       	ldd	r18, Y+5	; 0x05
    200c:	3e 81       	ldd	r19, Y+6	; 0x06
    200e:	4f 81       	ldd	r20, Y+7	; 0x07
    2010:	58 85       	ldd	r21, Y+8	; 0x08
    2012:	c5 01       	movw	r24, r10
    2014:	b4 01       	movw	r22, r8
    2016:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    201a:	9b 01       	movw	r18, r22
    201c:	ac 01       	movw	r20, r24
    201e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2020:	78 a1       	ldd	r23, Y+32	; 0x20
    2022:	89 a1       	ldd	r24, Y+33	; 0x21
    2024:	9a a1       	ldd	r25, Y+34	; 0x22
    2026:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    202a:	6f 8f       	std	Y+31, r22	; 0x1f
    202c:	78 a3       	std	Y+32, r23	; 0x20
    202e:	89 a3       	std	Y+33, r24	; 0x21
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	29 85       	ldd	r18, Y+9	; 0x09
    2034:	3a 85       	ldd	r19, Y+10	; 0x0a
    2036:	4b 85       	ldd	r20, Y+11	; 0x0b
    2038:	5c 85       	ldd	r21, Y+12	; 0x0c
    203a:	c7 01       	movw	r24, r14
    203c:	b6 01       	movw	r22, r12
    203e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    2042:	9b 01       	movw	r18, r22
    2044:	ac 01       	movw	r20, r24
    2046:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2048:	78 a1       	ldd	r23, Y+32	; 0x20
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    2052:	6f 8f       	std	Y+31, r22	; 0x1f
    2054:	78 a3       	std	Y+32, r23	; 0x20
    2056:	89 a3       	std	Y+33, r24	; 0x21
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	2d 85       	ldd	r18, Y+13	; 0x0d
    205c:	3e 85       	ldd	r19, Y+14	; 0x0e
    205e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2060:	58 89       	ldd	r21, Y+16	; 0x10
    2062:	c3 01       	movw	r24, r6
    2064:	b2 01       	movw	r22, r4
    2066:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    206a:	2b 01       	movw	r4, r22
    206c:	3c 01       	movw	r6, r24
    206e:	29 89       	ldd	r18, Y+17	; 0x11
    2070:	3a 89       	ldd	r19, Y+18	; 0x12
    2072:	4b 89       	ldd	r20, Y+19	; 0x13
    2074:	5c 89       	ldd	r21, Y+20	; 0x14
    2076:	c5 01       	movw	r24, r10
    2078:	b4 01       	movw	r22, r8
    207a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    207e:	9b 01       	movw	r18, r22
    2080:	ac 01       	movw	r20, r24
    2082:	c3 01       	movw	r24, r6
    2084:	b2 01       	movw	r22, r4
    2086:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    208a:	4b 01       	movw	r8, r22
    208c:	5c 01       	movw	r10, r24
    208e:	2d 89       	ldd	r18, Y+21	; 0x15
    2090:	3e 89       	ldd	r19, Y+22	; 0x16
    2092:	4f 89       	ldd	r20, Y+23	; 0x17
    2094:	58 8d       	ldd	r21, Y+24	; 0x18
    2096:	c7 01       	movw	r24, r14
    2098:	b6 01       	movw	r22, r12
    209a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c5 01       	movw	r24, r10
    20a4:	b4 01       	movw	r22, r8
    20a6:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    20aa:	2f 8d       	ldd	r18, Y+31	; 0x1f
    20ac:	38 a1       	ldd	r19, Y+32	; 0x20
    20ae:	49 a1       	ldd	r20, Y+33	; 0x21
    20b0:	5a a1       	ldd	r21, Y+34	; 0x22
    20b2:	0e 94 b7 1b 	call	0x376e	; 0x376e <atan2>
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	44 e3       	ldi	r20, 0x34	; 52
    20bc:	53 e4       	ldi	r21, 0x43	; 67
    20be:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__mulsf3>
    20c2:	2b ed       	ldi	r18, 0xDB	; 219
    20c4:	3f e0       	ldi	r19, 0x0F	; 15
    20c6:	49 e4       	ldi	r20, 0x49	; 73
    20c8:	50 e4       	ldi	r21, 0x40	; 64
    20ca:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__cmpsf2>
    20dc:	88 23       	and	r24, r24
    20de:	54 f4       	brge	.+20     	; 0x20f4 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE+0x4bc>
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	44 eb       	ldi	r20, 0xB4	; 180
    20e6:	53 e4       	ldi	r21, 0x43	; 67
    20e8:	c7 01       	movw	r24, r14
    20ea:	b6 01       	movw	r22, r12
    20ec:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    20f0:	6b 01       	movw	r12, r22
    20f2:	7c 01       	movw	r14, r24
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	aa 96       	adiw	r28, 0x2a	; 42
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	df 90       	pop	r13
    2112:	cf 90       	pop	r12
    2114:	bf 90       	pop	r11
    2116:	af 90       	pop	r10
    2118:	9f 90       	pop	r9
    211a:	8f 90       	pop	r8
    211c:	7f 90       	pop	r7
    211e:	6f 90       	pop	r6
    2120:	5f 90       	pop	r5
    2122:	4f 90       	pop	r4
    2124:	08 95       	ret

00002126 <_ZN6LSM3037headingEv>:
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	2c 97       	sbiw	r28, 0x0c	; 12
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	fc 01       	movw	r30, r24
    213c:	21 8d       	ldd	r18, Z+25	; 0x19
    213e:	23 30       	cpi	r18, 0x03	; 3
    2140:	79 f4       	brne	.+30     	; 0x2160 <_ZN6LSM3037headingEv+0x3a>
    2142:	31 e0       	ldi	r19, 0x01	; 1
    2144:	23 2f       	mov	r18, r19
    2146:	3f 83       	std	Y+7, r19	; 0x07
    2148:	18 86       	std	Y+8, r1	; 0x08
    214a:	1a 86       	std	Y+10, r1	; 0x0a
    214c:	19 86       	std	Y+9, r1	; 0x09
    214e:	1c 86       	std	Y+12, r1	; 0x0c
    2150:	1b 86       	std	Y+11, r1	; 0x0b
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	5a 85       	ldd	r21, Y+10	; 0x0a
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	6d dd       	rcall	.-1318   	; 0x1c38 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>
    215e:	0e c0       	rjmp	.+28     	; 0x217c <_ZN6LSM3037headingEv+0x56>
    2160:	1a 82       	std	Y+2, r1	; 0x02
    2162:	19 82       	std	Y+1, r1	; 0x01
    2164:	2f ef       	ldi	r18, 0xFF	; 255
    2166:	42 2f       	mov	r20, r18
    2168:	2b 83       	std	Y+3, r18	; 0x03
    216a:	2c 83       	std	Y+4, r18	; 0x04
    216c:	1e 82       	std	Y+6, r1	; 0x06
    216e:	1d 82       	std	Y+5, r1	; 0x05
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3a 81       	ldd	r19, Y+2	; 0x02
    2174:	5f ef       	ldi	r21, 0xFF	; 255
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	7e 81       	ldd	r23, Y+6	; 0x06
    217a:	5e dd       	rcall	.-1348   	; 0x1c38 <_ZN6LSM3037headingIiEEfNS_6vectorIT_EE>
    217c:	2c 96       	adiw	r28, 0x0c	; 12
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <_ZN6LSM30311writeAccRegEhh>:
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	ec 01       	movw	r28, r24
    2198:	06 2f       	mov	r16, r22
    219a:	14 2f       	mov	r17, r20
    219c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    219e:	85 ef       	ldi	r24, 0xF5	; 245
    21a0:	9e e0       	ldi	r25, 0x0E	; 14
    21a2:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
    21a6:	60 2f       	mov	r22, r16
    21a8:	85 ef       	ldi	r24, 0xF5	; 245
    21aa:	9e e0       	ldi	r25, 0x0E	; 14
    21ac:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    21b0:	61 2f       	mov	r22, r17
    21b2:	85 ef       	ldi	r24, 0xF5	; 245
    21b4:	9e e0       	ldi	r25, 0x0E	; 14
    21b6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    21ba:	85 ef       	ldi	r24, 0xF5	; 245
    21bc:	9e e0       	ldi	r25, 0x0E	; 14
    21be:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    21c2:	88 8f       	std	Y+24, r24	; 0x18
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <_ZN6LSM30311writeMagRegEhh>:
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	ec 01       	movw	r28, r24
    21d8:	06 2f       	mov	r16, r22
    21da:	14 2f       	mov	r17, r20
    21dc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    21de:	85 ef       	ldi	r24, 0xF5	; 245
    21e0:	9e e0       	ldi	r25, 0x0E	; 14
    21e2:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
    21e6:	60 2f       	mov	r22, r16
    21e8:	85 ef       	ldi	r24, 0xF5	; 245
    21ea:	9e e0       	ldi	r25, 0x0E	; 14
    21ec:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    21f0:	61 2f       	mov	r22, r17
    21f2:	85 ef       	ldi	r24, 0xF5	; 245
    21f4:	9e e0       	ldi	r25, 0x0E	; 14
    21f6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
    21fa:	85 ef       	ldi	r24, 0xF5	; 245
    21fc:	9e e0       	ldi	r25, 0x0E	; 14
    21fe:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    2202:	88 8f       	std	Y+24, r24	; 0x18
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <_ZN6LSM3038writeRegEhh>:
    220e:	fc 01       	movw	r30, r24
    2210:	21 8d       	ldd	r18, Z+25	; 0x19
    2212:	23 30       	cpi	r18, 0x03	; 3
    2214:	11 f0       	breq	.+4      	; 0x221a <_ZN6LSM3038writeRegEhh+0xc>
    2216:	60 32       	cpi	r22, 0x20	; 32
    2218:	10 f4       	brcc	.+4      	; 0x221e <_ZN6LSM3038writeRegEhh+0x10>
    221a:	d9 cf       	rjmp	.-78     	; 0x21ce <_ZN6LSM30311writeMagRegEhh>
    221c:	08 95       	ret
    221e:	b7 cf       	rjmp	.-146    	; 0x218e <_ZN6LSM30311writeAccRegEhh>
    2220:	08 95       	ret

00002222 <_ZN6LSM30313enableDefaultEv>:
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	ec 01       	movw	r28, r24
    2228:	89 8d       	ldd	r24, Y+25	; 0x19
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	a9 f4       	brne	.+42     	; 0x2258 <_ZN6LSM30313enableDefaultEv+0x36>
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	61 e2       	ldi	r22, 0x21	; 33
    2232:	ce 01       	movw	r24, r28
    2234:	ec df       	rcall	.-40     	; 0x220e <_ZN6LSM3038writeRegEhh>
    2236:	47 e5       	ldi	r20, 0x57	; 87
    2238:	60 e2       	ldi	r22, 0x20	; 32
    223a:	ce 01       	movw	r24, r28
    223c:	e8 df       	rcall	.-48     	; 0x220e <_ZN6LSM3038writeRegEhh>
    223e:	44 e6       	ldi	r20, 0x64	; 100
    2240:	64 e2       	ldi	r22, 0x24	; 36
    2242:	ce 01       	movw	r24, r28
    2244:	e4 df       	rcall	.-56     	; 0x220e <_ZN6LSM3038writeRegEhh>
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	65 e2       	ldi	r22, 0x25	; 37
    224a:	ce 01       	movw	r24, r28
    224c:	e0 df       	rcall	.-64     	; 0x220e <_ZN6LSM3038writeRegEhh>
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	66 e2       	ldi	r22, 0x26	; 38
    2252:	ce 01       	movw	r24, r28
    2254:	dc df       	rcall	.-72     	; 0x220e <_ZN6LSM3038writeRegEhh>
    2256:	1f c0       	rjmp	.+62     	; 0x2296 <_ZN6LSM30313enableDefaultEv+0x74>
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	49 f4       	brne	.+18     	; 0x226e <_ZN6LSM30313enableDefaultEv+0x4c>
    225c:	48 e0       	ldi	r20, 0x08	; 8
    225e:	63 e2       	ldi	r22, 0x23	; 35
    2260:	ce 01       	movw	r24, r28
    2262:	95 df       	rcall	.-214    	; 0x218e <_ZN6LSM30311writeAccRegEhh>
    2264:	47 e4       	ldi	r20, 0x47	; 71
    2266:	60 e2       	ldi	r22, 0x20	; 32
    2268:	ce 01       	movw	r24, r28
    226a:	91 df       	rcall	.-222    	; 0x218e <_ZN6LSM30311writeAccRegEhh>
    226c:	08 c0       	rjmp	.+16     	; 0x227e <_ZN6LSM30313enableDefaultEv+0x5c>
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	63 e2       	ldi	r22, 0x23	; 35
    2272:	ce 01       	movw	r24, r28
    2274:	8c df       	rcall	.-232    	; 0x218e <_ZN6LSM30311writeAccRegEhh>
    2276:	47 e2       	ldi	r20, 0x27	; 39
    2278:	60 e2       	ldi	r22, 0x20	; 32
    227a:	ce 01       	movw	r24, r28
    227c:	88 df       	rcall	.-240    	; 0x218e <_ZN6LSM30311writeAccRegEhh>
    227e:	4c e0       	ldi	r20, 0x0C	; 12
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	ce 01       	movw	r24, r28
    2284:	a4 df       	rcall	.-184    	; 0x21ce <_ZN6LSM30311writeMagRegEhh>
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	ce 01       	movw	r24, r28
    228c:	a0 df       	rcall	.-192    	; 0x21ce <_ZN6LSM30311writeMagRegEhh>
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	ce 01       	movw	r24, r28
    2294:	9c df       	rcall	.-200    	; 0x21ce <_ZN6LSM30311writeMagRegEhh>
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <_ZN6LSM3037readAccEv>:
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
    22b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22b6:	85 ef       	ldi	r24, 0xF5	; 245
    22b8:	9e e0       	ldi	r25, 0x0E	; 14
    22ba:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
    22be:	e0 91 f5 0e 	lds	r30, 0x0EF5
    22c2:	f0 91 f6 0e 	lds	r31, 0x0EF6
    22c6:	01 90       	ld	r0, Z+
    22c8:	f0 81       	ld	r31, Z
    22ca:	e0 2d       	mov	r30, r0
    22cc:	68 ea       	ldi	r22, 0xA8	; 168
    22ce:	85 ef       	ldi	r24, 0xF5	; 245
    22d0:	9e e0       	ldi	r25, 0x0E	; 14
    22d2:	19 95       	eicall
    22d4:	85 ef       	ldi	r24, 0xF5	; 245
    22d6:	9e e0       	ldi	r25, 0x0E	; 14
    22d8:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    22dc:	88 8f       	std	Y+24, r24	; 0x18
    22de:	46 e0       	ldi	r20, 0x06	; 6
    22e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22e2:	85 ef       	ldi	r24, 0xF5	; 245
    22e4:	9e e0       	ldi	r25, 0x0E	; 14
    22e6:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN7TwoWire11requestFromEhh>
    22ea:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    22ee:	8b 01       	movw	r16, r22
    22f0:	10 c0       	rjmp	.+32     	; 0x2312 <_ZN6LSM3037readAccEv+0x76>
    22f2:	8b a1       	ldd	r24, Y+35	; 0x23
    22f4:	9c a1       	ldd	r25, Y+36	; 0x24
    22f6:	89 2b       	or	r24, r25
    22f8:	61 f0       	breq	.+24     	; 0x2312 <_ZN6LSM3037readAccEv+0x76>
    22fa:	0e 94 3f 24 	call	0x487e	; 0x487e <millis>
    22fe:	60 1b       	sub	r22, r16
    2300:	71 0b       	sbc	r23, r17
    2302:	8b a1       	ldd	r24, Y+35	; 0x23
    2304:	9c a1       	ldd	r25, Y+36	; 0x24
    2306:	86 17       	cp	r24, r22
    2308:	97 07       	cpc	r25, r23
    230a:	18 f4       	brcc	.+6      	; 0x2312 <_ZN6LSM3037readAccEv+0x76>
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	8d a3       	std	Y+37, r24	; 0x25
    2310:	32 c0       	rjmp	.+100    	; 0x2376 <_ZN6LSM3037readAccEv+0xda>
    2312:	85 ef       	ldi	r24, 0xF5	; 245
    2314:	9e e0       	ldi	r25, 0x0E	; 14
    2316:	0e 94 56 1a 	call	0x34ac	; 0x34ac <_ZN7TwoWire9availableEv>
    231a:	06 97       	sbiw	r24, 0x06	; 6
    231c:	54 f3       	brlt	.-44     	; 0x22f2 <_ZN6LSM3037readAccEv+0x56>
    231e:	85 ef       	ldi	r24, 0xF5	; 245
    2320:	9e e0       	ldi	r25, 0x0E	; 14
    2322:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    2326:	a8 2e       	mov	r10, r24
    2328:	85 ef       	ldi	r24, 0xF5	; 245
    232a:	9e e0       	ldi	r25, 0x0E	; 14
    232c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    2330:	98 2e       	mov	r9, r24
    2332:	85 ef       	ldi	r24, 0xF5	; 245
    2334:	9e e0       	ldi	r25, 0x0E	; 14
    2336:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    233a:	08 2f       	mov	r16, r24
    233c:	85 ef       	ldi	r24, 0xF5	; 245
    233e:	9e e0       	ldi	r25, 0x0E	; 14
    2340:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    2344:	b8 2e       	mov	r11, r24
    2346:	85 ef       	ldi	r24, 0xF5	; 245
    2348:	9e e0       	ldi	r25, 0x0E	; 14
    234a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    234e:	18 2f       	mov	r17, r24
    2350:	85 ef       	ldi	r24, 0xF5	; 245
    2352:	9e e0       	ldi	r25, 0x0E	; 14
    2354:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    2358:	d9 2c       	mov	r13, r9
    235a:	c1 2c       	mov	r12, r1
    235c:	ca 28       	or	r12, r10
    235e:	d9 82       	std	Y+1, r13	; 0x01
    2360:	c8 82       	st	Y, r12
    2362:	fb 2c       	mov	r15, r11
    2364:	e1 2c       	mov	r14, r1
    2366:	e0 2a       	or	r14, r16
    2368:	fb 82       	std	Y+3, r15	; 0x03
    236a:	ea 82       	std	Y+2, r14	; 0x02
    236c:	98 2f       	mov	r25, r24
    236e:	88 27       	eor	r24, r24
    2370:	81 2b       	or	r24, r17
    2372:	9d 83       	std	Y+5, r25	; 0x05
    2374:	8c 83       	std	Y+4, r24	; 0x04
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	ef 90       	pop	r14
    2382:	df 90       	pop	r13
    2384:	cf 90       	pop	r12
    2386:	bf 90       	pop	r11
    2388:	af 90       	pop	r10
    238a:	9f 90       	pop	r9
    238c:	08 95       	ret

0000238e <_ZN6LSM3037testRegEhNS_7regAddrE>:
}

// Private Methods //////////////////////////////////////////////////////////////

int LSM303::testReg(byte address, regAddr reg)
{
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	c6 2f       	mov	r28, r22
    2394:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    2396:	85 ef       	ldi	r24, 0xF5	; 245
    2398:	9e e0       	ldi	r25, 0x0E	; 14
    239a:	0e 94 09 1b 	call	0x3612	; 0x3612 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    239e:	6d 2f       	mov	r22, r29
    23a0:	85 ef       	ldi	r24, 0xF5	; 245
    23a2:	9e e0       	ldi	r25, 0x0E	; 14
    23a4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    23a8:	85 ef       	ldi	r24, 0xF5	; 245
    23aa:	9e e0       	ldi	r25, 0x0E	; 14
    23ac:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN7TwoWire15endTransmissionEv>
    23b0:	81 11       	cpse	r24, r1
    23b2:	11 c0       	rjmp	.+34     	; 0x23d6 <_ZN6LSM3037testRegEhNS_7regAddrE+0x48>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	6c 2f       	mov	r22, r28
    23b8:	85 ef       	ldi	r24, 0xF5	; 245
    23ba:	9e e0       	ldi	r25, 0x0E	; 14
    23bc:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    23c0:	85 ef       	ldi	r24, 0xF5	; 245
    23c2:	9e e0       	ldi	r25, 0x0E	; 14
    23c4:	0e 94 56 1a 	call	0x34ac	; 0x34ac <_ZN7TwoWire9availableEv>
    23c8:	89 2b       	or	r24, r25
    23ca:	41 f0       	breq	.+16     	; 0x23dc <_ZN6LSM3037testRegEhNS_7regAddrE+0x4e>
  {
    return Wire.read();
    23cc:	85 ef       	ldi	r24, 0xF5	; 245
    23ce:	9e e0       	ldi	r25, 0x0E	; 14
    23d0:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN7TwoWire4readEv>
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <_ZN6LSM3037testRegEhNS_7regAddrE+0x52>
{
  Wire.beginTransmission(address);
  Wire.write((byte)reg);
  if (Wire.endTransmission() != 0)
  {
    return TEST_REG_ERROR;
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <_ZN6LSM3037testRegEhNS_7regAddrE+0x52>
  {
    return Wire.read();
  }
  else
  {
    return TEST_REG_ERROR;
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	9f ef       	ldi	r25, 0xFF	; 255
  }
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool LSM303::init(deviceType device, sa0State sa0)
{
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	ec 01       	movw	r28, r24
    23f0:	16 2f       	mov	r17, r22
    23f2:	04 2f       	mov	r16, r20
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    23f4:	64 30       	cpi	r22, 0x04	; 4
    23f6:	09 f4       	brne	.+2      	; 0x23fa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x14>
    23f8:	ad c0       	rjmp	.+346    	; 0x2554 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
    23fa:	42 30       	cpi	r20, 0x02	; 2
    23fc:	09 f0       	breq	.+2      	; 0x2400 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1a>
    23fe:	47 c0       	rjmp	.+142    	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    2400:	ad c0       	rjmp	.+346    	; 0x255c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x176>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2402:	4f e0       	ldi	r20, 0x0F	; 15
    2404:	6d e1       	ldi	r22, 0x1D	; 29
    2406:	ce 01       	movw	r24, r28
    2408:	c2 df       	rcall	.-124    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    240a:	89 34       	cpi	r24, 0x49	; 73
    240c:	91 05       	cpc	r25, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x2c>
    2410:	ab c0       	rjmp	.+342    	; 0x2568 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x182>
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2412:	01 30       	cpi	r16, 0x01	; 1
    2414:	41 f0       	breq	.+16     	; 0x2426 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x40>
    2416:	4f e0       	ldi	r20, 0x0F	; 15
    2418:	6e e1       	ldi	r22, 0x1E	; 30
    241a:	ce 01       	movw	r24, r28
    241c:	b8 df       	rcall	.-144    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    241e:	89 34       	cpi	r24, 0x49	; 73
    2420:	91 05       	cpc	r25, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x40>
    2424:	a3 c0       	rjmp	.+326    	; 0x256c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x186>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    2426:	14 30       	cpi	r17, 0x04	; 4
    2428:	11 f0       	breq	.+4      	; 0x242e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x48>
    242a:	13 30       	cpi	r17, 0x03	; 3
    242c:	68 f5       	brcc	.+90     	; 0x2488 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    242e:	00 23       	and	r16, r16
    2430:	a9 f0       	breq	.+42     	; 0x245c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	69 e1       	ldi	r22, 0x19	; 25
    2436:	ce 01       	movw	r24, r28
    2438:	aa df       	rcall	.-172    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	69 f0       	breq	.+26     	; 0x2458 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x72>
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
        if (device == device_auto)
    243e:	14 30       	cpi	r17, 0x04	; 4
    2440:	09 f0       	breq	.+2      	; 0x2444 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    2442:	99 c0       	rjmp	.+306    	; 0x2576 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x190>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    2444:	4f e0       	ldi	r20, 0x0F	; 15
    2446:	6e e1       	ldi	r22, 0x1E	; 30
    2448:	ce 01       	movw	r24, r28
    244a:	a1 df       	rcall	.-190    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    244c:	cc 97       	sbiw	r24, 0x3c	; 60
    244e:	09 f0       	breq	.+2      	; 0x2452 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x6c>
    2450:	94 c0       	rjmp	.+296    	; 0x257a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x194>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    2452:	01 e0       	ldi	r16, 0x01	; 1
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    2454:	12 e0       	ldi	r17, 0x02	; 2
    2456:	1b c0       	rjmp	.+54     	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    2458:	01 30       	cpi	r16, 0x01	; 1
    245a:	99 f0       	breq	.+38     	; 0x2482 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x9c>
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	68 e1       	ldi	r22, 0x18	; 24
    2460:	ce 01       	movw	r24, r28
    2462:	95 df       	rcall	.-214    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	69 f0       	breq	.+26     	; 0x2482 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x9c>
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
        if (device == device_auto)
    2468:	14 30       	cpi	r17, 0x04	; 4
    246a:	09 f0       	breq	.+2      	; 0x246e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x88>
    246c:	89 c0       	rjmp	.+274    	; 0x2580 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x19a>
        {
          // use magnetometer WHO_AM_I register to determine device type
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLM : device_DLH;
    246e:	4f e0       	ldi	r20, 0x0F	; 15
    2470:	6e e1       	ldi	r22, 0x1E	; 30
    2472:	ce 01       	movw	r24, r28
    2474:	8c df       	rcall	.-232    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    2476:	11 e0       	ldi	r17, 0x01	; 1
    2478:	cc 97       	sbiw	r24, 0x3c	; 60
    247a:	09 f0       	breq	.+2      	; 0x247e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
    247c:	10 e0       	ldi	r17, 0x00	; 0
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    247e:	00 e0       	ldi	r16, 0x00	; 0
    2480:	06 c0       	rjmp	.+12     	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    2482:	14 30       	cpi	r17, 0x04	; 4
    2484:	09 f4       	brne	.+2      	; 0x2488 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    2486:	60 c0       	rjmp	.+192    	; 0x2548 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x162>
    2488:	02 30       	cpi	r16, 0x02	; 2
    248a:	09 f4       	brne	.+2      	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    248c:	5f c0       	rjmp	.+190    	; 0x254c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x166>
    {
      return false;
    }
  }
  
  _device = device;
    248e:	19 8f       	std	Y+25, r17	; 0x19
  
  // set device addresses and translated register addresses
  switch (device)
    2490:	11 30       	cpi	r17, 0x01	; 1
    2492:	71 f1       	breq	.+92     	; 0x24f0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x10a>
    2494:	08 f4       	brcc	.+2      	; 0x2498 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb2>
    2496:	42 c0       	rjmp	.+132    	; 0x251c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
    2498:	12 30       	cpi	r17, 0x02	; 2
    249a:	c1 f0       	breq	.+48     	; 0x24cc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xe6>
    249c:	13 30       	cpi	r17, 0x03	; 3
    249e:	09 f0       	breq	.+2      	; 0x24a2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xbc>
    24a0:	57 c0       	rjmp	.+174    	; 0x2550 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16a>
  {
    case device_D:
      acc_address = mag_address = (sa0 == sa0_high) ? D_SA0_HIGH_ADDRESS : D_SA0_LOW_ADDRESS;
    24a2:	01 30       	cpi	r16, 0x01	; 1
    24a4:	11 f4       	brne	.+4      	; 0x24aa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xc4>
    24a6:	8d e1       	ldi	r24, 0x1D	; 29
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xc6>
    24aa:	8e e1       	ldi	r24, 0x1E	; 30
    24ac:	8b 8f       	std	Y+27, r24	; 0x1b
    24ae:	8a 8f       	std	Y+26, r24	; 0x1a
      translated_regs[-OUT_X_L_M] = D_OUT_X_L_M;
    24b0:	88 e0       	ldi	r24, 0x08	; 8
    24b2:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
    24b4:	89 e0       	ldi	r24, 0x09	; 9
    24b6:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
    24b8:	8a e0       	ldi	r24, 0x0A	; 10
    24ba:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
    24bc:	8b e0       	ldi	r24, 0x0B	; 11
    24be:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
    24c0:	8c e0       	ldi	r24, 0x0C	; 12
    24c2:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
    24c4:	8d e0       	ldi	r24, 0x0D	; 13
    24c6:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
      break;
    24ca:	64 c0       	rjmp	.+200    	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLHC:
      acc_address = DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS; // DLHC doesn't have configurable SA0 but uses same acc address as DLM/DLH with SA0 high
    24cc:	89 e1       	ldi	r24, 0x19	; 25
    24ce:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    24d0:	8e e1       	ldi	r24, 0x1E	; 30
    24d2:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLHC_OUT_X_H_M;
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLHC_OUT_X_L_M;
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLHC_OUT_Y_H_M;
    24dc:	87 e0       	ldi	r24, 0x07	; 7
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLHC_OUT_Y_L_M;
    24e0:	88 e0       	ldi	r24, 0x08	; 8
    24e2:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
    24e4:	85 e0       	ldi	r24, 0x05	; 5
    24e6:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
    24e8:	86 e0       	ldi	r24, 0x06	; 6
    24ea:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLHC_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLHC_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLHC_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;
    24ee:	52 c0       	rjmp	.+164    	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    24f0:	01 30       	cpi	r16, 0x01	; 1
    24f2:	11 f4       	brne	.+4      	; 0x24f8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x112>
    24f4:	89 e1       	ldi	r24, 0x19	; 25
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x114>
    24f8:	88 e1       	ldi	r24, 0x18	; 24
    24fa:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    24fc:	8e e1       	ldi	r24, 0x1E	; 30
    24fe:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLM_OUT_X_H_M;
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
    2508:	87 e0       	ldi	r24, 0x07	; 7
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
    250c:	88 e0       	ldi	r24, 0x08	; 8
    250e:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
    2510:	85 e0       	ldi	r24, 0x05	; 5
    2512:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
    2514:	86 e0       	ldi	r24, 0x06	; 6
    2516:	8a a3       	std	Y+34, r24	; 0x22
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2518:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
      break;
    251a:	3c c0       	rjmp	.+120    	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    251c:	01 30       	cpi	r16, 0x01	; 1
    251e:	11 f4       	brne	.+4      	; 0x2524 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x13e>
    2520:	89 e1       	ldi	r24, 0x19	; 25
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x140>
    2524:	88 e1       	ldi	r24, 0x18	; 24
    2526:	8a 8f       	std	Y+26, r24	; 0x1a
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    2528:	8e e1       	ldi	r24, 0x1E	; 30
    252a:	8b 8f       	std	Y+27, r24	; 0x1b
      translated_regs[-OUT_X_H_M] = DLH_OUT_X_H_M;
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	8d 8f       	std	Y+29, r24	; 0x1d
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
    2530:	84 e0       	ldi	r24, 0x04	; 4
    2532:	8e 8f       	std	Y+30, r24	; 0x1e
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
    2534:	85 e0       	ldi	r24, 0x05	; 5
    2536:	8f 8f       	std	Y+31, r24	; 0x1f
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
    2538:	86 e0       	ldi	r24, 0x06	; 6
    253a:	88 a3       	std	Y+32, r24	; 0x20
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
    253c:	87 e0       	ldi	r24, 0x07	; 7
    253e:	89 a3       	std	Y+33, r24	; 0x21
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
    2540:	88 e0       	ldi	r24, 0x08	; 8
    2542:	8a a3       	std	Y+34, r24	; 0x22
      break;
  }
  
  return true;
    2544:	81 e0       	ldi	r24, 0x01	; 1
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
    2546:	26 c0       	rjmp	.+76     	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    {
      return false;
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	24 c0       	rjmp	.+72     	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	22 c0       	rjmp	.+68     	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	20 c0       	rjmp	.+64     	; 0x2594 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1ae>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2554:	44 23       	and	r20, r20
    2556:	09 f4       	brne	.+2      	; 0x255a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x174>
    2558:	5e cf       	rjmp	.-324    	; 0x2416 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x30>
    255a:	53 cf       	rjmp	.-346    	; 0x2402 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x1c>
{
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    255c:	8d ef       	ldi	r24, 0xFD	; 253
    255e:	86 0f       	add	r24, r22
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	08 f0       	brcs	.+2      	; 0x2566 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x180>
    2564:	62 cf       	rjmp	.-316    	; 0x242a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x44>
    2566:	0e c0       	rjmp	.+28     	; 0x2584 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x19e>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    2568:	01 e0       	ldi	r16, 0x01	; 1
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18c>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011110 with D ID; it's a D with SA0 low
        device = device_D;
        sa0 = sa0_low;
    256c:	00 e0       	ldi	r16, 0x00	; 0
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18c>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    2570:	01 e0       	ldi	r16, 0x01	; 1
    2572:	13 e0       	ldi	r17, 0x03	; 3
    2574:	89 cf       	rjmp	.-238    	; 0x2488 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa2>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    2576:	01 e0       	ldi	r16, 0x01	; 1
    2578:	8a cf       	rjmp	.-236    	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
    257a:	01 e0       	ldi	r16, 0x01	; 1
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    257c:	10 e0       	ldi	r17, 0x00	; 0
    257e:	87 cf       	rjmp	.-242    	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    2580:	00 e0       	ldi	r16, 0x00	; 0
    2582:	85 cf       	rjmp	.-246    	; 0x248e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xa8>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    2584:	4f e0       	ldi	r20, 0x0F	; 15
    2586:	6d e1       	ldi	r22, 0x1D	; 29
    2588:	ce 01       	movw	r24, r28
    258a:	01 df       	rcall	.-510    	; 0x238e <_ZN6LSM3037testRegEhNS_7regAddrE>
    258c:	89 34       	cpi	r24, 0x49	; 73
    258e:	91 05       	cpc	r25, r1
    2590:	79 f3       	breq	.-34     	; 0x2570 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18a>
    2592:	41 cf       	rjmp	.-382    	; 0x2416 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x30>
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
}
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <_ZN7NewPingC1Ehhj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO) // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000);  // Set timer to 1ms (1000 uS).
#else
	OCR0A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK0 |= (1<<OCIE0A); // Enable Timer2 interrupt.
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	dc 01       	movw	r26, r24
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	fb 01       	movw	r30, r22
    25a8:	e8 51       	subi	r30, 0x18	; 24
    25aa:	fc 4f       	sbci	r31, 0xFC	; 252
    25ac:	e4 91       	lpm	r30, Z
    25ae:	14 96       	adiw	r26, 0x04	; 4
    25b0:	ec 93       	st	X, r30
    25b2:	14 97       	sbiw	r26, 0x04	; 4
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	fa 01       	movw	r30, r20
    25b8:	e8 51       	subi	r30, 0x18	; 24
    25ba:	fc 4f       	sbci	r31, 0xFC	; 252
    25bc:	e4 91       	lpm	r30, Z
    25be:	15 96       	adiw	r26, 0x05	; 5
    25c0:	ec 93       	st	X, r30
    25c2:	15 97       	sbiw	r26, 0x05	; 5
    25c4:	62 5d       	subi	r22, 0xD2	; 210
    25c6:	7b 4f       	sbci	r23, 0xFB	; 251
    25c8:	fb 01       	movw	r30, r22
    25ca:	84 91       	lpm	r24, Z
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	82 57       	subi	r24, 0x72	; 114
    25d4:	9b 4f       	sbci	r25, 0xFB	; 251
    25d6:	fc 01       	movw	r30, r24
    25d8:	c5 91       	lpm	r28, Z+
    25da:	d4 91       	lpm	r29, Z
    25dc:	17 96       	adiw	r26, 0x07	; 7
    25de:	dc 93       	st	X, r29
    25e0:	ce 93       	st	-X, r28
    25e2:	16 97       	sbiw	r26, 0x06	; 6
    25e4:	fa 01       	movw	r30, r20
    25e6:	e2 5d       	subi	r30, 0xD2	; 210
    25e8:	fb 4f       	sbci	r31, 0xFB	; 251
    25ea:	84 91       	lpm	r24, Z
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	8c 58       	subi	r24, 0x8C	; 140
    25f4:	9b 4f       	sbci	r25, 0xFB	; 251
    25f6:	fc 01       	movw	r30, r24
    25f8:	45 91       	lpm	r20, Z+
    25fa:	54 91       	lpm	r21, Z
    25fc:	19 96       	adiw	r26, 0x09	; 9
    25fe:	5c 93       	st	X, r21
    2600:	4e 93       	st	-X, r20
    2602:	18 97       	sbiw	r26, 0x08	; 8
    2604:	fb 01       	movw	r30, r22
    2606:	64 91       	lpm	r22, Z
    2608:	e6 2f       	mov	r30, r22
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	ee 0f       	add	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	e8 55       	subi	r30, 0x58	; 88
    2612:	fb 4f       	sbci	r31, 0xFB	; 251
    2614:	85 91       	lpm	r24, Z+
    2616:	94 91       	lpm	r25, Z
    2618:	1b 96       	adiw	r26, 0x0b	; 11
    261a:	9c 93       	st	X, r25
    261c:	8e 93       	st	-X, r24
    261e:	1a 97       	sbiw	r26, 0x0a	; 10
    2620:	2f 5f       	subi	r18, 0xFF	; 255
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	49 e3       	ldi	r20, 0x39	; 57
    2626:	42 9f       	mul	r20, r18
    2628:	c0 01       	movw	r24, r0
    262a:	43 9f       	mul	r20, r19
    262c:	90 0d       	add	r25, r0
    262e:	11 24       	eor	r1, r1
    2630:	8e 38       	cpi	r24, 0x8E	; 142
    2632:	ff e6       	ldi	r31, 0x6F	; 111
    2634:	9f 07       	cpc	r25, r31
    2636:	10 f0       	brcs	.+4      	; 0x263c <_ZN7NewPingC1Ehhj+0x9e>
    2638:	8d e8       	ldi	r24, 0x8D	; 141
    263a:	9f e6       	ldi	r25, 0x6F	; 111
    263c:	1d 96       	adiw	r26, 0x0d	; 13
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	1c 97       	sbiw	r26, 0x0c	; 12
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <__vector_21>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER0_COMPA_vect) {
    264a:	1f 92       	push	r1
    264c:	0f 92       	push	r0
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	0f 92       	push	r0
    2652:	11 24       	eor	r1, r1
    2654:	0b b6       	in	r0, 0x3b	; 59
    2656:	0f 92       	push	r0
    2658:	2f 93       	push	r18
    265a:	3f 93       	push	r19
    265c:	4f 93       	push	r20
    265e:	5f 93       	push	r21
    2660:	6f 93       	push	r22
    2662:	7f 93       	push	r23
    2664:	8f 93       	push	r24
    2666:	9f 93       	push	r25
    2668:	af 93       	push	r26
    266a:	bf 93       	push	r27
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    2670:	e0 91 2c 0e 	lds	r30, 0x0E2C
    2674:	f0 91 2d 0e 	lds	r31, 0x0E2D
    2678:	19 95       	eicall
}
    267a:	ff 91       	pop	r31
    267c:	ef 91       	pop	r30
    267e:	bf 91       	pop	r27
    2680:	af 91       	pop	r26
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	7f 91       	pop	r23
    2688:	6f 91       	pop	r22
    268a:	5f 91       	pop	r21
    268c:	4f 91       	pop	r20
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	0b be       	out	0x3b, r0	; 59
    2696:	0f 90       	pop	r0
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	0f 90       	pop	r0
    269c:	1f 90       	pop	r1
    269e:	18 95       	reti

000026a0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    26a0:	31 e1       	ldi	r19, 0x11	; 17
    26a2:	fc 01       	movw	r30, r24
    26a4:	30 83       	st	Z, r19
    26a6:	31 97       	sbiw	r30, 0x01	; 1
    26a8:	22 e2       	ldi	r18, 0x22	; 34
    26aa:	20 83       	st	Z, r18
    26ac:	31 97       	sbiw	r30, 0x01	; 1
    26ae:	a3 e3       	ldi	r26, 0x33	; 51
    26b0:	a0 83       	st	Z, r26
    26b2:	31 97       	sbiw	r30, 0x01	; 1
    26b4:	60 83       	st	Z, r22
    26b6:	31 97       	sbiw	r30, 0x01	; 1
    26b8:	70 83       	st	Z, r23
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	10 82       	st	Z, r1
    26be:	31 97       	sbiw	r30, 0x01	; 1
    26c0:	10 82       	st	Z, r1
    26c2:	31 97       	sbiw	r30, 0x01	; 1
    26c4:	60 e8       	ldi	r22, 0x80	; 128
    26c6:	60 83       	st	Z, r22
    26c8:	31 97       	sbiw	r30, 0x01	; 1
    26ca:	10 82       	st	Z, r1
    26cc:	31 97       	sbiw	r30, 0x01	; 1
    26ce:	10 82       	st	Z, r1
    26d0:	31 97       	sbiw	r30, 0x01	; 1
    26d2:	10 82       	st	Z, r1
    26d4:	31 97       	sbiw	r30, 0x01	; 1
    26d6:	62 e0       	ldi	r22, 0x02	; 2
    26d8:	60 83       	st	Z, r22
    26da:	31 97       	sbiw	r30, 0x01	; 1
    26dc:	63 e0       	ldi	r22, 0x03	; 3
    26de:	60 83       	st	Z, r22
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	64 e0       	ldi	r22, 0x04	; 4
    26e4:	60 83       	st	Z, r22
    26e6:	31 97       	sbiw	r30, 0x01	; 1
    26e8:	65 e0       	ldi	r22, 0x05	; 5
    26ea:	60 83       	st	Z, r22
    26ec:	31 97       	sbiw	r30, 0x01	; 1
    26ee:	66 e0       	ldi	r22, 0x06	; 6
    26f0:	60 83       	st	Z, r22
    26f2:	31 97       	sbiw	r30, 0x01	; 1
    26f4:	67 e0       	ldi	r22, 0x07	; 7
    26f6:	60 83       	st	Z, r22
    26f8:	31 97       	sbiw	r30, 0x01	; 1
    26fa:	68 e0       	ldi	r22, 0x08	; 8
    26fc:	60 83       	st	Z, r22
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	69 e0       	ldi	r22, 0x09	; 9
    2702:	60 83       	st	Z, r22
    2704:	31 97       	sbiw	r30, 0x01	; 1
    2706:	60 e1       	ldi	r22, 0x10	; 16
    2708:	60 83       	st	Z, r22
    270a:	31 97       	sbiw	r30, 0x01	; 1
    270c:	30 83       	st	Z, r19
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	32 e1       	ldi	r19, 0x12	; 18
    2712:	30 83       	st	Z, r19
    2714:	31 97       	sbiw	r30, 0x01	; 1
    2716:	33 e1       	ldi	r19, 0x13	; 19
    2718:	30 83       	st	Z, r19
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	34 e1       	ldi	r19, 0x14	; 20
    271e:	30 83       	st	Z, r19
    2720:	31 97       	sbiw	r30, 0x01	; 1
    2722:	35 e1       	ldi	r19, 0x15	; 21
    2724:	30 83       	st	Z, r19
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	36 e1       	ldi	r19, 0x16	; 22
    272a:	30 83       	st	Z, r19
    272c:	31 97       	sbiw	r30, 0x01	; 1
    272e:	37 e1       	ldi	r19, 0x17	; 23
    2730:	30 83       	st	Z, r19
    2732:	31 97       	sbiw	r30, 0x01	; 1
    2734:	38 e1       	ldi	r19, 0x18	; 24
    2736:	30 83       	st	Z, r19
    2738:	31 97       	sbiw	r30, 0x01	; 1
    273a:	39 e1       	ldi	r19, 0x19	; 25
    273c:	30 83       	st	Z, r19
    273e:	31 97       	sbiw	r30, 0x01	; 1
    2740:	30 e2       	ldi	r19, 0x20	; 32
    2742:	30 83       	st	Z, r19
    2744:	31 97       	sbiw	r30, 0x01	; 1
    2746:	31 e2       	ldi	r19, 0x21	; 33
    2748:	30 83       	st	Z, r19
    274a:	31 97       	sbiw	r30, 0x01	; 1
    274c:	20 83       	st	Z, r18
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	23 e2       	ldi	r18, 0x23	; 35
    2752:	20 83       	st	Z, r18
    2754:	31 97       	sbiw	r30, 0x01	; 1
    2756:	40 83       	st	Z, r20
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	50 83       	st	Z, r21
    275c:	31 97       	sbiw	r30, 0x01	; 1
    275e:	26 e2       	ldi	r18, 0x26	; 38
    2760:	20 83       	st	Z, r18
    2762:	31 97       	sbiw	r30, 0x01	; 1
    2764:	27 e2       	ldi	r18, 0x27	; 39
    2766:	20 83       	st	Z, r18
    2768:	31 97       	sbiw	r30, 0x01	; 1
    276a:	28 e2       	ldi	r18, 0x28	; 40
    276c:	20 83       	st	Z, r18
    276e:	31 97       	sbiw	r30, 0x01	; 1
    2770:	29 e2       	ldi	r18, 0x29	; 41
    2772:	20 83       	st	Z, r18
    2774:	31 97       	sbiw	r30, 0x01	; 1
    2776:	20 e3       	ldi	r18, 0x30	; 48
    2778:	20 83       	st	Z, r18
    277a:	31 97       	sbiw	r30, 0x01	; 1
    277c:	21 e3       	ldi	r18, 0x31	; 49
    277e:	20 83       	st	Z, r18
    2780:	89 97       	sbiw	r24, 0x29	; 41
    2782:	08 95       	ret

00002784 <xPortStartScheduler>:
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	80 93 b0 00 	sts	0x00B0, r24
    278a:	10 92 b2 00 	sts	0x00B2, r1
    278e:	96 ee       	ldi	r25, 0xE6	; 230
    2790:	90 93 b3 00 	sts	0x00B3, r25
    2794:	80 93 70 00 	sts	0x0070, r24
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	80 93 b1 00 	sts	0x00B1, r24
    279e:	a0 91 85 0e 	lds	r26, 0x0E85
    27a2:	b0 91 86 0e 	lds	r27, 0x0E86
    27a6:	cd 91       	ld	r28, X+
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	dd 91       	ld	r29, X+
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	ff 91       	pop	r31
    27b0:	ef 91       	pop	r30
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	bf 91       	pop	r27
    27b8:	af 91       	pop	r26
    27ba:	9f 91       	pop	r25
    27bc:	8f 91       	pop	r24
    27be:	7f 91       	pop	r23
    27c0:	6f 91       	pop	r22
    27c2:	5f 91       	pop	r21
    27c4:	4f 91       	pop	r20
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
    27d6:	bf 90       	pop	r11
    27d8:	af 90       	pop	r10
    27da:	9f 90       	pop	r9
    27dc:	8f 90       	pop	r8
    27de:	7f 90       	pop	r7
    27e0:	6f 90       	pop	r6
    27e2:	5f 90       	pop	r5
    27e4:	4f 90       	pop	r4
    27e6:	3f 90       	pop	r3
    27e8:	2f 90       	pop	r2
    27ea:	1f 90       	pop	r1
    27ec:	0f 90       	pop	r0
    27ee:	0c be       	out	0x3c, r0	; 60
    27f0:	0f 90       	pop	r0
    27f2:	0b be       	out	0x3b, r0	; 59
    27f4:	0f 90       	pop	r0
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	0f 90       	pop	r0
    27fa:	08 95       	ret
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	08 95       	ret

00002800 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2800:	0f 92       	push	r0
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	0f 92       	push	r0
    2808:	0b b6       	in	r0, 0x3b	; 59
    280a:	0f 92       	push	r0
    280c:	0c b6       	in	r0, 0x3c	; 60
    280e:	0f 92       	push	r0
    2810:	1f 92       	push	r1
    2812:	11 24       	eor	r1, r1
    2814:	2f 92       	push	r2
    2816:	3f 92       	push	r3
    2818:	4f 92       	push	r4
    281a:	5f 92       	push	r5
    281c:	6f 92       	push	r6
    281e:	7f 92       	push	r7
    2820:	8f 92       	push	r8
    2822:	9f 92       	push	r9
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	ef 93       	push	r30
    284e:	ff 93       	push	r31
    2850:	a0 91 85 0e 	lds	r26, 0x0E85
    2854:	b0 91 86 0e 	lds	r27, 0x0E86
    2858:	0d b6       	in	r0, 0x3d	; 61
    285a:	0d 92       	st	X+, r0
    285c:	0e b6       	in	r0, 0x3e	; 62
    285e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2860:	b2 d3       	rcall	.+1892   	; 0x2fc6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2862:	a0 91 85 0e 	lds	r26, 0x0E85
    2866:	b0 91 86 0e 	lds	r27, 0x0E86
    286a:	cd 91       	ld	r28, X+
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	dd 91       	ld	r29, X+
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	ff 91       	pop	r31
    2874:	ef 91       	pop	r30
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	bf 91       	pop	r27
    287c:	af 91       	pop	r26
    287e:	9f 91       	pop	r25
    2880:	8f 91       	pop	r24
    2882:	7f 91       	pop	r23
    2884:	6f 91       	pop	r22
    2886:	5f 91       	pop	r21
    2888:	4f 91       	pop	r20
    288a:	3f 91       	pop	r19
    288c:	2f 91       	pop	r18
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
    289a:	bf 90       	pop	r11
    289c:	af 90       	pop	r10
    289e:	9f 90       	pop	r9
    28a0:	8f 90       	pop	r8
    28a2:	7f 90       	pop	r7
    28a4:	6f 90       	pop	r6
    28a6:	5f 90       	pop	r5
    28a8:	4f 90       	pop	r4
    28aa:	3f 90       	pop	r3
    28ac:	2f 90       	pop	r2
    28ae:	1f 90       	pop	r1
    28b0:	0f 90       	pop	r0
    28b2:	0c be       	out	0x3c, r0	; 60
    28b4:	0f 90       	pop	r0
    28b6:	0b be       	out	0x3b, r0	; 59
    28b8:	0f 90       	pop	r0
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    28be:	08 95       	ret

000028c0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    28c0:	0f 92       	push	r0
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	0f 92       	push	r0
    28c8:	0b b6       	in	r0, 0x3b	; 59
    28ca:	0f 92       	push	r0
    28cc:	0c b6       	in	r0, 0x3c	; 60
    28ce:	0f 92       	push	r0
    28d0:	1f 92       	push	r1
    28d2:	11 24       	eor	r1, r1
    28d4:	2f 92       	push	r2
    28d6:	3f 92       	push	r3
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	2f 93       	push	r18
    28f6:	3f 93       	push	r19
    28f8:	4f 93       	push	r20
    28fa:	5f 93       	push	r21
    28fc:	6f 93       	push	r22
    28fe:	7f 93       	push	r23
    2900:	8f 93       	push	r24
    2902:	9f 93       	push	r25
    2904:	af 93       	push	r26
    2906:	bf 93       	push	r27
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	ef 93       	push	r30
    290e:	ff 93       	push	r31
    2910:	a0 91 85 0e 	lds	r26, 0x0E85
    2914:	b0 91 86 0e 	lds	r27, 0x0E86
    2918:	0d b6       	in	r0, 0x3d	; 61
    291a:	0d 92       	st	X+, r0
    291c:	0e b6       	in	r0, 0x3e	; 62
    291e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2920:	be d1       	rcall	.+892    	; 0x2c9e <xTaskIncrementTick>
    2922:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2924:	50 d3       	rcall	.+1696   	; 0x2fc6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2926:	a0 91 85 0e 	lds	r26, 0x0E85
    292a:	b0 91 86 0e 	lds	r27, 0x0E86
    292e:	cd 91       	ld	r28, X+
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	dd 91       	ld	r29, X+
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	df 90       	pop	r13
    295c:	cf 90       	pop	r12
    295e:	bf 90       	pop	r11
    2960:	af 90       	pop	r10
    2962:	9f 90       	pop	r9
    2964:	8f 90       	pop	r8
    2966:	7f 90       	pop	r7
    2968:	6f 90       	pop	r6
    296a:	5f 90       	pop	r5
    296c:	4f 90       	pop	r4
    296e:	3f 90       	pop	r3
    2970:	2f 90       	pop	r2
    2972:	1f 90       	pop	r1
    2974:	0f 90       	pop	r0
    2976:	0c be       	out	0x3c, r0	; 60
    2978:	0f 90       	pop	r0
    297a:	0b be       	out	0x3b, r0	; 59
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2982:	08 95       	ret

00002984 <__vector_13>:
*	the	context	is	saved	at	the	start	of	vPortYieldFromTick().		The	tick
*	count	is	incremented	after	the	context	is	saved.
*/
ISR(TIMER2_COMPA_vect,	ISR_NAKED)
{
	vPortYieldFromTick();
    2984:	9d df       	rcall	.-198    	; 0x28c0 <vPortYieldFromTick>
	asm	volatile	(	"reti"	);
    2986:	18 95       	reti

00002988 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2988:	e0 91 4d 0e 	lds	r30, 0x0E4D
    298c:	f0 91 4e 0e 	lds	r31, 0x0E4E
    2990:	80 81       	ld	r24, Z
    2992:	81 11       	cpse	r24, r1
    2994:	07 c0       	rjmp	.+14     	; 0x29a4 <prvResetNextTaskUnblockTime+0x1c>
    2996:	8f ef       	ldi	r24, 0xFF	; 255
    2998:	9f ef       	ldi	r25, 0xFF	; 255
    299a:	90 93 5f 02 	sts	0x025F, r25
    299e:	80 93 5e 02 	sts	0x025E, r24
    29a2:	08 95       	ret
    29a4:	e0 91 4d 0e 	lds	r30, 0x0E4D
    29a8:	f0 91 4e 0e 	lds	r31, 0x0E4E
    29ac:	05 80       	ldd	r0, Z+5	; 0x05
    29ae:	f6 81       	ldd	r31, Z+6	; 0x06
    29b0:	e0 2d       	mov	r30, r0
    29b2:	06 80       	ldd	r0, Z+6	; 0x06
    29b4:	f7 81       	ldd	r31, Z+7	; 0x07
    29b6:	e0 2d       	mov	r30, r0
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	90 93 5f 02 	sts	0x025F, r25
    29c0:	80 93 5e 02 	sts	0x025E, r24
    29c4:	08 95       	ret

000029c6 <prvAddCurrentTaskToDelayedList>:
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	ec 01       	movw	r28, r24
    29cc:	e0 91 85 0e 	lds	r30, 0x0E85
    29d0:	f0 91 86 0e 	lds	r31, 0x0E86
    29d4:	93 83       	std	Z+3, r25	; 0x03
    29d6:	82 83       	std	Z+2, r24	; 0x02
    29d8:	80 91 35 0e 	lds	r24, 0x0E35
    29dc:	90 91 36 0e 	lds	r25, 0x0E36
    29e0:	c8 17       	cp	r28, r24
    29e2:	d9 07       	cpc	r29, r25
    29e4:	60 f4       	brcc	.+24     	; 0x29fe <prvAddCurrentTaskToDelayedList+0x38>
    29e6:	60 91 85 0e 	lds	r22, 0x0E85
    29ea:	70 91 86 0e 	lds	r23, 0x0E86
    29ee:	80 91 4b 0e 	lds	r24, 0x0E4B
    29f2:	90 91 4c 0e 	lds	r25, 0x0E4C
    29f6:	6e 5f       	subi	r22, 0xFE	; 254
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	1d d8       	rcall	.-4038   	; 0x1a36 <vListInsert>
    29fc:	16 c0       	rjmp	.+44     	; 0x2a2a <prvAddCurrentTaskToDelayedList+0x64>
    29fe:	60 91 85 0e 	lds	r22, 0x0E85
    2a02:	70 91 86 0e 	lds	r23, 0x0E86
    2a06:	80 91 4d 0e 	lds	r24, 0x0E4D
    2a0a:	90 91 4e 0e 	lds	r25, 0x0E4E
    2a0e:	6e 5f       	subi	r22, 0xFE	; 254
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	11 d8       	rcall	.-4062   	; 0x1a36 <vListInsert>
    2a14:	80 91 5e 02 	lds	r24, 0x025E
    2a18:	90 91 5f 02 	lds	r25, 0x025F
    2a1c:	c8 17       	cp	r28, r24
    2a1e:	d9 07       	cpc	r29, r25
    2a20:	20 f4       	brcc	.+8      	; 0x2a2a <prvAddCurrentTaskToDelayedList+0x64>
    2a22:	d0 93 5f 02 	sts	0x025F, r29
    2a26:	c0 93 5e 02 	sts	0x025E, r28
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <xTaskGenericCreate>:
    2a30:	4f 92       	push	r4
    2a32:	5f 92       	push	r5
    2a34:	6f 92       	push	r6
    2a36:	7f 92       	push	r7
    2a38:	8f 92       	push	r8
    2a3a:	9f 92       	push	r9
    2a3c:	af 92       	push	r10
    2a3e:	bf 92       	push	r11
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	4c 01       	movw	r8, r24
    2a52:	5b 01       	movw	r10, r22
    2a54:	2a 01       	movw	r4, r20
    2a56:	39 01       	movw	r6, r18
    2a58:	81 e2       	ldi	r24, 0x21	; 33
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <pvPortMalloc>
    2a60:	ec 01       	movw	r28, r24
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <xTaskGenericCreate+0x38>
    2a66:	da c0       	rjmp	.+436    	; 0x2c1c <xTaskGenericCreate+0x1ec>
    2a68:	c1 14       	cp	r12, r1
    2a6a:	d1 04       	cpc	r13, r1
    2a6c:	09 f0       	breq	.+2      	; 0x2a70 <xTaskGenericCreate+0x40>
    2a6e:	bf c0       	rjmp	.+382    	; 0x2bee <xTaskGenericCreate+0x1be>
    2a70:	c2 01       	movw	r24, r4
    2a72:	0e 94 3a 0b 	call	0x1674	; 0x1674 <pvPortMalloc>
    2a76:	98 8f       	std	Y+24, r25	; 0x18
    2a78:	8f 8b       	std	Y+23, r24	; 0x17
    2a7a:	89 2b       	or	r24, r25
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <xTaskGenericCreate+0x50>
    2a7e:	b9 c0       	rjmp	.+370    	; 0x2bf2 <xTaskGenericCreate+0x1c2>
    2a80:	ce 01       	movw	r24, r28
    2a82:	0e 94 6f 0b 	call	0x16de	; 0x16de <vPortFree>
    2a86:	ca c0       	rjmp	.+404    	; 0x2c1c <xTaskGenericCreate+0x1ec>
    2a88:	cf 01       	movw	r24, r30
    2a8a:	31 91       	ld	r19, Z+
    2a8c:	da 01       	movw	r26, r20
    2a8e:	3d 93       	st	X+, r19
    2a90:	ad 01       	movw	r20, r26
    2a92:	dc 01       	movw	r26, r24
    2a94:	8c 91       	ld	r24, X
    2a96:	88 23       	and	r24, r24
    2a98:	11 f0       	breq	.+4      	; 0x2a9e <xTaskGenericCreate+0x6e>
    2a9a:	21 50       	subi	r18, 0x01	; 1
    2a9c:	a9 f7       	brne	.-22     	; 0x2a88 <xTaskGenericCreate+0x58>
    2a9e:	18 a2       	std	Y+32, r1	; 0x20
    2aa0:	10 2f       	mov	r17, r16
    2aa2:	04 30       	cpi	r16, 0x04	; 4
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <xTaskGenericCreate+0x78>
    2aa6:	13 e0       	ldi	r17, 0x03	; 3
    2aa8:	1e 8b       	std	Y+22, r17	; 0x16
    2aaa:	5e 01       	movw	r10, r28
    2aac:	b2 e0       	ldi	r27, 0x02	; 2
    2aae:	ab 0e       	add	r10, r27
    2ab0:	b1 1c       	adc	r11, r1
    2ab2:	c5 01       	movw	r24, r10
    2ab4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <vListInitialiseItem>
    2ab8:	ce 01       	movw	r24, r28
    2aba:	0c 96       	adiw	r24, 0x0c	; 12
    2abc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <vListInitialiseItem>
    2ac0:	d9 87       	std	Y+9, r29	; 0x09
    2ac2:	c8 87       	std	Y+8, r28	; 0x08
    2ac4:	84 e0       	ldi	r24, 0x04	; 4
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	81 1b       	sub	r24, r17
    2aca:	91 09       	sbc	r25, r1
    2acc:	9d 87       	std	Y+13, r25	; 0x0d
    2ace:	8c 87       	std	Y+12, r24	; 0x0c
    2ad0:	db 8b       	std	Y+19, r29	; 0x13
    2ad2:	ca 8b       	std	Y+18, r28	; 0x12
    2ad4:	a3 01       	movw	r20, r6
    2ad6:	b4 01       	movw	r22, r8
    2ad8:	c6 01       	movw	r24, r12
    2ada:	e2 dd       	rcall	.-1084   	; 0x26a0 <pxPortInitialiseStack>
    2adc:	99 83       	std	Y+1, r25	; 0x01
    2ade:	88 83       	st	Y, r24
    2ae0:	e1 14       	cp	r14, r1
    2ae2:	f1 04       	cpc	r15, r1
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <xTaskGenericCreate+0xbc>
    2ae6:	f7 01       	movw	r30, r14
    2ae8:	d1 83       	std	Z+1, r29	; 0x01
    2aea:	c0 83       	st	Z, r28
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	0f 92       	push	r0
    2af2:	80 91 37 0e 	lds	r24, 0x0E37
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	80 93 37 0e 	sts	0x0E37, r24
    2afc:	80 91 85 0e 	lds	r24, 0x0E85
    2b00:	90 91 86 0e 	lds	r25, 0x0E86
    2b04:	89 2b       	or	r24, r25
    2b06:	a9 f5       	brne	.+106    	; 0x2b72 <xTaskGenericCreate+0x142>
    2b08:	d0 93 86 0e 	sts	0x0E86, r29
    2b0c:	c0 93 85 0e 	sts	0x0E85, r28
    2b10:	80 91 37 0e 	lds	r24, 0x0E37
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	e1 f5       	brne	.+120    	; 0x2b90 <xTaskGenericCreate+0x160>
    2b18:	81 e6       	ldi	r24, 0x61	; 97
    2b1a:	9e e0       	ldi	r25, 0x0E	; 14
    2b1c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b20:	8a e6       	ldi	r24, 0x6A	; 106
    2b22:	9e e0       	ldi	r25, 0x0E	; 14
    2b24:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b28:	83 e7       	ldi	r24, 0x73	; 115
    2b2a:	9e e0       	ldi	r25, 0x0E	; 14
    2b2c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b30:	8c e7       	ldi	r24, 0x7C	; 124
    2b32:	9e e0       	ldi	r25, 0x0E	; 14
    2b34:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b38:	88 e5       	ldi	r24, 0x58	; 88
    2b3a:	9e e0       	ldi	r25, 0x0E	; 14
    2b3c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b40:	8f e4       	ldi	r24, 0x4F	; 79
    2b42:	9e e0       	ldi	r25, 0x0E	; 14
    2b44:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b48:	82 e4       	ldi	r24, 0x42	; 66
    2b4a:	9e e0       	ldi	r25, 0x0E	; 14
    2b4c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b50:	89 e3       	ldi	r24, 0x39	; 57
    2b52:	9e e0       	ldi	r25, 0x0E	; 14
    2b54:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListInitialise>
    2b58:	88 e5       	ldi	r24, 0x58	; 88
    2b5a:	9e e0       	ldi	r25, 0x0E	; 14
    2b5c:	90 93 4e 0e 	sts	0x0E4E, r25
    2b60:	80 93 4d 0e 	sts	0x0E4D, r24
    2b64:	8f e4       	ldi	r24, 0x4F	; 79
    2b66:	9e e0       	ldi	r25, 0x0E	; 14
    2b68:	90 93 4c 0e 	sts	0x0E4C, r25
    2b6c:	80 93 4b 0e 	sts	0x0E4B, r24
    2b70:	0f c0       	rjmp	.+30     	; 0x2b90 <xTaskGenericCreate+0x160>
    2b72:	80 91 33 0e 	lds	r24, 0x0E33
    2b76:	81 11       	cpse	r24, r1
    2b78:	0b c0       	rjmp	.+22     	; 0x2b90 <xTaskGenericCreate+0x160>
    2b7a:	e0 91 85 0e 	lds	r30, 0x0E85
    2b7e:	f0 91 86 0e 	lds	r31, 0x0E86
    2b82:	86 89       	ldd	r24, Z+22	; 0x16
    2b84:	08 17       	cp	r16, r24
    2b86:	20 f0       	brcs	.+8      	; 0x2b90 <xTaskGenericCreate+0x160>
    2b88:	d0 93 86 0e 	sts	0x0E86, r29
    2b8c:	c0 93 85 0e 	sts	0x0E85, r28
    2b90:	80 91 2f 0e 	lds	r24, 0x0E2F
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	80 93 2f 0e 	sts	0x0E2F, r24
    2b9a:	8e 89       	ldd	r24, Y+22	; 0x16
    2b9c:	90 91 34 0e 	lds	r25, 0x0E34
    2ba0:	98 17       	cp	r25, r24
    2ba2:	10 f4       	brcc	.+4      	; 0x2ba8 <xTaskGenericCreate+0x178>
    2ba4:	80 93 34 0e 	sts	0x0E34, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9c 01       	movw	r18, r24
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	22 0f       	add	r18, r18
    2bb6:	33 1f       	adc	r19, r19
    2bb8:	82 0f       	add	r24, r18
    2bba:	93 1f       	adc	r25, r19
    2bbc:	b5 01       	movw	r22, r10
    2bbe:	8f 59       	subi	r24, 0x9F	; 159
    2bc0:	91 4f       	sbci	r25, 0xF1	; 241
    2bc2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <vListInsertEnd>
    2bc6:	0f 90       	pop	r0
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	80 91 33 0e 	lds	r24, 0x0E33
    2bce:	88 23       	and	r24, r24
    2bd0:	51 f0       	breq	.+20     	; 0x2be6 <xTaskGenericCreate+0x1b6>
    2bd2:	e0 91 85 0e 	lds	r30, 0x0E85
    2bd6:	f0 91 86 0e 	lds	r31, 0x0E86
    2bda:	86 89       	ldd	r24, Z+22	; 0x16
    2bdc:	80 17       	cp	r24, r16
    2bde:	28 f4       	brcc	.+10     	; 0x2bea <xTaskGenericCreate+0x1ba>
    2be0:	0f de       	rcall	.-994    	; 0x2800 <vPortYield>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	1c c0       	rjmp	.+56     	; 0x2c1e <xTaskGenericCreate+0x1ee>
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	1a c0       	rjmp	.+52     	; 0x2c1e <xTaskGenericCreate+0x1ee>
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	18 c0       	rjmp	.+48     	; 0x2c1e <xTaskGenericCreate+0x1ee>
    2bee:	d8 8e       	std	Y+24, r13	; 0x18
    2bf0:	cf 8a       	std	Y+23, r12	; 0x17
    2bf2:	f1 e0       	ldi	r31, 0x01	; 1
    2bf4:	4f 1a       	sub	r4, r31
    2bf6:	51 08       	sbc	r5, r1
    2bf8:	cf 88       	ldd	r12, Y+23	; 0x17
    2bfa:	d8 8c       	ldd	r13, Y+24	; 0x18
    2bfc:	c4 0c       	add	r12, r4
    2bfe:	d5 1c       	adc	r13, r5
    2c00:	d5 01       	movw	r26, r10
    2c02:	8c 91       	ld	r24, X
    2c04:	89 8f       	std	Y+25, r24	; 0x19
    2c06:	8c 91       	ld	r24, X
    2c08:	88 23       	and	r24, r24
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <xTaskGenericCreate+0x1de>
    2c0c:	48 cf       	rjmp	.-368    	; 0x2a9e <xTaskGenericCreate+0x6e>
    2c0e:	ae 01       	movw	r20, r28
    2c10:	46 5e       	subi	r20, 0xE6	; 230
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	f5 01       	movw	r30, r10
    2c16:	31 96       	adiw	r30, 0x01	; 1
    2c18:	27 e0       	ldi	r18, 0x07	; 7
    2c1a:	36 cf       	rjmp	.-404    	; 0x2a88 <xTaskGenericCreate+0x58>
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	bf 90       	pop	r11
    2c30:	af 90       	pop	r10
    2c32:	9f 90       	pop	r9
    2c34:	8f 90       	pop	r8
    2c36:	7f 90       	pop	r7
    2c38:	6f 90       	pop	r6
    2c3a:	5f 90       	pop	r5
    2c3c:	4f 90       	pop	r4
    2c3e:	08 95       	ret

00002c40 <vTaskStartScheduler>:
    2c40:	af 92       	push	r10
    2c42:	bf 92       	push	r11
    2c44:	cf 92       	push	r12
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	a1 2c       	mov	r10, r1
    2c50:	b1 2c       	mov	r11, r1
    2c52:	c1 2c       	mov	r12, r1
    2c54:	d1 2c       	mov	r13, r1
    2c56:	e1 2c       	mov	r14, r1
    2c58:	f1 2c       	mov	r15, r1
    2c5a:	00 e0       	ldi	r16, 0x00	; 0
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	45 e5       	ldi	r20, 0x55	; 85
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	6b eb       	ldi	r22, 0xBB	; 187
    2c66:	72 e0       	ldi	r23, 0x02	; 2
    2c68:	8a ea       	ldi	r24, 0xAA	; 170
    2c6a:	97 e1       	ldi	r25, 0x17	; 23
    2c6c:	e1 de       	rcall	.-574    	; 0x2a30 <xTaskGenericCreate>
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	41 f4       	brne	.+16     	; 0x2c82 <vTaskStartScheduler+0x42>
    2c72:	f8 94       	cli
    2c74:	80 93 33 0e 	sts	0x0E33, r24
    2c78:	10 92 36 0e 	sts	0x0E36, r1
    2c7c:	10 92 35 0e 	sts	0x0E35, r1
    2c80:	81 dd       	rcall	.-1278   	; 0x2784 <xPortStartScheduler>
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	cf 90       	pop	r12
    2c8c:	bf 90       	pop	r11
    2c8e:	af 90       	pop	r10
    2c90:	08 95       	ret

00002c92 <vTaskSuspendAll>:
    2c92:	80 91 2e 0e 	lds	r24, 0x0E2E
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	80 93 2e 0e 	sts	0x0E2E, r24
    2c9c:	08 95       	ret

00002c9e <xTaskIncrementTick>:
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	80 91 2e 0e 	lds	r24, 0x0E2E
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	99 c0       	rjmp	.+306    	; 0x2de8 <xTaskIncrementTick+0x14a>
    2cb6:	80 91 35 0e 	lds	r24, 0x0E35
    2cba:	90 91 36 0e 	lds	r25, 0x0E36
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	90 93 36 0e 	sts	0x0E36, r25
    2cc4:	80 93 35 0e 	sts	0x0E35, r24
    2cc8:	e0 90 35 0e 	lds	r14, 0x0E35
    2ccc:	f0 90 36 0e 	lds	r15, 0x0E36
    2cd0:	e1 14       	cp	r14, r1
    2cd2:	f1 04       	cpc	r15, r1
    2cd4:	b1 f4       	brne	.+44     	; 0x2d02 <xTaskIncrementTick+0x64>
    2cd6:	80 91 4d 0e 	lds	r24, 0x0E4D
    2cda:	90 91 4e 0e 	lds	r25, 0x0E4E
    2cde:	20 91 4b 0e 	lds	r18, 0x0E4B
    2ce2:	30 91 4c 0e 	lds	r19, 0x0E4C
    2ce6:	30 93 4e 0e 	sts	0x0E4E, r19
    2cea:	20 93 4d 0e 	sts	0x0E4D, r18
    2cee:	90 93 4c 0e 	sts	0x0E4C, r25
    2cf2:	80 93 4b 0e 	sts	0x0E4B, r24
    2cf6:	80 91 30 0e 	lds	r24, 0x0E30
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	80 93 30 0e 	sts	0x0E30, r24
    2d00:	43 de       	rcall	.-890    	; 0x2988 <prvResetNextTaskUnblockTime>
    2d02:	80 91 5e 02 	lds	r24, 0x025E
    2d06:	90 91 5f 02 	lds	r25, 0x025F
    2d0a:	e8 16       	cp	r14, r24
    2d0c:	f9 06       	cpc	r15, r25
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <xTaskIncrementTick+0x74>
    2d10:	54 c0       	rjmp	.+168    	; 0x2dba <xTaskIncrementTick+0x11c>
    2d12:	d1 2c       	mov	r13, r1
    2d14:	cc 24       	eor	r12, r12
    2d16:	c3 94       	inc	r12
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <xTaskIncrementTick+0x7e>
    2d1a:	dc 2c       	mov	r13, r12
    2d1c:	e0 91 4d 0e 	lds	r30, 0x0E4D
    2d20:	f0 91 4e 0e 	lds	r31, 0x0E4E
    2d24:	80 81       	ld	r24, Z
    2d26:	81 11       	cpse	r24, r1
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <xTaskIncrementTick+0x9a>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	9f ef       	ldi	r25, 0xFF	; 255
    2d2e:	90 93 5f 02 	sts	0x025F, r25
    2d32:	80 93 5e 02 	sts	0x025E, r24
    2d36:	42 c0       	rjmp	.+132    	; 0x2dbc <xTaskIncrementTick+0x11e>
    2d38:	e0 91 4d 0e 	lds	r30, 0x0E4D
    2d3c:	f0 91 4e 0e 	lds	r31, 0x0E4E
    2d40:	05 80       	ldd	r0, Z+5	; 0x05
    2d42:	f6 81       	ldd	r31, Z+6	; 0x06
    2d44:	e0 2d       	mov	r30, r0
    2d46:	c6 81       	ldd	r28, Z+6	; 0x06
    2d48:	d7 81       	ldd	r29, Z+7	; 0x07
    2d4a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d4e:	e2 16       	cp	r14, r18
    2d50:	f3 06       	cpc	r15, r19
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <xTaskIncrementTick+0xc0>
    2d54:	30 93 5f 02 	sts	0x025F, r19
    2d58:	20 93 5e 02 	sts	0x025E, r18
    2d5c:	2f c0       	rjmp	.+94     	; 0x2dbc <xTaskIncrementTick+0x11e>
    2d5e:	8e 01       	movw	r16, r28
    2d60:	0e 5f       	subi	r16, 0xFE	; 254
    2d62:	1f 4f       	sbci	r17, 0xFF	; 255
    2d64:	c8 01       	movw	r24, r16
    2d66:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
    2d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d6c:	9d 89       	ldd	r25, Y+21	; 0x15
    2d6e:	89 2b       	or	r24, r25
    2d70:	21 f0       	breq	.+8      	; 0x2d7a <xTaskIncrementTick+0xdc>
    2d72:	ce 01       	movw	r24, r28
    2d74:	0c 96       	adiw	r24, 0x0c	; 12
    2d76:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
    2d7a:	2e 89       	ldd	r18, Y+22	; 0x16
    2d7c:	80 91 34 0e 	lds	r24, 0x0E34
    2d80:	82 17       	cp	r24, r18
    2d82:	10 f4       	brcc	.+4      	; 0x2d88 <xTaskIncrementTick+0xea>
    2d84:	20 93 34 0e 	sts	0x0E34, r18
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	88 0f       	add	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	82 0f       	add	r24, r18
    2d9a:	93 1f       	adc	r25, r19
    2d9c:	b8 01       	movw	r22, r16
    2d9e:	8f 59       	subi	r24, 0x9F	; 159
    2da0:	91 4f       	sbci	r25, 0xF1	; 241
    2da2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <vListInsertEnd>
    2da6:	e0 91 85 0e 	lds	r30, 0x0E85
    2daa:	f0 91 86 0e 	lds	r31, 0x0E86
    2dae:	9e 89       	ldd	r25, Y+22	; 0x16
    2db0:	86 89       	ldd	r24, Z+22	; 0x16
    2db2:	98 17       	cp	r25, r24
    2db4:	08 f0       	brcs	.+2      	; 0x2db8 <xTaskIncrementTick+0x11a>
    2db6:	b1 cf       	rjmp	.-158    	; 0x2d1a <xTaskIncrementTick+0x7c>
    2db8:	b1 cf       	rjmp	.-158    	; 0x2d1c <xTaskIncrementTick+0x7e>
    2dba:	d1 2c       	mov	r13, r1
    2dbc:	e0 91 85 0e 	lds	r30, 0x0E85
    2dc0:	f0 91 86 0e 	lds	r31, 0x0E86
    2dc4:	86 89       	ldd	r24, Z+22	; 0x16
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	ee 0f       	add	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	8e 0f       	add	r24, r30
    2dd8:	9f 1f       	adc	r25, r31
    2dda:	fc 01       	movw	r30, r24
    2ddc:	ef 59       	subi	r30, 0x9F	; 159
    2dde:	f1 4f       	sbci	r31, 0xF1	; 241
    2de0:	80 81       	ld	r24, Z
    2de2:	82 30       	cpi	r24, 0x02	; 2
    2de4:	40 f4       	brcc	.+16     	; 0x2df6 <xTaskIncrementTick+0x158>
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <xTaskIncrementTick+0x15c>
    2de8:	80 91 32 0e 	lds	r24, 0x0E32
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	80 93 32 0e 	sts	0x0E32, r24
    2df2:	d1 2c       	mov	r13, r1
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <xTaskIncrementTick+0x15c>
    2df6:	dd 24       	eor	r13, r13
    2df8:	d3 94       	inc	r13
    2dfa:	80 91 31 0e 	lds	r24, 0x0E31
    2dfe:	88 23       	and	r24, r24
    2e00:	11 f0       	breq	.+4      	; 0x2e06 <xTaskIncrementTick+0x168>
    2e02:	dd 24       	eor	r13, r13
    2e04:	d3 94       	inc	r13
    2e06:	8d 2d       	mov	r24, r13
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	ef 90       	pop	r14
    2e14:	df 90       	pop	r13
    2e16:	cf 90       	pop	r12
    2e18:	08 95       	ret

00002e1a <xTaskResumeAll>:
    2e1a:	df 92       	push	r13
    2e1c:	ef 92       	push	r14
    2e1e:	ff 92       	push	r15
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	0f 92       	push	r0
    2e2e:	80 91 2e 0e 	lds	r24, 0x0E2E
    2e32:	81 50       	subi	r24, 0x01	; 1
    2e34:	80 93 2e 0e 	sts	0x0E2E, r24
    2e38:	80 91 2e 0e 	lds	r24, 0x0E2E
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	5f c0       	rjmp	.+190    	; 0x2efe <xTaskResumeAll+0xe4>
    2e40:	80 91 37 0e 	lds	r24, 0x0E37
    2e44:	88 23       	and	r24, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <xTaskResumeAll+0x30>
    2e48:	5c c0       	rjmp	.+184    	; 0x2f02 <xTaskResumeAll+0xe8>
    2e4a:	0f 2e       	mov	r0, r31
    2e4c:	f2 e4       	ldi	r31, 0x42	; 66
    2e4e:	ef 2e       	mov	r14, r31
    2e50:	fe e0       	ldi	r31, 0x0E	; 14
    2e52:	ff 2e       	mov	r15, r31
    2e54:	f0 2d       	mov	r31, r0
    2e56:	dd 24       	eor	r13, r13
    2e58:	d3 94       	inc	r13
    2e5a:	30 c0       	rjmp	.+96     	; 0x2ebc <xTaskResumeAll+0xa2>
    2e5c:	e0 91 47 0e 	lds	r30, 0x0E47
    2e60:	f0 91 48 0e 	lds	r31, 0x0E48
    2e64:	c6 81       	ldd	r28, Z+6	; 0x06
    2e66:	d7 81       	ldd	r29, Z+7	; 0x07
    2e68:	ce 01       	movw	r24, r28
    2e6a:	0c 96       	adiw	r24, 0x0c	; 12
    2e6c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
    2e70:	8e 01       	movw	r16, r28
    2e72:	0e 5f       	subi	r16, 0xFE	; 254
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	c8 01       	movw	r24, r16
    2e78:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
    2e7c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e7e:	90 91 34 0e 	lds	r25, 0x0E34
    2e82:	98 17       	cp	r25, r24
    2e84:	10 f4       	brcc	.+4      	; 0x2e8a <xTaskResumeAll+0x70>
    2e86:	80 93 34 0e 	sts	0x0E34, r24
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9c 01       	movw	r18, r24
    2e8e:	22 0f       	add	r18, r18
    2e90:	33 1f       	adc	r19, r19
    2e92:	22 0f       	add	r18, r18
    2e94:	33 1f       	adc	r19, r19
    2e96:	22 0f       	add	r18, r18
    2e98:	33 1f       	adc	r19, r19
    2e9a:	82 0f       	add	r24, r18
    2e9c:	93 1f       	adc	r25, r19
    2e9e:	b8 01       	movw	r22, r16
    2ea0:	8f 59       	subi	r24, 0x9F	; 159
    2ea2:	91 4f       	sbci	r25, 0xF1	; 241
    2ea4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <vListInsertEnd>
    2ea8:	e0 91 85 0e 	lds	r30, 0x0E85
    2eac:	f0 91 86 0e 	lds	r31, 0x0E86
    2eb0:	9e 89       	ldd	r25, Y+22	; 0x16
    2eb2:	86 89       	ldd	r24, Z+22	; 0x16
    2eb4:	98 17       	cp	r25, r24
    2eb6:	10 f0       	brcs	.+4      	; 0x2ebc <xTaskResumeAll+0xa2>
    2eb8:	d0 92 31 0e 	sts	0x0E31, r13
    2ebc:	f7 01       	movw	r30, r14
    2ebe:	80 81       	ld	r24, Z
    2ec0:	81 11       	cpse	r24, r1
    2ec2:	cc cf       	rjmp	.-104    	; 0x2e5c <xTaskResumeAll+0x42>
    2ec4:	80 91 32 0e 	lds	r24, 0x0E32
    2ec8:	88 23       	and	r24, r24
    2eca:	91 f0       	breq	.+36     	; 0x2ef0 <xTaskResumeAll+0xd6>
    2ecc:	80 91 32 0e 	lds	r24, 0x0E32
    2ed0:	88 23       	and	r24, r24
    2ed2:	71 f0       	breq	.+28     	; 0x2ef0 <xTaskResumeAll+0xd6>
    2ed4:	c1 e0       	ldi	r28, 0x01	; 1
    2ed6:	e3 de       	rcall	.-570    	; 0x2c9e <xTaskIncrementTick>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	c0 93 31 0e 	sts	0x0E31, r28
    2ede:	80 91 32 0e 	lds	r24, 0x0E32
    2ee2:	81 50       	subi	r24, 0x01	; 1
    2ee4:	80 93 32 0e 	sts	0x0E32, r24
    2ee8:	80 91 32 0e 	lds	r24, 0x0E32
    2eec:	81 11       	cpse	r24, r1
    2eee:	f3 cf       	rjmp	.-26     	; 0x2ed6 <xTaskResumeAll+0xbc>
    2ef0:	80 91 31 0e 	lds	r24, 0x0E31
    2ef4:	81 30       	cpi	r24, 0x01	; 1
    2ef6:	39 f4       	brne	.+14     	; 0x2f06 <xTaskResumeAll+0xec>
    2ef8:	83 dc       	rcall	.-1786   	; 0x2800 <vPortYield>
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	05 c0       	rjmp	.+10     	; 0x2f08 <xTaskResumeAll+0xee>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <xTaskResumeAll+0xee>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <xTaskResumeAll+0xee>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	08 95       	ret

00002f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	99 f0       	breq	.+38     	; 0x2f4c <vTaskDelay+0x30>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2f26:	b5 de       	rcall	.-662    	; 0x2c92 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2f28:	80 91 35 0e 	lds	r24, 0x0E35
    2f2c:	90 91 36 0e 	lds	r25, 0x0E36
    2f30:	c8 0f       	add	r28, r24
    2f32:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2f34:	80 91 85 0e 	lds	r24, 0x0E85
    2f38:	90 91 86 0e 	lds	r25, 0x0E86
    2f3c:	02 96       	adiw	r24, 0x02	; 2
    2f3e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f42:	ce 01       	movw	r24, r28
    2f44:	40 dd       	rcall	.-1408   	; 0x29c6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2f46:	69 df       	rcall	.-302    	; 0x2e1a <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f48:	81 11       	cpse	r24, r1
    2f4a:	01 c0       	rjmp	.+2      	; 0x2f4e <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    2f4c:	59 dc       	rcall	.-1870   	; 0x2800 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	08 95       	ret

00002f54 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2f54:	0f 2e       	mov	r0, r31
    2f56:	f1 e6       	ldi	r31, 0x61	; 97
    2f58:	ef 2e       	mov	r14, r31
    2f5a:	fe e0       	ldi	r31, 0x0E	; 14
    2f5c:	ff 2e       	mov	r15, r31
    2f5e:	f0 2d       	mov	r31, r0
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2f60:	c9 e3       	ldi	r28, 0x39	; 57
    2f62:	de e0       	ldi	r29, 0x0E	; 14
    2f64:	26 c0       	rjmp	.+76     	; 0x2fb2 <prvIdleTask+0x5e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    2f66:	95 de       	rcall	.-726    	; 0x2c92 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2f68:	18 81       	ld	r17, Y
			}
			( void ) xTaskResumeAll();
    2f6a:	57 df       	rcall	.-338    	; 0x2e1a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2f6c:	11 23       	and	r17, r17
    2f6e:	09 f1       	breq	.+66     	; 0x2fb2 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2f76:	e0 91 3e 0e 	lds	r30, 0x0E3E
    2f7a:	f0 91 3f 0e 	lds	r31, 0x0E3F
    2f7e:	06 81       	ldd	r16, Z+6	; 0x06
    2f80:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2f82:	c8 01       	movw	r24, r16
    2f84:	02 96       	adiw	r24, 0x02	; 2
    2f86:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <uxListRemove>
					--uxCurrentNumberOfTasks;
    2f8a:	80 91 37 0e 	lds	r24, 0x0E37
    2f8e:	81 50       	subi	r24, 0x01	; 1
    2f90:	80 93 37 0e 	sts	0x0E37, r24
					--uxTasksDeleted;
    2f94:	80 91 38 0e 	lds	r24, 0x0E38
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	80 93 38 0e 	sts	0x0E38, r24
				}
				taskEXIT_CRITICAL();
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	87 89       	ldd	r24, Z+23	; 0x17
    2fa6:	90 8d       	ldd	r25, Z+24	; 0x18
    2fa8:	0e 94 6f 0b 	call	0x16de	; 0x16de <vPortFree>
		vPortFree( pxTCB );
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 6f 0b 	call	0x16de	; 0x16de <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2fb2:	80 91 38 0e 	lds	r24, 0x0E38
    2fb6:	81 11       	cpse	r24, r1
    2fb8:	d6 cf       	rjmp	.-84     	; 0x2f66 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2fba:	f7 01       	movw	r30, r14
    2fbc:	80 81       	ld	r24, Z
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	c0 f3       	brcs	.-16     	; 0x2fb2 <prvIdleTask+0x5e>
			{
				taskYIELD();
    2fc2:	1e dc       	rcall	.-1988   	; 0x2800 <vPortYield>
    2fc4:	f6 cf       	rjmp	.-20     	; 0x2fb2 <prvIdleTask+0x5e>

00002fc6 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2fc6:	80 91 2e 0e 	lds	r24, 0x0E2E
    2fca:	88 23       	and	r24, r24
    2fcc:	21 f0       	breq	.+8      	; 0x2fd6 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 31 0e 	sts	0x0E31, r24
    2fd4:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    2fd6:	10 92 31 0e 	sts	0x0E31, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2fda:	80 91 34 0e 	lds	r24, 0x0E34
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	ee 0f       	add	r30, r30
    2fe8:	ff 1f       	adc	r31, r31
    2fea:	ee 0f       	add	r30, r30
    2fec:	ff 1f       	adc	r31, r31
    2fee:	8e 0f       	add	r24, r30
    2ff0:	9f 1f       	adc	r25, r31
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	ef 59       	subi	r30, 0x9F	; 159
    2ff6:	f1 4f       	sbci	r31, 0xF1	; 241
    2ff8:	80 81       	ld	r24, Z
    2ffa:	81 11       	cpse	r24, r1
    2ffc:	17 c0       	rjmp	.+46     	; 0x302c <vTaskSwitchContext+0x66>
    2ffe:	80 91 34 0e 	lds	r24, 0x0E34
    3002:	81 50       	subi	r24, 0x01	; 1
    3004:	80 93 34 0e 	sts	0x0E34, r24
    3008:	80 91 34 0e 	lds	r24, 0x0E34
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	fc 01       	movw	r30, r24
    3010:	ee 0f       	add	r30, r30
    3012:	ff 1f       	adc	r31, r31
    3014:	ee 0f       	add	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	8e 0f       	add	r24, r30
    301e:	9f 1f       	adc	r25, r31
    3020:	fc 01       	movw	r30, r24
    3022:	ef 59       	subi	r30, 0x9F	; 159
    3024:	f1 4f       	sbci	r31, 0xF1	; 241
    3026:	80 81       	ld	r24, Z
    3028:	88 23       	and	r24, r24
    302a:	49 f3       	breq	.-46     	; 0x2ffe <vTaskSwitchContext+0x38>
    302c:	e0 91 34 0e 	lds	r30, 0x0E34
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	cf 01       	movw	r24, r30
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	e8 0f       	add	r30, r24
    3042:	f9 1f       	adc	r31, r25
    3044:	ef 59       	subi	r30, 0x9F	; 159
    3046:	f1 4f       	sbci	r31, 0xF1	; 241
    3048:	a1 81       	ldd	r26, Z+1	; 0x01
    304a:	b2 81       	ldd	r27, Z+2	; 0x02
    304c:	12 96       	adiw	r26, 0x02	; 2
    304e:	0d 90       	ld	r0, X+
    3050:	bc 91       	ld	r27, X
    3052:	a0 2d       	mov	r26, r0
    3054:	b2 83       	std	Z+2, r27	; 0x02
    3056:	a1 83       	std	Z+1, r26	; 0x01
    3058:	cf 01       	movw	r24, r30
    305a:	03 96       	adiw	r24, 0x03	; 3
    305c:	a8 17       	cp	r26, r24
    305e:	b9 07       	cpc	r27, r25
    3060:	31 f4       	brne	.+12     	; 0x306e <vTaskSwitchContext+0xa8>
    3062:	12 96       	adiw	r26, 0x02	; 2
    3064:	8d 91       	ld	r24, X+
    3066:	9c 91       	ld	r25, X
    3068:	13 97       	sbiw	r26, 0x03	; 3
    306a:	92 83       	std	Z+2, r25	; 0x02
    306c:	81 83       	std	Z+1, r24	; 0x01
    306e:	01 80       	ldd	r0, Z+1	; 0x01
    3070:	f2 81       	ldd	r31, Z+2	; 0x02
    3072:	e0 2d       	mov	r30, r0
    3074:	86 81       	ldd	r24, Z+6	; 0x06
    3076:	97 81       	ldd	r25, Z+7	; 0x07
    3078:	90 93 86 0e 	sts	0x0E86, r25
    307c:	80 93 85 0e 	sts	0x0E85, r24
    3080:	08 95       	ret

00003082 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3082:	10 92 f4 0e 	sts	0x0EF4, r1
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	80 93 f2 0e 	sts	0x0EF2, r24
    308c:	10 92 f1 0e 	sts	0x0EF1, r1
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	84 e1       	ldi	r24, 0x14	; 20
    3094:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <digitalWrite>
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	85 e1       	ldi	r24, 0x15	; 21
    309c:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <digitalWrite>
    30a0:	e9 eb       	ldi	r30, 0xB9	; 185
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	8e 7f       	andi	r24, 0xFE	; 254
    30a8:	80 83       	st	Z, r24
    30aa:	80 81       	ld	r24, Z
    30ac:	8d 7f       	andi	r24, 0xFD	; 253
    30ae:	80 83       	st	Z, r24
    30b0:	88 e4       	ldi	r24, 0x48	; 72
    30b2:	80 93 b8 00 	sts	0x00B8, r24
    30b6:	85 e4       	ldi	r24, 0x45	; 69
    30b8:	80 93 bc 00 	sts	0x00BC, r24
    30bc:	08 95       	ret

000030be <twi_readFrom>:
    30be:	41 32       	cpi	r20, 0x21	; 33
    30c0:	08 f0       	brcs	.+2      	; 0x30c4 <twi_readFrom+0x6>
    30c2:	45 c0       	rjmp	.+138    	; 0x314e <twi_readFrom+0x90>
    30c4:	90 91 f4 0e 	lds	r25, 0x0EF4
    30c8:	91 11       	cpse	r25, r1
    30ca:	fc cf       	rjmp	.-8      	; 0x30c4 <twi_readFrom+0x6>
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	90 93 f4 0e 	sts	0x0EF4, r25
    30d2:	20 93 f2 0e 	sts	0x0EF2, r18
    30d6:	2f ef       	ldi	r18, 0xFF	; 255
    30d8:	20 93 87 0e 	sts	0x0E87, r18
    30dc:	10 92 cc 0e 	sts	0x0ECC, r1
    30e0:	24 0f       	add	r18, r20
    30e2:	20 93 cb 0e 	sts	0x0ECB, r18
    30e6:	90 93 f3 0e 	sts	0x0EF3, r25
    30ea:	90 91 f3 0e 	lds	r25, 0x0EF3
    30ee:	88 0f       	add	r24, r24
    30f0:	89 2b       	or	r24, r25
    30f2:	80 93 f3 0e 	sts	0x0EF3, r24
    30f6:	80 91 f1 0e 	lds	r24, 0x0EF1
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	51 f4       	brne	.+20     	; 0x3112 <twi_readFrom+0x54>
    30fe:	10 92 f1 0e 	sts	0x0EF1, r1
    3102:	80 91 f3 0e 	lds	r24, 0x0EF3
    3106:	80 93 bb 00 	sts	0x00BB, r24
    310a:	85 ec       	ldi	r24, 0xC5	; 197
    310c:	80 93 bc 00 	sts	0x00BC, r24
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <twi_readFrom+0x5a>
    3112:	85 ee       	ldi	r24, 0xE5	; 229
    3114:	80 93 bc 00 	sts	0x00BC, r24
    3118:	80 91 f4 0e 	lds	r24, 0x0EF4
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	e1 f3       	breq	.-8      	; 0x3118 <twi_readFrom+0x5a>
    3120:	80 91 cc 0e 	lds	r24, 0x0ECC
    3124:	84 17       	cp	r24, r20
    3126:	10 f4       	brcc	.+4      	; 0x312c <twi_readFrom+0x6e>
    3128:	40 91 cc 0e 	lds	r20, 0x0ECC
    312c:	44 23       	and	r20, r20
    312e:	89 f0       	breq	.+34     	; 0x3152 <twi_readFrom+0x94>
    3130:	ed ec       	ldi	r30, 0xCD	; 205
    3132:	fe e0       	ldi	r31, 0x0E	; 14
    3134:	a6 2f       	mov	r26, r22
    3136:	b7 2f       	mov	r27, r23
    3138:	2f ef       	ldi	r18, 0xFF	; 255
    313a:	24 0f       	add	r18, r20
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	22 53       	subi	r18, 0x32	; 50
    3140:	31 4f       	sbci	r19, 0xF1	; 241
    3142:	91 91       	ld	r25, Z+
    3144:	9d 93       	st	X+, r25
    3146:	e2 17       	cp	r30, r18
    3148:	f3 07       	cpc	r31, r19
    314a:	d9 f7       	brne	.-10     	; 0x3142 <twi_readFrom+0x84>
    314c:	04 c0       	rjmp	.+8      	; 0x3156 <twi_readFrom+0x98>
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	08 95       	ret
    3152:	84 2f       	mov	r24, r20
    3154:	08 95       	ret
    3156:	84 2f       	mov	r24, r20
    3158:	08 95       	ret

0000315a <twi_writeTo>:
    315a:	0f 93       	push	r16
    315c:	41 32       	cpi	r20, 0x21	; 33
    315e:	08 f0       	brcs	.+2      	; 0x3162 <twi_writeTo+0x8>
    3160:	50 c0       	rjmp	.+160    	; 0x3202 <twi_writeTo+0xa8>
    3162:	90 91 f4 0e 	lds	r25, 0x0EF4
    3166:	91 11       	cpse	r25, r1
    3168:	fc cf       	rjmp	.-8      	; 0x3162 <twi_writeTo+0x8>
    316a:	92 e0       	ldi	r25, 0x02	; 2
    316c:	90 93 f4 0e 	sts	0x0EF4, r25
    3170:	00 93 f2 0e 	sts	0x0EF2, r16
    3174:	9f ef       	ldi	r25, 0xFF	; 255
    3176:	90 93 87 0e 	sts	0x0E87, r25
    317a:	10 92 cc 0e 	sts	0x0ECC, r1
    317e:	40 93 cb 0e 	sts	0x0ECB, r20
    3182:	44 23       	and	r20, r20
    3184:	69 f0       	breq	.+26     	; 0x31a0 <twi_writeTo+0x46>
    3186:	fb 01       	movw	r30, r22
    3188:	ad ec       	ldi	r26, 0xCD	; 205
    318a:	be e0       	ldi	r27, 0x0E	; 14
    318c:	6f 5f       	subi	r22, 0xFF	; 255
    318e:	7f 4f       	sbci	r23, 0xFF	; 255
    3190:	41 50       	subi	r20, 0x01	; 1
    3192:	64 0f       	add	r22, r20
    3194:	71 1d       	adc	r23, r1
    3196:	91 91       	ld	r25, Z+
    3198:	9d 93       	st	X+, r25
    319a:	e6 17       	cp	r30, r22
    319c:	f7 07       	cpc	r31, r23
    319e:	d9 f7       	brne	.-10     	; 0x3196 <twi_writeTo+0x3c>
    31a0:	10 92 f3 0e 	sts	0x0EF3, r1
    31a4:	90 91 f3 0e 	lds	r25, 0x0EF3
    31a8:	88 0f       	add	r24, r24
    31aa:	89 2b       	or	r24, r25
    31ac:	80 93 f3 0e 	sts	0x0EF3, r24
    31b0:	80 91 f1 0e 	lds	r24, 0x0EF1
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	51 f4       	brne	.+20     	; 0x31cc <twi_writeTo+0x72>
    31b8:	10 92 f1 0e 	sts	0x0EF1, r1
    31bc:	80 91 f3 0e 	lds	r24, 0x0EF3
    31c0:	80 93 bb 00 	sts	0x00BB, r24
    31c4:	85 ec       	ldi	r24, 0xC5	; 197
    31c6:	80 93 bc 00 	sts	0x00BC, r24
    31ca:	03 c0       	rjmp	.+6      	; 0x31d2 <twi_writeTo+0x78>
    31cc:	85 ee       	ldi	r24, 0xE5	; 229
    31ce:	80 93 bc 00 	sts	0x00BC, r24
    31d2:	22 23       	and	r18, r18
    31d4:	41 f0       	breq	.+16     	; 0x31e6 <twi_writeTo+0x8c>
    31d6:	80 91 f4 0e 	lds	r24, 0x0EF4
    31da:	82 30       	cpi	r24, 0x02	; 2
    31dc:	21 f4       	brne	.+8      	; 0x31e6 <twi_writeTo+0x8c>
    31de:	80 91 f4 0e 	lds	r24, 0x0EF4
    31e2:	82 30       	cpi	r24, 0x02	; 2
    31e4:	e1 f3       	breq	.-8      	; 0x31de <twi_writeTo+0x84>
    31e6:	80 91 87 0e 	lds	r24, 0x0E87
    31ea:	8f 3f       	cpi	r24, 0xFF	; 255
    31ec:	61 f0       	breq	.+24     	; 0x3206 <twi_writeTo+0xac>
    31ee:	80 91 87 0e 	lds	r24, 0x0E87
    31f2:	80 32       	cpi	r24, 0x20	; 32
    31f4:	51 f0       	breq	.+20     	; 0x320a <twi_writeTo+0xb0>
    31f6:	80 91 87 0e 	lds	r24, 0x0E87
    31fa:	80 33       	cpi	r24, 0x30	; 48
    31fc:	41 f4       	brne	.+16     	; 0x320e <twi_writeTo+0xb4>
    31fe:	83 e0       	ldi	r24, 0x03	; 3
    3200:	07 c0       	rjmp	.+14     	; 0x3210 <twi_writeTo+0xb6>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <twi_writeTo+0xb6>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <twi_writeTo+0xb6>
    320a:	82 e0       	ldi	r24, 0x02	; 2
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <twi_writeTo+0xb6>
    320e:	84 e0       	ldi	r24, 0x04	; 4
    3210:	0f 91       	pop	r16
    3212:	08 95       	ret

00003214 <twi_transmit>:
    3214:	61 32       	cpi	r22, 0x21	; 33
    3216:	a8 f4       	brcc	.+42     	; 0x3242 <twi_transmit+0x2e>
    3218:	20 91 f4 0e 	lds	r18, 0x0EF4
    321c:	24 30       	cpi	r18, 0x04	; 4
    321e:	99 f4       	brne	.+38     	; 0x3246 <twi_transmit+0x32>
    3220:	60 93 a9 0e 	sts	0x0EA9, r22
    3224:	66 23       	and	r22, r22
    3226:	89 f0       	breq	.+34     	; 0x324a <twi_transmit+0x36>
    3228:	fc 01       	movw	r30, r24
    322a:	ab ea       	ldi	r26, 0xAB	; 171
    322c:	be e0       	ldi	r27, 0x0E	; 14
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	61 50       	subi	r22, 0x01	; 1
    3232:	86 0f       	add	r24, r22
    3234:	91 1d       	adc	r25, r1
    3236:	21 91       	ld	r18, Z+
    3238:	2d 93       	st	X+, r18
    323a:	e8 17       	cp	r30, r24
    323c:	f9 07       	cpc	r31, r25
    323e:	d9 f7       	brne	.-10     	; 0x3236 <twi_transmit+0x22>
    3240:	06 c0       	rjmp	.+12     	; 0x324e <twi_transmit+0x3a>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	08 95       	ret
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	08 95       	ret
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	08 95       	ret
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	08 95       	ret

00003252 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3252:	85 ed       	ldi	r24, 0xD5	; 213
    3254:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3258:	ec eb       	ldi	r30, 0xBC	; 188
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	84 fd       	sbrc	r24, 4
    3260:	fd cf       	rjmp	.-6      	; 0x325c <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3262:	10 92 f4 0e 	sts	0x0EF4, r1
    3266:	08 95       	ret

00003268 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3268:	85 ec       	ldi	r24, 0xC5	; 197
    326a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    326e:	10 92 f4 0e 	sts	0x0EF4, r1
    3272:	08 95       	ret

00003274 <__vector_39>:
}

ISR(TWI_vect)
{
    3274:	1f 92       	push	r1
    3276:	0f 92       	push	r0
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	0f 92       	push	r0
    327c:	11 24       	eor	r1, r1
    327e:	0b b6       	in	r0, 0x3b	; 59
    3280:	0f 92       	push	r0
    3282:	2f 93       	push	r18
    3284:	3f 93       	push	r19
    3286:	4f 93       	push	r20
    3288:	5f 93       	push	r21
    328a:	6f 93       	push	r22
    328c:	7f 93       	push	r23
    328e:	8f 93       	push	r24
    3290:	9f 93       	push	r25
    3292:	af 93       	push	r26
    3294:	bf 93       	push	r27
    3296:	ef 93       	push	r30
    3298:	ff 93       	push	r31
  switch(TW_STATUS){
    329a:	80 91 b9 00 	lds	r24, 0x00B9
    329e:	88 7f       	andi	r24, 0xF8	; 248
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	89 3c       	cpi	r24, 0xC9	; 201
    32a4:	91 05       	cpc	r25, r1
    32a6:	08 f0       	brcs	.+2      	; 0x32aa <__vector_39+0x36>
    32a8:	ee c0       	rjmp	.+476    	; 0x3486 <__vector_39+0x212>
    32aa:	fc 01       	movw	r30, r24
    32ac:	ee 58       	subi	r30, 0x8E	; 142
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	0c 94 1e 26 	jmp	0x4c3c	; 0x4c3c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    32b4:	80 91 f3 0e 	lds	r24, 0x0EF3
    32b8:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    32bc:	85 ec       	ldi	r24, 0xC5	; 197
    32be:	80 93 bc 00 	sts	0x00BC, r24
    32c2:	e1 c0       	rjmp	.+450    	; 0x3486 <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    32c4:	90 91 cc 0e 	lds	r25, 0x0ECC
    32c8:	80 91 cb 0e 	lds	r24, 0x0ECB
    32cc:	98 17       	cp	r25, r24
    32ce:	80 f4       	brcc	.+32     	; 0x32f0 <__vector_39+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    32d0:	e0 91 cc 0e 	lds	r30, 0x0ECC
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	8e 0f       	add	r24, r30
    32d8:	80 93 cc 0e 	sts	0x0ECC, r24
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	e3 53       	subi	r30, 0x33	; 51
    32e0:	f1 4f       	sbci	r31, 0xF1	; 241
    32e2:	80 81       	ld	r24, Z
    32e4:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    32e8:	85 ec       	ldi	r24, 0xC5	; 197
    32ea:	80 93 bc 00 	sts	0x00BC, r24
    32ee:	cb c0       	rjmp	.+406    	; 0x3486 <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    32f0:	80 91 f2 0e 	lds	r24, 0x0EF2
    32f4:	88 23       	and	r24, r24
    32f6:	11 f0       	breq	.+4      	; 0x32fc <__vector_39+0x88>
          twi_stop();
    32f8:	ac df       	rcall	.-168    	; 0x3252 <twi_stop>
    32fa:	c5 c0       	rjmp	.+394    	; 0x3486 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	80 93 f1 0e 	sts	0x0EF1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3302:	84 ea       	ldi	r24, 0xA4	; 164
    3304:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3308:	10 92 f4 0e 	sts	0x0EF4, r1
    330c:	bc c0       	rjmp	.+376    	; 0x3486 <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    330e:	80 e2       	ldi	r24, 0x20	; 32
    3310:	80 93 87 0e 	sts	0x0E87, r24
      twi_stop();
    3314:	9e df       	rcall	.-196    	; 0x3252 <twi_stop>
      break;
    3316:	b7 c0       	rjmp	.+366    	; 0x3486 <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3318:	80 e3       	ldi	r24, 0x30	; 48
    331a:	80 93 87 0e 	sts	0x0E87, r24
      twi_stop();
    331e:	99 df       	rcall	.-206    	; 0x3252 <twi_stop>
      break;
    3320:	b2 c0       	rjmp	.+356    	; 0x3486 <__vector_39+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3322:	88 e3       	ldi	r24, 0x38	; 56
    3324:	80 93 87 0e 	sts	0x0E87, r24
      twi_releaseBus();
    3328:	9f df       	rcall	.-194    	; 0x3268 <twi_releaseBus>
      break;
    332a:	ad c0       	rjmp	.+346    	; 0x3486 <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    332c:	e0 91 cc 0e 	lds	r30, 0x0ECC
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	8e 0f       	add	r24, r30
    3334:	80 93 cc 0e 	sts	0x0ECC, r24
    3338:	80 91 bb 00 	lds	r24, 0x00BB
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	e3 53       	subi	r30, 0x33	; 51
    3340:	f1 4f       	sbci	r31, 0xF1	; 241
    3342:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3344:	90 91 cc 0e 	lds	r25, 0x0ECC
    3348:	80 91 cb 0e 	lds	r24, 0x0ECB
    334c:	98 17       	cp	r25, r24
    334e:	20 f4       	brcc	.+8      	; 0x3358 <__vector_39+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3350:	85 ec       	ldi	r24, 0xC5	; 197
    3352:	80 93 bc 00 	sts	0x00BC, r24
    3356:	97 c0       	rjmp	.+302    	; 0x3486 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3358:	85 e8       	ldi	r24, 0x85	; 133
    335a:	80 93 bc 00 	sts	0x00BC, r24
    335e:	93 c0       	rjmp	.+294    	; 0x3486 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3360:	e0 91 cc 0e 	lds	r30, 0x0ECC
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	8e 0f       	add	r24, r30
    3368:	80 93 cc 0e 	sts	0x0ECC, r24
    336c:	80 91 bb 00 	lds	r24, 0x00BB
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	e3 53       	subi	r30, 0x33	; 51
    3374:	f1 4f       	sbci	r31, 0xF1	; 241
    3376:	80 83       	st	Z, r24
	if (twi_sendStop)
    3378:	80 91 f2 0e 	lds	r24, 0x0EF2
    337c:	88 23       	and	r24, r24
    337e:	11 f0       	breq	.+4      	; 0x3384 <__vector_39+0x110>
          twi_stop();
    3380:	68 df       	rcall	.-304    	; 0x3252 <twi_stop>
    3382:	81 c0       	rjmp	.+258    	; 0x3486 <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	80 93 f1 0e 	sts	0x0EF1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    338a:	84 ea       	ldi	r24, 0xA4	; 164
    338c:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3390:	10 92 f4 0e 	sts	0x0EF4, r1
    3394:	78 c0       	rjmp	.+240    	; 0x3486 <__vector_39+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3396:	5d df       	rcall	.-326    	; 0x3252 <twi_stop>
      break;
    3398:	76 c0       	rjmp	.+236    	; 0x3486 <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	80 93 f4 0e 	sts	0x0EF4, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    33a0:	10 92 88 0e 	sts	0x0E88, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33a4:	85 ec       	ldi	r24, 0xC5	; 197
    33a6:	80 93 bc 00 	sts	0x00BC, r24
    33aa:	6d c0       	rjmp	.+218    	; 0x3486 <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33ac:	80 91 88 0e 	lds	r24, 0x0E88
    33b0:	80 32       	cpi	r24, 0x20	; 32
    33b2:	80 f4       	brcc	.+32     	; 0x33d4 <__vector_39+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    33b4:	e0 91 88 0e 	lds	r30, 0x0E88
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	8e 0f       	add	r24, r30
    33bc:	80 93 88 0e 	sts	0x0E88, r24
    33c0:	80 91 bb 00 	lds	r24, 0x00BB
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	e7 57       	subi	r30, 0x77	; 119
    33c8:	f1 4f       	sbci	r31, 0xF1	; 241
    33ca:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33cc:	85 ec       	ldi	r24, 0xC5	; 197
    33ce:	80 93 bc 00 	sts	0x00BC, r24
    33d2:	59 c0       	rjmp	.+178    	; 0x3486 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    33d4:	85 e8       	ldi	r24, 0x85	; 133
    33d6:	80 93 bc 00 	sts	0x00BC, r24
    33da:	55 c0       	rjmp	.+170    	; 0x3486 <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33dc:	80 91 88 0e 	lds	r24, 0x0E88
    33e0:	80 32       	cpi	r24, 0x20	; 32
    33e2:	30 f4       	brcc	.+12     	; 0x33f0 <__vector_39+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    33e4:	e0 91 88 0e 	lds	r30, 0x0E88
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	e7 57       	subi	r30, 0x77	; 119
    33ec:	f1 4f       	sbci	r31, 0xF1	; 241
    33ee:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    33f0:	30 df       	rcall	.-416    	; 0x3252 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    33f2:	60 91 88 0e 	lds	r22, 0x0E88
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	e0 91 ed 0e 	lds	r30, 0x0EED
    33fc:	f0 91 ee 0e 	lds	r31, 0x0EEE
    3400:	89 e8       	ldi	r24, 0x89	; 137
    3402:	9e e0       	ldi	r25, 0x0E	; 14
    3404:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3406:	10 92 88 0e 	sts	0x0E88, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    340a:	2e df       	rcall	.-420    	; 0x3268 <twi_releaseBus>
      break;
    340c:	3c c0       	rjmp	.+120    	; 0x3486 <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    340e:	85 e8       	ldi	r24, 0x85	; 133
    3410:	80 93 bc 00 	sts	0x00BC, r24
    3414:	38 c0       	rjmp	.+112    	; 0x3486 <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3416:	84 e0       	ldi	r24, 0x04	; 4
    3418:	80 93 f4 0e 	sts	0x0EF4, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    341c:	10 92 aa 0e 	sts	0x0EAA, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3420:	10 92 a9 0e 	sts	0x0EA9, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3424:	e0 91 ef 0e 	lds	r30, 0x0EEF
    3428:	f0 91 f0 0e 	lds	r31, 0x0EF0
    342c:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    342e:	80 91 a9 0e 	lds	r24, 0x0EA9
    3432:	81 11       	cpse	r24, r1
    3434:	05 c0       	rjmp	.+10     	; 0x3440 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 93 a9 0e 	sts	0x0EA9, r24
        twi_txBuffer[0] = 0x00;
    343c:	10 92 ab 0e 	sts	0x0EAB, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3440:	e0 91 aa 0e 	lds	r30, 0x0EAA
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	8e 0f       	add	r24, r30
    3448:	80 93 aa 0e 	sts	0x0EAA, r24
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	e5 55       	subi	r30, 0x55	; 85
    3450:	f1 4f       	sbci	r31, 0xF1	; 241
    3452:	80 81       	ld	r24, Z
    3454:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3458:	90 91 aa 0e 	lds	r25, 0x0EAA
    345c:	80 91 a9 0e 	lds	r24, 0x0EA9
    3460:	98 17       	cp	r25, r24
    3462:	20 f4       	brcc	.+8      	; 0x346c <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3464:	85 ec       	ldi	r24, 0xC5	; 197
    3466:	80 93 bc 00 	sts	0x00BC, r24
    346a:	0d c0       	rjmp	.+26     	; 0x3486 <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    346c:	85 e8       	ldi	r24, 0x85	; 133
    346e:	80 93 bc 00 	sts	0x00BC, r24
    3472:	09 c0       	rjmp	.+18     	; 0x3486 <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3474:	85 ec       	ldi	r24, 0xC5	; 197
    3476:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    347a:	10 92 f4 0e 	sts	0x0EF4, r1
      break;
    347e:	03 c0       	rjmp	.+6      	; 0x3486 <__vector_39+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3480:	10 92 87 0e 	sts	0x0E87, r1
      twi_stop();
    3484:	e6 de       	rcall	.-564    	; 0x3252 <twi_stop>
      break;
  }
}
    3486:	ff 91       	pop	r31
    3488:	ef 91       	pop	r30
    348a:	bf 91       	pop	r27
    348c:	af 91       	pop	r26
    348e:	9f 91       	pop	r25
    3490:	8f 91       	pop	r24
    3492:	7f 91       	pop	r23
    3494:	6f 91       	pop	r22
    3496:	5f 91       	pop	r21
    3498:	4f 91       	pop	r20
    349a:	3f 91       	pop	r19
    349c:	2f 91       	pop	r18
    349e:	0f 90       	pop	r0
    34a0:	0b be       	out	0x3b, r0	; 59
    34a2:	0f 90       	pop	r0
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	0f 90       	pop	r0
    34a8:	1f 90       	pop	r1
    34aa:	18 95       	reti

000034ac <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    34ac:	80 91 25 0f 	lds	r24, 0x0F25
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	20 91 26 0f 	lds	r18, 0x0F26
    34b6:	82 1b       	sub	r24, r18
    34b8:	91 09       	sbc	r25, r1
    34ba:	08 95       	ret

000034bc <_ZN7TwoWire4readEv>:
    34bc:	20 91 26 0f 	lds	r18, 0x0F26
    34c0:	80 91 25 0f 	lds	r24, 0x0F25
    34c4:	28 17       	cp	r18, r24
    34c6:	50 f4       	brcc	.+20     	; 0x34dc <_ZN7TwoWire4readEv+0x20>
    34c8:	e2 2f       	mov	r30, r18
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	e9 5d       	subi	r30, 0xD9	; 217
    34ce:	f0 4f       	sbci	r31, 0xF0	; 240
    34d0:	80 81       	ld	r24, Z
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	2f 5f       	subi	r18, 0xFF	; 255
    34d6:	20 93 26 0f 	sts	0x0F26, r18
    34da:	08 95       	ret
    34dc:	8f ef       	ldi	r24, 0xFF	; 255
    34de:	9f ef       	ldi	r25, 0xFF	; 255
    34e0:	08 95       	ret

000034e2 <_ZN7TwoWire4peekEv>:
    34e2:	e0 91 26 0f 	lds	r30, 0x0F26
    34e6:	80 91 25 0f 	lds	r24, 0x0F25
    34ea:	e8 17       	cp	r30, r24
    34ec:	30 f4       	brcc	.+12     	; 0x34fa <_ZN7TwoWire4peekEv+0x18>
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	e9 5d       	subi	r30, 0xD9	; 217
    34f2:	f0 4f       	sbci	r31, 0xF0	; 240
    34f4:	80 81       	ld	r24, Z
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	08 95       	ret
    34fa:	8f ef       	ldi	r24, 0xFF	; 255
    34fc:	9f ef       	ldi	r25, 0xFF	; 255
    34fe:	08 95       	ret

00003500 <_ZN7TwoWire5flushEv>:
    3500:	08 95       	ret

00003502 <_ZN7TwoWire5writeEPKhj>:
    3502:	cf 92       	push	r12
    3504:	df 92       	push	r13
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	8c 01       	movw	r16, r24
    3514:	7b 01       	movw	r14, r22
    3516:	6a 01       	movw	r12, r20
    3518:	80 91 01 0f 	lds	r24, 0x0F01
    351c:	88 23       	and	r24, r24
    351e:	99 f0       	breq	.+38     	; 0x3546 <_ZN7TwoWire5writeEPKhj+0x44>
    3520:	41 15       	cp	r20, r1
    3522:	51 05       	cpc	r21, r1
    3524:	99 f0       	breq	.+38     	; 0x354c <_ZN7TwoWire5writeEPKhj+0x4a>
    3526:	eb 01       	movw	r28, r22
    3528:	e4 0e       	add	r14, r20
    352a:	f5 1e       	adc	r15, r21
    352c:	69 91       	ld	r22, Y+
    352e:	d8 01       	movw	r26, r16
    3530:	ed 91       	ld	r30, X+
    3532:	fc 91       	ld	r31, X
    3534:	01 90       	ld	r0, Z+
    3536:	f0 81       	ld	r31, Z
    3538:	e0 2d       	mov	r30, r0
    353a:	c8 01       	movw	r24, r16
    353c:	19 95       	eicall
    353e:	ce 15       	cp	r28, r14
    3540:	df 05       	cpc	r29, r15
    3542:	a1 f7       	brne	.-24     	; 0x352c <_ZN7TwoWire5writeEPKhj+0x2a>
    3544:	03 c0       	rjmp	.+6      	; 0x354c <_ZN7TwoWire5writeEPKhj+0x4a>
    3546:	64 2f       	mov	r22, r20
    3548:	c7 01       	movw	r24, r14
    354a:	64 de       	rcall	.-824    	; 0x3214 <twi_transmit>
    354c:	c6 01       	movw	r24, r12
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	08 95       	ret

00003560 <_ZN7TwoWire5writeEh>:
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	1f 92       	push	r1
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	69 83       	std	Y+1, r22	; 0x01
    356c:	20 91 01 0f 	lds	r18, 0x0F01
    3570:	22 23       	and	r18, r18
    3572:	e1 f0       	breq	.+56     	; 0x35ac <_ZN7TwoWire5writeEh+0x4c>
    3574:	20 91 02 0f 	lds	r18, 0x0F02
    3578:	20 32       	cpi	r18, 0x20	; 32
    357a:	40 f0       	brcs	.+16     	; 0x358c <_ZN7TwoWire5writeEh+0x2c>
    357c:	21 e0       	ldi	r18, 0x01	; 1
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	fc 01       	movw	r30, r24
    3582:	33 83       	std	Z+3, r19	; 0x03
    3584:	22 83       	std	Z+2, r18	; 0x02
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	16 c0       	rjmp	.+44     	; 0x35b8 <_ZN7TwoWire5writeEh+0x58>
    358c:	80 91 03 0f 	lds	r24, 0x0F03
    3590:	e8 2f       	mov	r30, r24
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	ec 5f       	subi	r30, 0xFC	; 252
    3596:	f0 4f       	sbci	r31, 0xF0	; 240
    3598:	99 81       	ldd	r25, Y+1	; 0x01
    359a:	90 83       	st	Z, r25
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	80 93 03 0f 	sts	0x0F03, r24
    35a2:	80 93 02 0f 	sts	0x0F02, r24
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	06 c0       	rjmp	.+12     	; 0x35b8 <_ZN7TwoWire5writeEh+0x58>
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	ce 01       	movw	r24, r28
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	30 de       	rcall	.-928    	; 0x3214 <twi_transmit>
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	0f 90       	pop	r0
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	08 95       	ret

000035c0 <_ZN7TwoWireC1Ev>:
    35c0:	fc 01       	movw	r30, r24
    35c2:	13 82       	std	Z+3, r1	; 0x03
    35c4:	12 82       	std	Z+2, r1	; 0x02
    35c6:	48 ee       	ldi	r20, 0xE8	; 232
    35c8:	53 e0       	ldi	r21, 0x03	; 3
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	70 e0       	ldi	r23, 0x00	; 0
    35ce:	44 83       	std	Z+4, r20	; 0x04
    35d0:	55 83       	std	Z+5, r21	; 0x05
    35d2:	66 83       	std	Z+6, r22	; 0x06
    35d4:	77 83       	std	Z+7, r23	; 0x07
    35d6:	84 ec       	ldi	r24, 0xC4	; 196
    35d8:	92 e0       	ldi	r25, 0x02	; 2
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	08 95       	ret

000035e0 <_ZN7TwoWire5beginEv>:
    35e0:	10 92 26 0f 	sts	0x0F26, r1
    35e4:	10 92 25 0f 	sts	0x0F25, r1
    35e8:	10 92 03 0f 	sts	0x0F03, r1
    35ec:	10 92 02 0f 	sts	0x0F02, r1
    35f0:	48 cd       	rjmp	.-1392   	; 0x3082 <twi_init>
    35f2:	08 95       	ret

000035f4 <_ZN7TwoWire11requestFromEhhh>:
    35f4:	86 2f       	mov	r24, r22
    35f6:	41 32       	cpi	r20, 0x21	; 33
    35f8:	08 f0       	brcs	.+2      	; 0x35fc <_ZN7TwoWire11requestFromEhhh+0x8>
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	67 e2       	ldi	r22, 0x27	; 39
    35fe:	7f e0       	ldi	r23, 0x0F	; 15
    3600:	5e dd       	rcall	.-1348   	; 0x30be <twi_readFrom>
    3602:	10 92 26 0f 	sts	0x0F26, r1
    3606:	80 93 25 0f 	sts	0x0F25, r24
    360a:	08 95       	ret

0000360c <_ZN7TwoWire11requestFromEhh>:
    360c:	21 e0       	ldi	r18, 0x01	; 1
    360e:	f2 cf       	rjmp	.-28     	; 0x35f4 <_ZN7TwoWire11requestFromEhhh>
    3610:	08 95       	ret

00003612 <_ZN7TwoWire17beginTransmissionEh>:
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	80 93 01 0f 	sts	0x0F01, r24
    3618:	60 93 24 0f 	sts	0x0F24, r22
    361c:	10 92 03 0f 	sts	0x0F03, r1
    3620:	10 92 02 0f 	sts	0x0F02, r1
    3624:	08 95       	ret

00003626 <_ZN7TwoWire15endTransmissionEh>:
    3626:	0f 93       	push	r16
    3628:	06 2f       	mov	r16, r22
    362a:	21 e0       	ldi	r18, 0x01	; 1
    362c:	40 91 02 0f 	lds	r20, 0x0F02
    3630:	64 e0       	ldi	r22, 0x04	; 4
    3632:	7f e0       	ldi	r23, 0x0F	; 15
    3634:	80 91 24 0f 	lds	r24, 0x0F24
    3638:	90 dd       	rcall	.-1248   	; 0x315a <twi_writeTo>
    363a:	10 92 03 0f 	sts	0x0F03, r1
    363e:	10 92 02 0f 	sts	0x0F02, r1
    3642:	10 92 01 0f 	sts	0x0F01, r1
    3646:	0f 91       	pop	r16
    3648:	08 95       	ret

0000364a <_ZN7TwoWire15endTransmissionEv>:
    364a:	61 e0       	ldi	r22, 0x01	; 1
    364c:	ec cf       	rjmp	.-40     	; 0x3626 <_ZN7TwoWire15endTransmissionEh>
    364e:	08 95       	ret

00003650 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3650:	85 ef       	ldi	r24, 0xF5	; 245
    3652:	9e e0       	ldi	r25, 0x0E	; 14
    3654:	b5 cf       	rjmp	.-150    	; 0x35c0 <_ZN7TwoWireC1Ev>
    3656:	08 95       	ret

00003658 <__subsf3>:
    3658:	50 58       	subi	r21, 0x80	; 128

0000365a <__addsf3>:
    365a:	bb 27       	eor	r27, r27
    365c:	aa 27       	eor	r26, r26
    365e:	0e d0       	rcall	.+28     	; 0x367c <__addsf3x>
    3660:	65 c2       	rjmp	.+1226   	; 0x3b2c <__fp_round>
    3662:	2e d2       	rcall	.+1116   	; 0x3ac0 <__fp_pscA>
    3664:	30 f0       	brcs	.+12     	; 0x3672 <__addsf3+0x18>
    3666:	33 d2       	rcall	.+1126   	; 0x3ace <__fp_pscB>
    3668:	20 f0       	brcs	.+8      	; 0x3672 <__addsf3+0x18>
    366a:	31 f4       	brne	.+12     	; 0x3678 <__addsf3+0x1e>
    366c:	9f 3f       	cpi	r25, 0xFF	; 255
    366e:	11 f4       	brne	.+4      	; 0x3674 <__addsf3+0x1a>
    3670:	1e f4       	brtc	.+6      	; 0x3678 <__addsf3+0x1e>
    3672:	ed c1       	rjmp	.+986    	; 0x3a4e <__fp_nan>
    3674:	0e f4       	brtc	.+2      	; 0x3678 <__addsf3+0x1e>
    3676:	e0 95       	com	r30
    3678:	e7 fb       	bst	r30, 7
    367a:	e3 c1       	rjmp	.+966    	; 0x3a42 <__fp_inf>

0000367c <__addsf3x>:
    367c:	e9 2f       	mov	r30, r25
    367e:	78 d2       	rcall	.+1264   	; 0x3b70 <__fp_split3>
    3680:	80 f3       	brcs	.-32     	; 0x3662 <__addsf3+0x8>
    3682:	ba 17       	cp	r27, r26
    3684:	62 07       	cpc	r22, r18
    3686:	73 07       	cpc	r23, r19
    3688:	84 07       	cpc	r24, r20
    368a:	95 07       	cpc	r25, r21
    368c:	18 f0       	brcs	.+6      	; 0x3694 <__addsf3x+0x18>
    368e:	71 f4       	brne	.+28     	; 0x36ac <__addsf3x+0x30>
    3690:	9e f5       	brtc	.+102    	; 0x36f8 <__addsf3x+0x7c>
    3692:	90 c2       	rjmp	.+1312   	; 0x3bb4 <__fp_zero>
    3694:	0e f4       	brtc	.+2      	; 0x3698 <__addsf3x+0x1c>
    3696:	e0 95       	com	r30
    3698:	0b 2e       	mov	r0, r27
    369a:	ba 2f       	mov	r27, r26
    369c:	a0 2d       	mov	r26, r0
    369e:	0b 01       	movw	r0, r22
    36a0:	b9 01       	movw	r22, r18
    36a2:	90 01       	movw	r18, r0
    36a4:	0c 01       	movw	r0, r24
    36a6:	ca 01       	movw	r24, r20
    36a8:	a0 01       	movw	r20, r0
    36aa:	11 24       	eor	r1, r1
    36ac:	ff 27       	eor	r31, r31
    36ae:	59 1b       	sub	r21, r25
    36b0:	99 f0       	breq	.+38     	; 0x36d8 <__addsf3x+0x5c>
    36b2:	59 3f       	cpi	r21, 0xF9	; 249
    36b4:	50 f4       	brcc	.+20     	; 0x36ca <__addsf3x+0x4e>
    36b6:	50 3e       	cpi	r21, 0xE0	; 224
    36b8:	68 f1       	brcs	.+90     	; 0x3714 <__addsf3x+0x98>
    36ba:	1a 16       	cp	r1, r26
    36bc:	f0 40       	sbci	r31, 0x00	; 0
    36be:	a2 2f       	mov	r26, r18
    36c0:	23 2f       	mov	r18, r19
    36c2:	34 2f       	mov	r19, r20
    36c4:	44 27       	eor	r20, r20
    36c6:	58 5f       	subi	r21, 0xF8	; 248
    36c8:	f3 cf       	rjmp	.-26     	; 0x36b0 <__addsf3x+0x34>
    36ca:	46 95       	lsr	r20
    36cc:	37 95       	ror	r19
    36ce:	27 95       	ror	r18
    36d0:	a7 95       	ror	r26
    36d2:	f0 40       	sbci	r31, 0x00	; 0
    36d4:	53 95       	inc	r21
    36d6:	c9 f7       	brne	.-14     	; 0x36ca <__addsf3x+0x4e>
    36d8:	7e f4       	brtc	.+30     	; 0x36f8 <__addsf3x+0x7c>
    36da:	1f 16       	cp	r1, r31
    36dc:	ba 0b       	sbc	r27, r26
    36de:	62 0b       	sbc	r22, r18
    36e0:	73 0b       	sbc	r23, r19
    36e2:	84 0b       	sbc	r24, r20
    36e4:	ba f0       	brmi	.+46     	; 0x3714 <__addsf3x+0x98>
    36e6:	91 50       	subi	r25, 0x01	; 1
    36e8:	a1 f0       	breq	.+40     	; 0x3712 <__addsf3x+0x96>
    36ea:	ff 0f       	add	r31, r31
    36ec:	bb 1f       	adc	r27, r27
    36ee:	66 1f       	adc	r22, r22
    36f0:	77 1f       	adc	r23, r23
    36f2:	88 1f       	adc	r24, r24
    36f4:	c2 f7       	brpl	.-16     	; 0x36e6 <__addsf3x+0x6a>
    36f6:	0e c0       	rjmp	.+28     	; 0x3714 <__addsf3x+0x98>
    36f8:	ba 0f       	add	r27, r26
    36fa:	62 1f       	adc	r22, r18
    36fc:	73 1f       	adc	r23, r19
    36fe:	84 1f       	adc	r24, r20
    3700:	48 f4       	brcc	.+18     	; 0x3714 <__addsf3x+0x98>
    3702:	87 95       	ror	r24
    3704:	77 95       	ror	r23
    3706:	67 95       	ror	r22
    3708:	b7 95       	ror	r27
    370a:	f7 95       	ror	r31
    370c:	9e 3f       	cpi	r25, 0xFE	; 254
    370e:	08 f0       	brcs	.+2      	; 0x3712 <__addsf3x+0x96>
    3710:	b3 cf       	rjmp	.-154    	; 0x3678 <__addsf3+0x1e>
    3712:	93 95       	inc	r25
    3714:	88 0f       	add	r24, r24
    3716:	08 f0       	brcs	.+2      	; 0x371a <__addsf3x+0x9e>
    3718:	99 27       	eor	r25, r25
    371a:	ee 0f       	add	r30, r30
    371c:	97 95       	ror	r25
    371e:	87 95       	ror	r24
    3720:	08 95       	ret

00003722 <asin>:
    3722:	9f 93       	push	r25
    3724:	9f 77       	andi	r25, 0x7F	; 127
    3726:	ee e3       	ldi	r30, 0x3E	; 62
    3728:	89 37       	cpi	r24, 0x79	; 121
    372a:	9e 07       	cpc	r25, r30
    372c:	20 f4       	brcc	.+8      	; 0x3736 <asin+0x14>
    372e:	e6 e7       	ldi	r30, 0x76	; 118
    3730:	f2 e0       	ldi	r31, 0x02	; 2
    3732:	b5 d1       	rcall	.+874    	; 0x3a9e <__fp_powsodd>
    3734:	09 c0       	rjmp	.+18     	; 0x3748 <asin+0x26>
    3736:	46 d1       	rcall	.+652    	; 0x39c4 <__fp_arccos>
    3738:	90 58       	subi	r25, 0x80	; 128
    373a:	a2 ea       	ldi	r26, 0xA2	; 162
    373c:	2a ed       	ldi	r18, 0xDA	; 218
    373e:	3f e0       	ldi	r19, 0x0F	; 15
    3740:	49 ec       	ldi	r20, 0xC9	; 201
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	9b df       	rcall	.-202    	; 0x367c <__addsf3x>
    3746:	f2 d1       	rcall	.+996    	; 0x3b2c <__fp_round>
    3748:	0f 90       	pop	r0
    374a:	07 fc       	sbrc	r0, 7
    374c:	90 58       	subi	r25, 0x80	; 128
    374e:	08 95       	ret
    3750:	b7 d1       	rcall	.+878    	; 0x3ac0 <__fp_pscA>
    3752:	58 f0       	brcs	.+22     	; 0x376a <asin+0x48>
    3754:	80 e8       	ldi	r24, 0x80	; 128
    3756:	91 e0       	ldi	r25, 0x01	; 1
    3758:	09 f4       	brne	.+2      	; 0x375c <asin+0x3a>
    375a:	9e ef       	ldi	r25, 0xFE	; 254
    375c:	b8 d1       	rcall	.+880    	; 0x3ace <__fp_pscB>
    375e:	28 f0       	brcs	.+10     	; 0x376a <asin+0x48>
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	51 e0       	ldi	r21, 0x01	; 1
    3764:	59 f4       	brne	.+22     	; 0x377c <atan2+0xe>
    3766:	5e ef       	ldi	r21, 0xFE	; 254
    3768:	09 c0       	rjmp	.+18     	; 0x377c <atan2+0xe>
    376a:	71 c1       	rjmp	.+738    	; 0x3a4e <__fp_nan>
    376c:	23 c2       	rjmp	.+1094   	; 0x3bb4 <__fp_zero>

0000376e <atan2>:
    376e:	e9 2f       	mov	r30, r25
    3770:	e0 78       	andi	r30, 0x80	; 128
    3772:	fe d1       	rcall	.+1020   	; 0x3b70 <__fp_split3>
    3774:	68 f3       	brcs	.-38     	; 0x3750 <asin+0x2e>
    3776:	09 2e       	mov	r0, r25
    3778:	05 2a       	or	r0, r21
    377a:	c1 f3       	breq	.-16     	; 0x376c <asin+0x4a>
    377c:	26 17       	cp	r18, r22
    377e:	37 07       	cpc	r19, r23
    3780:	48 07       	cpc	r20, r24
    3782:	59 07       	cpc	r21, r25
    3784:	38 f0       	brcs	.+14     	; 0x3794 <atan2+0x26>
    3786:	0e 2e       	mov	r0, r30
    3788:	07 f8       	bld	r0, 7
    378a:	e0 25       	eor	r30, r0
    378c:	69 f0       	breq	.+26     	; 0x37a8 <atan2+0x3a>
    378e:	e0 25       	eor	r30, r0
    3790:	e0 64       	ori	r30, 0x40	; 64
    3792:	0a c0       	rjmp	.+20     	; 0x37a8 <atan2+0x3a>
    3794:	ef 63       	ori	r30, 0x3F	; 63
    3796:	07 f8       	bld	r0, 7
    3798:	00 94       	com	r0
    379a:	07 fa       	bst	r0, 7
    379c:	db 01       	movw	r26, r22
    379e:	b9 01       	movw	r22, r18
    37a0:	9d 01       	movw	r18, r26
    37a2:	dc 01       	movw	r26, r24
    37a4:	ca 01       	movw	r24, r20
    37a6:	ad 01       	movw	r20, r26
    37a8:	ef 93       	push	r30
    37aa:	4a d0       	rcall	.+148    	; 0x3840 <__divsf3_pse>
    37ac:	bf d1       	rcall	.+894    	; 0x3b2c <__fp_round>
    37ae:	0a d0       	rcall	.+20     	; 0x37c4 <atan>
    37b0:	5f 91       	pop	r21
    37b2:	55 23       	and	r21, r21
    37b4:	31 f0       	breq	.+12     	; 0x37c2 <atan2+0x54>
    37b6:	2b ed       	ldi	r18, 0xDB	; 219
    37b8:	3f e0       	ldi	r19, 0x0F	; 15
    37ba:	49 e4       	ldi	r20, 0x49	; 73
    37bc:	50 fd       	sbrc	r21, 0
    37be:	49 ec       	ldi	r20, 0xC9	; 201
    37c0:	4c cf       	rjmp	.-360    	; 0x365a <__addsf3>
    37c2:	08 95       	ret

000037c4 <atan>:
    37c4:	df 93       	push	r29
    37c6:	dd 27       	eor	r29, r29
    37c8:	b9 2f       	mov	r27, r25
    37ca:	bf 77       	andi	r27, 0x7F	; 127
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	16 16       	cp	r1, r22
    37d2:	17 06       	cpc	r1, r23
    37d4:	48 07       	cpc	r20, r24
    37d6:	5b 07       	cpc	r21, r27
    37d8:	10 f4       	brcc	.+4      	; 0x37de <atan+0x1a>
    37da:	d9 2f       	mov	r29, r25
    37dc:	f6 d1       	rcall	.+1004   	; 0x3bca <inverse>
    37de:	9f 93       	push	r25
    37e0:	8f 93       	push	r24
    37e2:	7f 93       	push	r23
    37e4:	6f 93       	push	r22
    37e6:	ef d2       	rcall	.+1502   	; 0x3dc6 <square>
    37e8:	ea e8       	ldi	r30, 0x8A	; 138
    37ea:	f2 e0       	ldi	r31, 0x02	; 2
    37ec:	33 d1       	rcall	.+614    	; 0x3a54 <__fp_powser>
    37ee:	9e d1       	rcall	.+828    	; 0x3b2c <__fp_round>
    37f0:	2f 91       	pop	r18
    37f2:	3f 91       	pop	r19
    37f4:	4f 91       	pop	r20
    37f6:	5f 91       	pop	r21
    37f8:	fb d1       	rcall	.+1014   	; 0x3bf0 <__mulsf3x>
    37fa:	dd 23       	and	r29, r29
    37fc:	49 f0       	breq	.+18     	; 0x3810 <atan+0x4c>
    37fe:	90 58       	subi	r25, 0x80	; 128
    3800:	a2 ea       	ldi	r26, 0xA2	; 162
    3802:	2a ed       	ldi	r18, 0xDA	; 218
    3804:	3f e0       	ldi	r19, 0x0F	; 15
    3806:	49 ec       	ldi	r20, 0xC9	; 201
    3808:	5f e3       	ldi	r21, 0x3F	; 63
    380a:	d0 78       	andi	r29, 0x80	; 128
    380c:	5d 27       	eor	r21, r29
    380e:	36 df       	rcall	.-404    	; 0x367c <__addsf3x>
    3810:	df 91       	pop	r29
    3812:	8c c1       	rjmp	.+792    	; 0x3b2c <__fp_round>

00003814 <__cmpsf2>:
    3814:	f2 d0       	rcall	.+484    	; 0x39fa <__fp_cmp>
    3816:	08 f4       	brcc	.+2      	; 0x381a <__cmpsf2+0x6>
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	08 95       	ret

0000381c <cos>:
    381c:	60 d1       	rcall	.+704    	; 0x3ade <__fp_rempio2>
    381e:	e3 95       	inc	r30
    3820:	96 c1       	rjmp	.+812    	; 0x3b4e <__fp_sinus>

00003822 <__divsf3>:
    3822:	0c d0       	rcall	.+24     	; 0x383c <__divsf3x>
    3824:	83 c1       	rjmp	.+774    	; 0x3b2c <__fp_round>
    3826:	53 d1       	rcall	.+678    	; 0x3ace <__fp_pscB>
    3828:	40 f0       	brcs	.+16     	; 0x383a <__divsf3+0x18>
    382a:	4a d1       	rcall	.+660    	; 0x3ac0 <__fp_pscA>
    382c:	30 f0       	brcs	.+12     	; 0x383a <__divsf3+0x18>
    382e:	21 f4       	brne	.+8      	; 0x3838 <__divsf3+0x16>
    3830:	5f 3f       	cpi	r21, 0xFF	; 255
    3832:	19 f0       	breq	.+6      	; 0x383a <__divsf3+0x18>
    3834:	06 c1       	rjmp	.+524    	; 0x3a42 <__fp_inf>
    3836:	51 11       	cpse	r21, r1
    3838:	be c1       	rjmp	.+892    	; 0x3bb6 <__fp_szero>
    383a:	09 c1       	rjmp	.+530    	; 0x3a4e <__fp_nan>

0000383c <__divsf3x>:
    383c:	99 d1       	rcall	.+818    	; 0x3b70 <__fp_split3>
    383e:	98 f3       	brcs	.-26     	; 0x3826 <__divsf3+0x4>

00003840 <__divsf3_pse>:
    3840:	99 23       	and	r25, r25
    3842:	c9 f3       	breq	.-14     	; 0x3836 <__divsf3+0x14>
    3844:	55 23       	and	r21, r21
    3846:	b1 f3       	breq	.-20     	; 0x3834 <__divsf3+0x12>
    3848:	95 1b       	sub	r25, r21
    384a:	55 0b       	sbc	r21, r21
    384c:	bb 27       	eor	r27, r27
    384e:	aa 27       	eor	r26, r26
    3850:	62 17       	cp	r22, r18
    3852:	73 07       	cpc	r23, r19
    3854:	84 07       	cpc	r24, r20
    3856:	38 f0       	brcs	.+14     	; 0x3866 <__divsf3_pse+0x26>
    3858:	9f 5f       	subi	r25, 0xFF	; 255
    385a:	5f 4f       	sbci	r21, 0xFF	; 255
    385c:	22 0f       	add	r18, r18
    385e:	33 1f       	adc	r19, r19
    3860:	44 1f       	adc	r20, r20
    3862:	aa 1f       	adc	r26, r26
    3864:	a9 f3       	breq	.-22     	; 0x3850 <__divsf3_pse+0x10>
    3866:	33 d0       	rcall	.+102    	; 0x38ce <__divsf3_pse+0x8e>
    3868:	0e 2e       	mov	r0, r30
    386a:	3a f0       	brmi	.+14     	; 0x387a <__divsf3_pse+0x3a>
    386c:	e0 e8       	ldi	r30, 0x80	; 128
    386e:	30 d0       	rcall	.+96     	; 0x38d0 <__divsf3_pse+0x90>
    3870:	91 50       	subi	r25, 0x01	; 1
    3872:	50 40       	sbci	r21, 0x00	; 0
    3874:	e6 95       	lsr	r30
    3876:	00 1c       	adc	r0, r0
    3878:	ca f7       	brpl	.-14     	; 0x386c <__divsf3_pse+0x2c>
    387a:	29 d0       	rcall	.+82     	; 0x38ce <__divsf3_pse+0x8e>
    387c:	fe 2f       	mov	r31, r30
    387e:	27 d0       	rcall	.+78     	; 0x38ce <__divsf3_pse+0x8e>
    3880:	66 0f       	add	r22, r22
    3882:	77 1f       	adc	r23, r23
    3884:	88 1f       	adc	r24, r24
    3886:	bb 1f       	adc	r27, r27
    3888:	26 17       	cp	r18, r22
    388a:	37 07       	cpc	r19, r23
    388c:	48 07       	cpc	r20, r24
    388e:	ab 07       	cpc	r26, r27
    3890:	b0 e8       	ldi	r27, 0x80	; 128
    3892:	09 f0       	breq	.+2      	; 0x3896 <__divsf3_pse+0x56>
    3894:	bb 0b       	sbc	r27, r27
    3896:	80 2d       	mov	r24, r0
    3898:	bf 01       	movw	r22, r30
    389a:	ff 27       	eor	r31, r31
    389c:	93 58       	subi	r25, 0x83	; 131
    389e:	5f 4f       	sbci	r21, 0xFF	; 255
    38a0:	2a f0       	brmi	.+10     	; 0x38ac <__divsf3_pse+0x6c>
    38a2:	9e 3f       	cpi	r25, 0xFE	; 254
    38a4:	51 05       	cpc	r21, r1
    38a6:	68 f0       	brcs	.+26     	; 0x38c2 <__divsf3_pse+0x82>
    38a8:	cc c0       	rjmp	.+408    	; 0x3a42 <__fp_inf>
    38aa:	85 c1       	rjmp	.+778    	; 0x3bb6 <__fp_szero>
    38ac:	5f 3f       	cpi	r21, 0xFF	; 255
    38ae:	ec f3       	brlt	.-6      	; 0x38aa <__divsf3_pse+0x6a>
    38b0:	98 3e       	cpi	r25, 0xE8	; 232
    38b2:	dc f3       	brlt	.-10     	; 0x38aa <__divsf3_pse+0x6a>
    38b4:	86 95       	lsr	r24
    38b6:	77 95       	ror	r23
    38b8:	67 95       	ror	r22
    38ba:	b7 95       	ror	r27
    38bc:	f7 95       	ror	r31
    38be:	9f 5f       	subi	r25, 0xFF	; 255
    38c0:	c9 f7       	brne	.-14     	; 0x38b4 <__divsf3_pse+0x74>
    38c2:	88 0f       	add	r24, r24
    38c4:	91 1d       	adc	r25, r1
    38c6:	96 95       	lsr	r25
    38c8:	87 95       	ror	r24
    38ca:	97 f9       	bld	r25, 7
    38cc:	08 95       	ret
    38ce:	e1 e0       	ldi	r30, 0x01	; 1
    38d0:	66 0f       	add	r22, r22
    38d2:	77 1f       	adc	r23, r23
    38d4:	88 1f       	adc	r24, r24
    38d6:	bb 1f       	adc	r27, r27
    38d8:	62 17       	cp	r22, r18
    38da:	73 07       	cpc	r23, r19
    38dc:	84 07       	cpc	r24, r20
    38de:	ba 07       	cpc	r27, r26
    38e0:	20 f0       	brcs	.+8      	; 0x38ea <__divsf3_pse+0xaa>
    38e2:	62 1b       	sub	r22, r18
    38e4:	73 0b       	sbc	r23, r19
    38e6:	84 0b       	sbc	r24, r20
    38e8:	ba 0b       	sbc	r27, r26
    38ea:	ee 1f       	adc	r30, r30
    38ec:	88 f7       	brcc	.-30     	; 0x38d0 <__divsf3_pse+0x90>
    38ee:	e0 95       	com	r30
    38f0:	08 95       	ret

000038f2 <__fixunssfsi>:
    38f2:	46 d1       	rcall	.+652    	; 0x3b80 <__fp_splitA>
    38f4:	88 f0       	brcs	.+34     	; 0x3918 <__fixunssfsi+0x26>
    38f6:	9f 57       	subi	r25, 0x7F	; 127
    38f8:	90 f0       	brcs	.+36     	; 0x391e <__fixunssfsi+0x2c>
    38fa:	b9 2f       	mov	r27, r25
    38fc:	99 27       	eor	r25, r25
    38fe:	b7 51       	subi	r27, 0x17	; 23
    3900:	a0 f0       	brcs	.+40     	; 0x392a <__fixunssfsi+0x38>
    3902:	d1 f0       	breq	.+52     	; 0x3938 <__fixunssfsi+0x46>
    3904:	66 0f       	add	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	1a f0       	brmi	.+6      	; 0x3914 <__fixunssfsi+0x22>
    390e:	ba 95       	dec	r27
    3910:	c9 f7       	brne	.-14     	; 0x3904 <__fixunssfsi+0x12>
    3912:	12 c0       	rjmp	.+36     	; 0x3938 <__fixunssfsi+0x46>
    3914:	b1 30       	cpi	r27, 0x01	; 1
    3916:	81 f0       	breq	.+32     	; 0x3938 <__fixunssfsi+0x46>
    3918:	4d d1       	rcall	.+666    	; 0x3bb4 <__fp_zero>
    391a:	b1 e0       	ldi	r27, 0x01	; 1
    391c:	08 95       	ret
    391e:	4a c1       	rjmp	.+660    	; 0x3bb4 <__fp_zero>
    3920:	67 2f       	mov	r22, r23
    3922:	78 2f       	mov	r23, r24
    3924:	88 27       	eor	r24, r24
    3926:	b8 5f       	subi	r27, 0xF8	; 248
    3928:	39 f0       	breq	.+14     	; 0x3938 <__fixunssfsi+0x46>
    392a:	b9 3f       	cpi	r27, 0xF9	; 249
    392c:	cc f3       	brlt	.-14     	; 0x3920 <__fixunssfsi+0x2e>
    392e:	86 95       	lsr	r24
    3930:	77 95       	ror	r23
    3932:	67 95       	ror	r22
    3934:	b3 95       	inc	r27
    3936:	d9 f7       	brne	.-10     	; 0x392e <__fixunssfsi+0x3c>
    3938:	3e f4       	brtc	.+14     	; 0x3948 <__fixunssfsi+0x56>
    393a:	90 95       	com	r25
    393c:	80 95       	com	r24
    393e:	70 95       	com	r23
    3940:	61 95       	neg	r22
    3942:	7f 4f       	sbci	r23, 0xFF	; 255
    3944:	8f 4f       	sbci	r24, 0xFF	; 255
    3946:	9f 4f       	sbci	r25, 0xFF	; 255
    3948:	08 95       	ret

0000394a <__floatunsisf>:
    394a:	e8 94       	clt
    394c:	09 c0       	rjmp	.+18     	; 0x3960 <__floatsisf+0x12>

0000394e <__floatsisf>:
    394e:	97 fb       	bst	r25, 7
    3950:	3e f4       	brtc	.+14     	; 0x3960 <__floatsisf+0x12>
    3952:	90 95       	com	r25
    3954:	80 95       	com	r24
    3956:	70 95       	com	r23
    3958:	61 95       	neg	r22
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	8f 4f       	sbci	r24, 0xFF	; 255
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	99 23       	and	r25, r25
    3962:	a9 f0       	breq	.+42     	; 0x398e <__floatsisf+0x40>
    3964:	f9 2f       	mov	r31, r25
    3966:	96 e9       	ldi	r25, 0x96	; 150
    3968:	bb 27       	eor	r27, r27
    396a:	93 95       	inc	r25
    396c:	f6 95       	lsr	r31
    396e:	87 95       	ror	r24
    3970:	77 95       	ror	r23
    3972:	67 95       	ror	r22
    3974:	b7 95       	ror	r27
    3976:	f1 11       	cpse	r31, r1
    3978:	f8 cf       	rjmp	.-16     	; 0x396a <__floatsisf+0x1c>
    397a:	fa f4       	brpl	.+62     	; 0x39ba <__floatsisf+0x6c>
    397c:	bb 0f       	add	r27, r27
    397e:	11 f4       	brne	.+4      	; 0x3984 <__floatsisf+0x36>
    3980:	60 ff       	sbrs	r22, 0
    3982:	1b c0       	rjmp	.+54     	; 0x39ba <__floatsisf+0x6c>
    3984:	6f 5f       	subi	r22, 0xFF	; 255
    3986:	7f 4f       	sbci	r23, 0xFF	; 255
    3988:	8f 4f       	sbci	r24, 0xFF	; 255
    398a:	9f 4f       	sbci	r25, 0xFF	; 255
    398c:	16 c0       	rjmp	.+44     	; 0x39ba <__floatsisf+0x6c>
    398e:	88 23       	and	r24, r24
    3990:	11 f0       	breq	.+4      	; 0x3996 <__floatsisf+0x48>
    3992:	96 e9       	ldi	r25, 0x96	; 150
    3994:	11 c0       	rjmp	.+34     	; 0x39b8 <__floatsisf+0x6a>
    3996:	77 23       	and	r23, r23
    3998:	21 f0       	breq	.+8      	; 0x39a2 <__floatsisf+0x54>
    399a:	9e e8       	ldi	r25, 0x8E	; 142
    399c:	87 2f       	mov	r24, r23
    399e:	76 2f       	mov	r23, r22
    39a0:	05 c0       	rjmp	.+10     	; 0x39ac <__floatsisf+0x5e>
    39a2:	66 23       	and	r22, r22
    39a4:	71 f0       	breq	.+28     	; 0x39c2 <__floatsisf+0x74>
    39a6:	96 e8       	ldi	r25, 0x86	; 134
    39a8:	86 2f       	mov	r24, r22
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	60 e0       	ldi	r22, 0x00	; 0
    39ae:	2a f0       	brmi	.+10     	; 0x39ba <__floatsisf+0x6c>
    39b0:	9a 95       	dec	r25
    39b2:	66 0f       	add	r22, r22
    39b4:	77 1f       	adc	r23, r23
    39b6:	88 1f       	adc	r24, r24
    39b8:	da f7       	brpl	.-10     	; 0x39b0 <__floatsisf+0x62>
    39ba:	88 0f       	add	r24, r24
    39bc:	96 95       	lsr	r25
    39be:	87 95       	ror	r24
    39c0:	97 f9       	bld	r25, 7
    39c2:	08 95       	ret

000039c4 <__fp_arccos>:
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	1f 93       	push	r17
    39ca:	0f 93       	push	r16
    39cc:	8b 01       	movw	r16, r22
    39ce:	ec 01       	movw	r28, r24
    39d0:	e7 eb       	ldi	r30, 0xB7	; 183
    39d2:	f2 e0       	ldi	r31, 0x02	; 2
    39d4:	3f d0       	rcall	.+126    	; 0x3a54 <__fp_powser>
    39d6:	aa d0       	rcall	.+340    	; 0x3b2c <__fp_round>
    39d8:	98 01       	movw	r18, r16
    39da:	ae 01       	movw	r20, r28
    39dc:	8b 01       	movw	r16, r22
    39de:	ec 01       	movw	r28, r24
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	80 e8       	ldi	r24, 0x80	; 128
    39e6:	9f e3       	ldi	r25, 0x3F	; 63
    39e8:	37 de       	rcall	.-914    	; 0x3658 <__subsf3>
    39ea:	af d1       	rcall	.+862    	; 0x3d4a <sqrt>
    39ec:	98 01       	movw	r18, r16
    39ee:	ae 01       	movw	r20, r28
    39f0:	0f 91       	pop	r16
    39f2:	1f 91       	pop	r17
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	fb c0       	rjmp	.+502    	; 0x3bf0 <__mulsf3x>

000039fa <__fp_cmp>:
    39fa:	99 0f       	add	r25, r25
    39fc:	00 08       	sbc	r0, r0
    39fe:	55 0f       	add	r21, r21
    3a00:	aa 0b       	sbc	r26, r26
    3a02:	e0 e8       	ldi	r30, 0x80	; 128
    3a04:	fe ef       	ldi	r31, 0xFE	; 254
    3a06:	16 16       	cp	r1, r22
    3a08:	17 06       	cpc	r1, r23
    3a0a:	e8 07       	cpc	r30, r24
    3a0c:	f9 07       	cpc	r31, r25
    3a0e:	c0 f0       	brcs	.+48     	; 0x3a40 <__fp_cmp+0x46>
    3a10:	12 16       	cp	r1, r18
    3a12:	13 06       	cpc	r1, r19
    3a14:	e4 07       	cpc	r30, r20
    3a16:	f5 07       	cpc	r31, r21
    3a18:	98 f0       	brcs	.+38     	; 0x3a40 <__fp_cmp+0x46>
    3a1a:	62 1b       	sub	r22, r18
    3a1c:	73 0b       	sbc	r23, r19
    3a1e:	84 0b       	sbc	r24, r20
    3a20:	95 0b       	sbc	r25, r21
    3a22:	39 f4       	brne	.+14     	; 0x3a32 <__fp_cmp+0x38>
    3a24:	0a 26       	eor	r0, r26
    3a26:	61 f0       	breq	.+24     	; 0x3a40 <__fp_cmp+0x46>
    3a28:	23 2b       	or	r18, r19
    3a2a:	24 2b       	or	r18, r20
    3a2c:	25 2b       	or	r18, r21
    3a2e:	21 f4       	brne	.+8      	; 0x3a38 <__fp_cmp+0x3e>
    3a30:	08 95       	ret
    3a32:	0a 26       	eor	r0, r26
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <__fp_cmp+0x3e>
    3a36:	a1 40       	sbci	r26, 0x01	; 1
    3a38:	a6 95       	lsr	r26
    3a3a:	8f ef       	ldi	r24, 0xFF	; 255
    3a3c:	81 1d       	adc	r24, r1
    3a3e:	81 1d       	adc	r24, r1
    3a40:	08 95       	ret

00003a42 <__fp_inf>:
    3a42:	97 f9       	bld	r25, 7
    3a44:	9f 67       	ori	r25, 0x7F	; 127
    3a46:	80 e8       	ldi	r24, 0x80	; 128
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	08 95       	ret

00003a4e <__fp_nan>:
    3a4e:	9f ef       	ldi	r25, 0xFF	; 255
    3a50:	80 ec       	ldi	r24, 0xC0	; 192
    3a52:	08 95       	ret

00003a54 <__fp_powser>:
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	1f 93       	push	r17
    3a5a:	0f 93       	push	r16
    3a5c:	ff 92       	push	r15
    3a5e:	ef 92       	push	r14
    3a60:	df 92       	push	r13
    3a62:	7b 01       	movw	r14, r22
    3a64:	8c 01       	movw	r16, r24
    3a66:	68 94       	set
    3a68:	05 c0       	rjmp	.+10     	; 0x3a74 <__fp_powser+0x20>
    3a6a:	da 2e       	mov	r13, r26
    3a6c:	ef 01       	movw	r28, r30
    3a6e:	c0 d0       	rcall	.+384    	; 0x3bf0 <__mulsf3x>
    3a70:	fe 01       	movw	r30, r28
    3a72:	e8 94       	clt
    3a74:	a5 91       	lpm	r26, Z+
    3a76:	25 91       	lpm	r18, Z+
    3a78:	35 91       	lpm	r19, Z+
    3a7a:	45 91       	lpm	r20, Z+
    3a7c:	55 91       	lpm	r21, Z+
    3a7e:	ae f3       	brts	.-22     	; 0x3a6a <__fp_powser+0x16>
    3a80:	ef 01       	movw	r28, r30
    3a82:	fc dd       	rcall	.-1032   	; 0x367c <__addsf3x>
    3a84:	fe 01       	movw	r30, r28
    3a86:	97 01       	movw	r18, r14
    3a88:	a8 01       	movw	r20, r16
    3a8a:	da 94       	dec	r13
    3a8c:	79 f7       	brne	.-34     	; 0x3a6c <__fp_powser+0x18>
    3a8e:	df 90       	pop	r13
    3a90:	ef 90       	pop	r14
    3a92:	ff 90       	pop	r15
    3a94:	0f 91       	pop	r16
    3a96:	1f 91       	pop	r17
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <__fp_powsodd>:
    3a9e:	9f 93       	push	r25
    3aa0:	8f 93       	push	r24
    3aa2:	7f 93       	push	r23
    3aa4:	6f 93       	push	r22
    3aa6:	ff 93       	push	r31
    3aa8:	ef 93       	push	r30
    3aaa:	9b 01       	movw	r18, r22
    3aac:	ac 01       	movw	r20, r24
    3aae:	94 d0       	rcall	.+296    	; 0x3bd8 <__mulsf3>
    3ab0:	ef 91       	pop	r30
    3ab2:	ff 91       	pop	r31
    3ab4:	cf df       	rcall	.-98     	; 0x3a54 <__fp_powser>
    3ab6:	2f 91       	pop	r18
    3ab8:	3f 91       	pop	r19
    3aba:	4f 91       	pop	r20
    3abc:	5f 91       	pop	r21
    3abe:	8c c0       	rjmp	.+280    	; 0x3bd8 <__mulsf3>

00003ac0 <__fp_pscA>:
    3ac0:	00 24       	eor	r0, r0
    3ac2:	0a 94       	dec	r0
    3ac4:	16 16       	cp	r1, r22
    3ac6:	17 06       	cpc	r1, r23
    3ac8:	18 06       	cpc	r1, r24
    3aca:	09 06       	cpc	r0, r25
    3acc:	08 95       	ret

00003ace <__fp_pscB>:
    3ace:	00 24       	eor	r0, r0
    3ad0:	0a 94       	dec	r0
    3ad2:	12 16       	cp	r1, r18
    3ad4:	13 06       	cpc	r1, r19
    3ad6:	14 06       	cpc	r1, r20
    3ad8:	05 06       	cpc	r0, r21
    3ada:	08 95       	ret
    3adc:	b8 cf       	rjmp	.-144    	; 0x3a4e <__fp_nan>

00003ade <__fp_rempio2>:
    3ade:	50 d0       	rcall	.+160    	; 0x3b80 <__fp_splitA>
    3ae0:	e8 f3       	brcs	.-6      	; 0x3adc <__fp_pscB+0xe>
    3ae2:	e8 94       	clt
    3ae4:	e0 e0       	ldi	r30, 0x00	; 0
    3ae6:	bb 27       	eor	r27, r27
    3ae8:	9f 57       	subi	r25, 0x7F	; 127
    3aea:	f0 f0       	brcs	.+60     	; 0x3b28 <__fp_rempio2+0x4a>
    3aec:	2a ed       	ldi	r18, 0xDA	; 218
    3aee:	3f e0       	ldi	r19, 0x0F	; 15
    3af0:	49 ec       	ldi	r20, 0xC9	; 201
    3af2:	06 c0       	rjmp	.+12     	; 0x3b00 <__fp_rempio2+0x22>
    3af4:	ee 0f       	add	r30, r30
    3af6:	bb 0f       	add	r27, r27
    3af8:	66 1f       	adc	r22, r22
    3afa:	77 1f       	adc	r23, r23
    3afc:	88 1f       	adc	r24, r24
    3afe:	28 f0       	brcs	.+10     	; 0x3b0a <__fp_rempio2+0x2c>
    3b00:	b2 3a       	cpi	r27, 0xA2	; 162
    3b02:	62 07       	cpc	r22, r18
    3b04:	73 07       	cpc	r23, r19
    3b06:	84 07       	cpc	r24, r20
    3b08:	28 f0       	brcs	.+10     	; 0x3b14 <__fp_rempio2+0x36>
    3b0a:	b2 5a       	subi	r27, 0xA2	; 162
    3b0c:	62 0b       	sbc	r22, r18
    3b0e:	73 0b       	sbc	r23, r19
    3b10:	84 0b       	sbc	r24, r20
    3b12:	e3 95       	inc	r30
    3b14:	9a 95       	dec	r25
    3b16:	72 f7       	brpl	.-36     	; 0x3af4 <__fp_rempio2+0x16>
    3b18:	80 38       	cpi	r24, 0x80	; 128
    3b1a:	30 f4       	brcc	.+12     	; 0x3b28 <__fp_rempio2+0x4a>
    3b1c:	9a 95       	dec	r25
    3b1e:	bb 0f       	add	r27, r27
    3b20:	66 1f       	adc	r22, r22
    3b22:	77 1f       	adc	r23, r23
    3b24:	88 1f       	adc	r24, r24
    3b26:	d2 f7       	brpl	.-12     	; 0x3b1c <__fp_rempio2+0x3e>
    3b28:	90 48       	sbci	r25, 0x80	; 128
    3b2a:	83 c1       	rjmp	.+774    	; 0x3e32 <__fp_mpack_finite>

00003b2c <__fp_round>:
    3b2c:	09 2e       	mov	r0, r25
    3b2e:	03 94       	inc	r0
    3b30:	00 0c       	add	r0, r0
    3b32:	11 f4       	brne	.+4      	; 0x3b38 <__fp_round+0xc>
    3b34:	88 23       	and	r24, r24
    3b36:	52 f0       	brmi	.+20     	; 0x3b4c <__fp_round+0x20>
    3b38:	bb 0f       	add	r27, r27
    3b3a:	40 f4       	brcc	.+16     	; 0x3b4c <__fp_round+0x20>
    3b3c:	bf 2b       	or	r27, r31
    3b3e:	11 f4       	brne	.+4      	; 0x3b44 <__fp_round+0x18>
    3b40:	60 ff       	sbrs	r22, 0
    3b42:	04 c0       	rjmp	.+8      	; 0x3b4c <__fp_round+0x20>
    3b44:	6f 5f       	subi	r22, 0xFF	; 255
    3b46:	7f 4f       	sbci	r23, 0xFF	; 255
    3b48:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4c:	08 95       	ret

00003b4e <__fp_sinus>:
    3b4e:	ef 93       	push	r30
    3b50:	e0 ff       	sbrs	r30, 0
    3b52:	06 c0       	rjmp	.+12     	; 0x3b60 <__fp_sinus+0x12>
    3b54:	a2 ea       	ldi	r26, 0xA2	; 162
    3b56:	2a ed       	ldi	r18, 0xDA	; 218
    3b58:	3f e0       	ldi	r19, 0x0F	; 15
    3b5a:	49 ec       	ldi	r20, 0xC9	; 201
    3b5c:	5f eb       	ldi	r21, 0xBF	; 191
    3b5e:	8e dd       	rcall	.-1252   	; 0x367c <__addsf3x>
    3b60:	e5 df       	rcall	.-54     	; 0x3b2c <__fp_round>
    3b62:	0f 90       	pop	r0
    3b64:	03 94       	inc	r0
    3b66:	01 fc       	sbrc	r0, 1
    3b68:	90 58       	subi	r25, 0x80	; 128
    3b6a:	ef ed       	ldi	r30, 0xDF	; 223
    3b6c:	f2 e0       	ldi	r31, 0x02	; 2
    3b6e:	97 cf       	rjmp	.-210    	; 0x3a9e <__fp_powsodd>

00003b70 <__fp_split3>:
    3b70:	57 fd       	sbrc	r21, 7
    3b72:	90 58       	subi	r25, 0x80	; 128
    3b74:	44 0f       	add	r20, r20
    3b76:	55 1f       	adc	r21, r21
    3b78:	59 f0       	breq	.+22     	; 0x3b90 <__fp_splitA+0x10>
    3b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b7c:	71 f0       	breq	.+28     	; 0x3b9a <__fp_splitA+0x1a>
    3b7e:	47 95       	ror	r20

00003b80 <__fp_splitA>:
    3b80:	88 0f       	add	r24, r24
    3b82:	97 fb       	bst	r25, 7
    3b84:	99 1f       	adc	r25, r25
    3b86:	61 f0       	breq	.+24     	; 0x3ba0 <__fp_splitA+0x20>
    3b88:	9f 3f       	cpi	r25, 0xFF	; 255
    3b8a:	79 f0       	breq	.+30     	; 0x3baa <__fp_splitA+0x2a>
    3b8c:	87 95       	ror	r24
    3b8e:	08 95       	ret
    3b90:	12 16       	cp	r1, r18
    3b92:	13 06       	cpc	r1, r19
    3b94:	14 06       	cpc	r1, r20
    3b96:	55 1f       	adc	r21, r21
    3b98:	f2 cf       	rjmp	.-28     	; 0x3b7e <__fp_split3+0xe>
    3b9a:	46 95       	lsr	r20
    3b9c:	f1 df       	rcall	.-30     	; 0x3b80 <__fp_splitA>
    3b9e:	08 c0       	rjmp	.+16     	; 0x3bb0 <__fp_splitA+0x30>
    3ba0:	16 16       	cp	r1, r22
    3ba2:	17 06       	cpc	r1, r23
    3ba4:	18 06       	cpc	r1, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	f1 cf       	rjmp	.-30     	; 0x3b8c <__fp_splitA+0xc>
    3baa:	86 95       	lsr	r24
    3bac:	71 05       	cpc	r23, r1
    3bae:	61 05       	cpc	r22, r1
    3bb0:	08 94       	sec
    3bb2:	08 95       	ret

00003bb4 <__fp_zero>:
    3bb4:	e8 94       	clt

00003bb6 <__fp_szero>:
    3bb6:	bb 27       	eor	r27, r27
    3bb8:	66 27       	eor	r22, r22
    3bba:	77 27       	eor	r23, r23
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	97 f9       	bld	r25, 7
    3bc0:	08 95       	ret

00003bc2 <__gesf2>:
    3bc2:	1b df       	rcall	.-458    	; 0x39fa <__fp_cmp>
    3bc4:	08 f4       	brcc	.+2      	; 0x3bc8 <__gesf2+0x6>
    3bc6:	8f ef       	ldi	r24, 0xFF	; 255
    3bc8:	08 95       	ret

00003bca <inverse>:
    3bca:	9b 01       	movw	r18, r22
    3bcc:	ac 01       	movw	r20, r24
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	70 e0       	ldi	r23, 0x00	; 0
    3bd2:	80 e8       	ldi	r24, 0x80	; 128
    3bd4:	9f e3       	ldi	r25, 0x3F	; 63
    3bd6:	25 ce       	rjmp	.-950    	; 0x3822 <__divsf3>

00003bd8 <__mulsf3>:
    3bd8:	0b d0       	rcall	.+22     	; 0x3bf0 <__mulsf3x>
    3bda:	a8 cf       	rjmp	.-176    	; 0x3b2c <__fp_round>
    3bdc:	71 df       	rcall	.-286    	; 0x3ac0 <__fp_pscA>
    3bde:	28 f0       	brcs	.+10     	; 0x3bea <__mulsf3+0x12>
    3be0:	76 df       	rcall	.-276    	; 0x3ace <__fp_pscB>
    3be2:	18 f0       	brcs	.+6      	; 0x3bea <__mulsf3+0x12>
    3be4:	95 23       	and	r25, r21
    3be6:	09 f0       	breq	.+2      	; 0x3bea <__mulsf3+0x12>
    3be8:	2c cf       	rjmp	.-424    	; 0x3a42 <__fp_inf>
    3bea:	31 cf       	rjmp	.-414    	; 0x3a4e <__fp_nan>
    3bec:	11 24       	eor	r1, r1
    3bee:	e3 cf       	rjmp	.-58     	; 0x3bb6 <__fp_szero>

00003bf0 <__mulsf3x>:
    3bf0:	bf df       	rcall	.-130    	; 0x3b70 <__fp_split3>
    3bf2:	a0 f3       	brcs	.-24     	; 0x3bdc <__mulsf3+0x4>

00003bf4 <__mulsf3_pse>:
    3bf4:	95 9f       	mul	r25, r21
    3bf6:	d1 f3       	breq	.-12     	; 0x3bec <__mulsf3+0x14>
    3bf8:	95 0f       	add	r25, r21
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	55 1f       	adc	r21, r21
    3bfe:	62 9f       	mul	r22, r18
    3c00:	f0 01       	movw	r30, r0
    3c02:	72 9f       	mul	r23, r18
    3c04:	bb 27       	eor	r27, r27
    3c06:	f0 0d       	add	r31, r0
    3c08:	b1 1d       	adc	r27, r1
    3c0a:	63 9f       	mul	r22, r19
    3c0c:	aa 27       	eor	r26, r26
    3c0e:	f0 0d       	add	r31, r0
    3c10:	b1 1d       	adc	r27, r1
    3c12:	aa 1f       	adc	r26, r26
    3c14:	64 9f       	mul	r22, r20
    3c16:	66 27       	eor	r22, r22
    3c18:	b0 0d       	add	r27, r0
    3c1a:	a1 1d       	adc	r26, r1
    3c1c:	66 1f       	adc	r22, r22
    3c1e:	82 9f       	mul	r24, r18
    3c20:	22 27       	eor	r18, r18
    3c22:	b0 0d       	add	r27, r0
    3c24:	a1 1d       	adc	r26, r1
    3c26:	62 1f       	adc	r22, r18
    3c28:	73 9f       	mul	r23, r19
    3c2a:	b0 0d       	add	r27, r0
    3c2c:	a1 1d       	adc	r26, r1
    3c2e:	62 1f       	adc	r22, r18
    3c30:	83 9f       	mul	r24, r19
    3c32:	a0 0d       	add	r26, r0
    3c34:	61 1d       	adc	r22, r1
    3c36:	22 1f       	adc	r18, r18
    3c38:	74 9f       	mul	r23, r20
    3c3a:	33 27       	eor	r19, r19
    3c3c:	a0 0d       	add	r26, r0
    3c3e:	61 1d       	adc	r22, r1
    3c40:	23 1f       	adc	r18, r19
    3c42:	84 9f       	mul	r24, r20
    3c44:	60 0d       	add	r22, r0
    3c46:	21 1d       	adc	r18, r1
    3c48:	82 2f       	mov	r24, r18
    3c4a:	76 2f       	mov	r23, r22
    3c4c:	6a 2f       	mov	r22, r26
    3c4e:	11 24       	eor	r1, r1
    3c50:	9f 57       	subi	r25, 0x7F	; 127
    3c52:	50 40       	sbci	r21, 0x00	; 0
    3c54:	8a f0       	brmi	.+34     	; 0x3c78 <__mulsf3_pse+0x84>
    3c56:	e1 f0       	breq	.+56     	; 0x3c90 <__mulsf3_pse+0x9c>
    3c58:	88 23       	and	r24, r24
    3c5a:	4a f0       	brmi	.+18     	; 0x3c6e <__mulsf3_pse+0x7a>
    3c5c:	ee 0f       	add	r30, r30
    3c5e:	ff 1f       	adc	r31, r31
    3c60:	bb 1f       	adc	r27, r27
    3c62:	66 1f       	adc	r22, r22
    3c64:	77 1f       	adc	r23, r23
    3c66:	88 1f       	adc	r24, r24
    3c68:	91 50       	subi	r25, 0x01	; 1
    3c6a:	50 40       	sbci	r21, 0x00	; 0
    3c6c:	a9 f7       	brne	.-22     	; 0x3c58 <__mulsf3_pse+0x64>
    3c6e:	9e 3f       	cpi	r25, 0xFE	; 254
    3c70:	51 05       	cpc	r21, r1
    3c72:	70 f0       	brcs	.+28     	; 0x3c90 <__mulsf3_pse+0x9c>
    3c74:	e6 ce       	rjmp	.-564    	; 0x3a42 <__fp_inf>
    3c76:	9f cf       	rjmp	.-194    	; 0x3bb6 <__fp_szero>
    3c78:	5f 3f       	cpi	r21, 0xFF	; 255
    3c7a:	ec f3       	brlt	.-6      	; 0x3c76 <__mulsf3_pse+0x82>
    3c7c:	98 3e       	cpi	r25, 0xE8	; 232
    3c7e:	dc f3       	brlt	.-10     	; 0x3c76 <__mulsf3_pse+0x82>
    3c80:	86 95       	lsr	r24
    3c82:	77 95       	ror	r23
    3c84:	67 95       	ror	r22
    3c86:	b7 95       	ror	r27
    3c88:	f7 95       	ror	r31
    3c8a:	e7 95       	ror	r30
    3c8c:	9f 5f       	subi	r25, 0xFF	; 255
    3c8e:	c1 f7       	brne	.-16     	; 0x3c80 <__mulsf3_pse+0x8c>
    3c90:	fe 2b       	or	r31, r30
    3c92:	88 0f       	add	r24, r24
    3c94:	91 1d       	adc	r25, r1
    3c96:	96 95       	lsr	r25
    3c98:	87 95       	ror	r24
    3c9a:	97 f9       	bld	r25, 7
    3c9c:	08 95       	ret

00003c9e <pow>:
    3c9e:	fa 01       	movw	r30, r20
    3ca0:	ee 0f       	add	r30, r30
    3ca2:	ff 1f       	adc	r31, r31
    3ca4:	30 96       	adiw	r30, 0x00	; 0
    3ca6:	21 05       	cpc	r18, r1
    3ca8:	31 05       	cpc	r19, r1
    3caa:	99 f1       	breq	.+102    	; 0x3d12 <pow+0x74>
    3cac:	61 15       	cp	r22, r1
    3cae:	71 05       	cpc	r23, r1
    3cb0:	61 f4       	brne	.+24     	; 0x3cca <pow+0x2c>
    3cb2:	80 38       	cpi	r24, 0x80	; 128
    3cb4:	bf e3       	ldi	r27, 0x3F	; 63
    3cb6:	9b 07       	cpc	r25, r27
    3cb8:	49 f1       	breq	.+82     	; 0x3d0c <pow+0x6e>
    3cba:	68 94       	set
    3cbc:	90 38       	cpi	r25, 0x80	; 128
    3cbe:	81 05       	cpc	r24, r1
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <pow+0x3c>
    3cc2:	80 38       	cpi	r24, 0x80	; 128
    3cc4:	bf ef       	ldi	r27, 0xFF	; 255
    3cc6:	9b 07       	cpc	r25, r27
    3cc8:	41 f0       	breq	.+16     	; 0x3cda <pow+0x3c>
    3cca:	99 23       	and	r25, r25
    3ccc:	42 f5       	brpl	.+80     	; 0x3d1e <pow+0x80>
    3cce:	ff 3f       	cpi	r31, 0xFF	; 255
    3cd0:	e1 05       	cpc	r30, r1
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	21 05       	cpc	r18, r1
    3cd6:	11 f1       	breq	.+68     	; 0x3d1c <pow+0x7e>
    3cd8:	e8 94       	clt
    3cda:	08 94       	sec
    3cdc:	e7 95       	ror	r30
    3cde:	d9 01       	movw	r26, r18
    3ce0:	aa 23       	and	r26, r26
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <pow+0x50>
    3ce4:	ab 2f       	mov	r26, r27
    3ce6:	be 2f       	mov	r27, r30
    3ce8:	f8 5f       	subi	r31, 0xF8	; 248
    3cea:	d0 f3       	brcs	.-12     	; 0x3ce0 <pow+0x42>
    3cec:	10 c0       	rjmp	.+32     	; 0x3d0e <pow+0x70>
    3cee:	ff 5f       	subi	r31, 0xFF	; 255
    3cf0:	70 f4       	brcc	.+28     	; 0x3d0e <pow+0x70>
    3cf2:	a6 95       	lsr	r26
    3cf4:	e0 f7       	brcc	.-8      	; 0x3cee <pow+0x50>
    3cf6:	f7 39       	cpi	r31, 0x97	; 151
    3cf8:	50 f0       	brcs	.+20     	; 0x3d0e <pow+0x70>
    3cfa:	19 f0       	breq	.+6      	; 0x3d02 <pow+0x64>
    3cfc:	ff 3a       	cpi	r31, 0xAF	; 175
    3cfe:	38 f4       	brcc	.+14     	; 0x3d0e <pow+0x70>
    3d00:	9f 77       	andi	r25, 0x7F	; 127
    3d02:	9f 93       	push	r25
    3d04:	0c d0       	rcall	.+24     	; 0x3d1e <pow+0x80>
    3d06:	0f 90       	pop	r0
    3d08:	07 fc       	sbrc	r0, 7
    3d0a:	90 58       	subi	r25, 0x80	; 128
    3d0c:	08 95       	ret
    3d0e:	3e f0       	brts	.+14     	; 0x3d1e <pow+0x80>
    3d10:	9e ce       	rjmp	.-708    	; 0x3a4e <__fp_nan>
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	70 e0       	ldi	r23, 0x00	; 0
    3d16:	80 e8       	ldi	r24, 0x80	; 128
    3d18:	9f e3       	ldi	r25, 0x3F	; 63
    3d1a:	08 95       	ret
    3d1c:	4f e7       	ldi	r20, 0x7F	; 127
    3d1e:	9f 77       	andi	r25, 0x7F	; 127
    3d20:	5f 93       	push	r21
    3d22:	4f 93       	push	r20
    3d24:	3f 93       	push	r19
    3d26:	2f 93       	push	r18
    3d28:	d2 d0       	rcall	.+420    	; 0x3ece <log>
    3d2a:	2f 91       	pop	r18
    3d2c:	3f 91       	pop	r19
    3d2e:	4f 91       	pop	r20
    3d30:	5f 91       	pop	r21
    3d32:	52 df       	rcall	.-348    	; 0x3bd8 <__mulsf3>
    3d34:	50 c0       	rjmp	.+160    	; 0x3dd6 <exp>

00003d36 <sin>:
    3d36:	9f 93       	push	r25
    3d38:	d2 de       	rcall	.-604    	; 0x3ade <__fp_rempio2>
    3d3a:	0f 90       	pop	r0
    3d3c:	07 fc       	sbrc	r0, 7
    3d3e:	ee 5f       	subi	r30, 0xFE	; 254
    3d40:	06 cf       	rjmp	.-500    	; 0x3b4e <__fp_sinus>
    3d42:	11 f4       	brne	.+4      	; 0x3d48 <sin+0x12>
    3d44:	0e f4       	brtc	.+2      	; 0x3d48 <sin+0x12>
    3d46:	83 ce       	rjmp	.-762    	; 0x3a4e <__fp_nan>
    3d48:	72 c0       	rjmp	.+228    	; 0x3e2e <__fp_mpack>

00003d4a <sqrt>:
    3d4a:	1a df       	rcall	.-460    	; 0x3b80 <__fp_splitA>
    3d4c:	d0 f3       	brcs	.-12     	; 0x3d42 <sin+0xc>
    3d4e:	99 23       	and	r25, r25
    3d50:	d9 f3       	breq	.-10     	; 0x3d48 <sin+0x12>
    3d52:	ce f3       	brts	.-14     	; 0x3d46 <sin+0x10>
    3d54:	9f 57       	subi	r25, 0x7F	; 127
    3d56:	55 0b       	sbc	r21, r21
    3d58:	87 ff       	sbrs	r24, 7
    3d5a:	77 d0       	rcall	.+238    	; 0x3e4a <__fp_norm2>
    3d5c:	00 24       	eor	r0, r0
    3d5e:	a0 e6       	ldi	r26, 0x60	; 96
    3d60:	40 ea       	ldi	r20, 0xA0	; 160
    3d62:	90 01       	movw	r18, r0
    3d64:	80 58       	subi	r24, 0x80	; 128
    3d66:	56 95       	lsr	r21
    3d68:	97 95       	ror	r25
    3d6a:	28 f4       	brcc	.+10     	; 0x3d76 <sqrt+0x2c>
    3d6c:	80 5c       	subi	r24, 0xC0	; 192
    3d6e:	66 0f       	add	r22, r22
    3d70:	77 1f       	adc	r23, r23
    3d72:	88 1f       	adc	r24, r24
    3d74:	20 f0       	brcs	.+8      	; 0x3d7e <sqrt+0x34>
    3d76:	26 17       	cp	r18, r22
    3d78:	37 07       	cpc	r19, r23
    3d7a:	48 07       	cpc	r20, r24
    3d7c:	30 f4       	brcc	.+12     	; 0x3d8a <sqrt+0x40>
    3d7e:	62 1b       	sub	r22, r18
    3d80:	73 0b       	sbc	r23, r19
    3d82:	84 0b       	sbc	r24, r20
    3d84:	20 29       	or	r18, r0
    3d86:	31 29       	or	r19, r1
    3d88:	4a 2b       	or	r20, r26
    3d8a:	a6 95       	lsr	r26
    3d8c:	17 94       	ror	r1
    3d8e:	07 94       	ror	r0
    3d90:	20 25       	eor	r18, r0
    3d92:	31 25       	eor	r19, r1
    3d94:	4a 27       	eor	r20, r26
    3d96:	58 f7       	brcc	.-42     	; 0x3d6e <sqrt+0x24>
    3d98:	66 0f       	add	r22, r22
    3d9a:	77 1f       	adc	r23, r23
    3d9c:	88 1f       	adc	r24, r24
    3d9e:	20 f0       	brcs	.+8      	; 0x3da8 <sqrt+0x5e>
    3da0:	26 17       	cp	r18, r22
    3da2:	37 07       	cpc	r19, r23
    3da4:	48 07       	cpc	r20, r24
    3da6:	30 f4       	brcc	.+12     	; 0x3db4 <sqrt+0x6a>
    3da8:	62 0b       	sbc	r22, r18
    3daa:	73 0b       	sbc	r23, r19
    3dac:	84 0b       	sbc	r24, r20
    3dae:	20 0d       	add	r18, r0
    3db0:	31 1d       	adc	r19, r1
    3db2:	41 1d       	adc	r20, r1
    3db4:	a0 95       	com	r26
    3db6:	81 f7       	brne	.-32     	; 0x3d98 <sqrt+0x4e>
    3db8:	b9 01       	movw	r22, r18
    3dba:	84 2f       	mov	r24, r20
    3dbc:	91 58       	subi	r25, 0x81	; 129
    3dbe:	88 0f       	add	r24, r24
    3dc0:	96 95       	lsr	r25
    3dc2:	87 95       	ror	r24
    3dc4:	08 95       	ret

00003dc6 <square>:
    3dc6:	9b 01       	movw	r18, r22
    3dc8:	ac 01       	movw	r20, r24
    3dca:	06 cf       	rjmp	.-500    	; 0x3bd8 <__mulsf3>
    3dcc:	19 f4       	brne	.+6      	; 0x3dd4 <square+0xe>
    3dce:	0e f0       	brts	.+2      	; 0x3dd2 <square+0xc>
    3dd0:	38 ce       	rjmp	.-912    	; 0x3a42 <__fp_inf>
    3dd2:	f0 ce       	rjmp	.-544    	; 0x3bb4 <__fp_zero>
    3dd4:	3c ce       	rjmp	.-904    	; 0x3a4e <__fp_nan>

00003dd6 <exp>:
    3dd6:	d4 de       	rcall	.-600    	; 0x3b80 <__fp_splitA>
    3dd8:	c8 f3       	brcs	.-14     	; 0x3dcc <square+0x6>
    3dda:	96 38       	cpi	r25, 0x86	; 134
    3ddc:	c0 f7       	brcc	.-16     	; 0x3dce <square+0x8>
    3dde:	07 f8       	bld	r0, 7
    3de0:	0f 92       	push	r0
    3de2:	e8 94       	clt
    3de4:	2b e3       	ldi	r18, 0x3B	; 59
    3de6:	3a ea       	ldi	r19, 0xAA	; 170
    3de8:	48 eb       	ldi	r20, 0xB8	; 184
    3dea:	5f e7       	ldi	r21, 0x7F	; 127
    3dec:	03 df       	rcall	.-506    	; 0x3bf4 <__mulsf3_pse>
    3dee:	0f 92       	push	r0
    3df0:	0f 92       	push	r0
    3df2:	0f 92       	push	r0
    3df4:	4d b7       	in	r20, 0x3d	; 61
    3df6:	5e b7       	in	r21, 0x3e	; 62
    3df8:	0f 92       	push	r0
    3dfa:	a9 d0       	rcall	.+338    	; 0x3f4e <modf>
    3dfc:	ed ef       	ldi	r30, 0xFD	; 253
    3dfe:	f2 e0       	ldi	r31, 0x02	; 2
    3e00:	29 de       	rcall	.-942    	; 0x3a54 <__fp_powser>
    3e02:	4f 91       	pop	r20
    3e04:	5f 91       	pop	r21
    3e06:	ef 91       	pop	r30
    3e08:	ff 91       	pop	r31
    3e0a:	e5 95       	asr	r30
    3e0c:	ee 1f       	adc	r30, r30
    3e0e:	ff 1f       	adc	r31, r31
    3e10:	49 f0       	breq	.+18     	; 0x3e24 <exp+0x4e>
    3e12:	fe 57       	subi	r31, 0x7E	; 126
    3e14:	e0 68       	ori	r30, 0x80	; 128
    3e16:	44 27       	eor	r20, r20
    3e18:	ee 0f       	add	r30, r30
    3e1a:	44 1f       	adc	r20, r20
    3e1c:	fa 95       	dec	r31
    3e1e:	e1 f7       	brne	.-8      	; 0x3e18 <exp+0x42>
    3e20:	41 95       	neg	r20
    3e22:	55 0b       	sbc	r21, r21
    3e24:	1b d0       	rcall	.+54     	; 0x3e5c <ldexp>
    3e26:	0f 90       	pop	r0
    3e28:	07 fe       	sbrs	r0, 7
    3e2a:	cf ce       	rjmp	.-610    	; 0x3bca <inverse>
    3e2c:	08 95       	ret

00003e2e <__fp_mpack>:
    3e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    3e30:	31 f0       	breq	.+12     	; 0x3e3e <__fp_mpack_finite+0xc>

00003e32 <__fp_mpack_finite>:
    3e32:	91 50       	subi	r25, 0x01	; 1
    3e34:	20 f4       	brcc	.+8      	; 0x3e3e <__fp_mpack_finite+0xc>
    3e36:	87 95       	ror	r24
    3e38:	77 95       	ror	r23
    3e3a:	67 95       	ror	r22
    3e3c:	b7 95       	ror	r27
    3e3e:	88 0f       	add	r24, r24
    3e40:	91 1d       	adc	r25, r1
    3e42:	96 95       	lsr	r25
    3e44:	87 95       	ror	r24
    3e46:	97 f9       	bld	r25, 7
    3e48:	08 95       	ret

00003e4a <__fp_norm2>:
    3e4a:	91 50       	subi	r25, 0x01	; 1
    3e4c:	50 40       	sbci	r21, 0x00	; 0
    3e4e:	66 0f       	add	r22, r22
    3e50:	77 1f       	adc	r23, r23
    3e52:	88 1f       	adc	r24, r24
    3e54:	d2 f7       	brpl	.-12     	; 0x3e4a <__fp_norm2>
    3e56:	08 95       	ret
    3e58:	f4 cd       	rjmp	.-1048   	; 0x3a42 <__fp_inf>
    3e5a:	e9 cf       	rjmp	.-46     	; 0x3e2e <__fp_mpack>

00003e5c <ldexp>:
    3e5c:	91 de       	rcall	.-734    	; 0x3b80 <__fp_splitA>
    3e5e:	e8 f3       	brcs	.-6      	; 0x3e5a <__fp_norm2+0x10>
    3e60:	99 23       	and	r25, r25
    3e62:	d9 f3       	breq	.-10     	; 0x3e5a <__fp_norm2+0x10>
    3e64:	94 0f       	add	r25, r20
    3e66:	51 1d       	adc	r21, r1
    3e68:	bb f3       	brvs	.-18     	; 0x3e58 <__fp_norm2+0xe>
    3e6a:	91 50       	subi	r25, 0x01	; 1
    3e6c:	50 40       	sbci	r21, 0x00	; 0
    3e6e:	94 f0       	brlt	.+36     	; 0x3e94 <ldexp+0x38>
    3e70:	59 f0       	breq	.+22     	; 0x3e88 <ldexp+0x2c>
    3e72:	88 23       	and	r24, r24
    3e74:	32 f0       	brmi	.+12     	; 0x3e82 <ldexp+0x26>
    3e76:	66 0f       	add	r22, r22
    3e78:	77 1f       	adc	r23, r23
    3e7a:	88 1f       	adc	r24, r24
    3e7c:	91 50       	subi	r25, 0x01	; 1
    3e7e:	50 40       	sbci	r21, 0x00	; 0
    3e80:	c1 f7       	brne	.-16     	; 0x3e72 <ldexp+0x16>
    3e82:	9e 3f       	cpi	r25, 0xFE	; 254
    3e84:	51 05       	cpc	r21, r1
    3e86:	44 f7       	brge	.-48     	; 0x3e58 <__fp_norm2+0xe>
    3e88:	88 0f       	add	r24, r24
    3e8a:	91 1d       	adc	r25, r1
    3e8c:	96 95       	lsr	r25
    3e8e:	87 95       	ror	r24
    3e90:	97 f9       	bld	r25, 7
    3e92:	08 95       	ret
    3e94:	5f 3f       	cpi	r21, 0xFF	; 255
    3e96:	ac f0       	brlt	.+42     	; 0x3ec2 <ldexp+0x66>
    3e98:	98 3e       	cpi	r25, 0xE8	; 232
    3e9a:	9c f0       	brlt	.+38     	; 0x3ec2 <ldexp+0x66>
    3e9c:	bb 27       	eor	r27, r27
    3e9e:	86 95       	lsr	r24
    3ea0:	77 95       	ror	r23
    3ea2:	67 95       	ror	r22
    3ea4:	b7 95       	ror	r27
    3ea6:	08 f4       	brcc	.+2      	; 0x3eaa <ldexp+0x4e>
    3ea8:	b1 60       	ori	r27, 0x01	; 1
    3eaa:	93 95       	inc	r25
    3eac:	c1 f7       	brne	.-16     	; 0x3e9e <ldexp+0x42>
    3eae:	bb 0f       	add	r27, r27
    3eb0:	58 f7       	brcc	.-42     	; 0x3e88 <ldexp+0x2c>
    3eb2:	11 f4       	brne	.+4      	; 0x3eb8 <ldexp+0x5c>
    3eb4:	60 ff       	sbrs	r22, 0
    3eb6:	e8 cf       	rjmp	.-48     	; 0x3e88 <ldexp+0x2c>
    3eb8:	6f 5f       	subi	r22, 0xFF	; 255
    3eba:	7f 4f       	sbci	r23, 0xFF	; 255
    3ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec0:	e3 cf       	rjmp	.-58     	; 0x3e88 <ldexp+0x2c>
    3ec2:	79 ce       	rjmp	.-782    	; 0x3bb6 <__fp_szero>
    3ec4:	0e f0       	brts	.+2      	; 0x3ec8 <ldexp+0x6c>
    3ec6:	b3 cf       	rjmp	.-154    	; 0x3e2e <__fp_mpack>
    3ec8:	c2 cd       	rjmp	.-1148   	; 0x3a4e <__fp_nan>
    3eca:	68 94       	set
    3ecc:	ba cd       	rjmp	.-1164   	; 0x3a42 <__fp_inf>

00003ece <log>:
    3ece:	58 de       	rcall	.-848    	; 0x3b80 <__fp_splitA>
    3ed0:	c8 f3       	brcs	.-14     	; 0x3ec4 <ldexp+0x68>
    3ed2:	99 23       	and	r25, r25
    3ed4:	d1 f3       	breq	.-12     	; 0x3eca <ldexp+0x6e>
    3ed6:	c6 f3       	brts	.-16     	; 0x3ec8 <ldexp+0x6c>
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	1f 93       	push	r17
    3ede:	0f 93       	push	r16
    3ee0:	ff 92       	push	r15
    3ee2:	c9 2f       	mov	r28, r25
    3ee4:	dd 27       	eor	r29, r29
    3ee6:	88 23       	and	r24, r24
    3ee8:	2a f0       	brmi	.+10     	; 0x3ef4 <log+0x26>
    3eea:	21 97       	sbiw	r28, 0x01	; 1
    3eec:	66 0f       	add	r22, r22
    3eee:	77 1f       	adc	r23, r23
    3ef0:	88 1f       	adc	r24, r24
    3ef2:	da f7       	brpl	.-10     	; 0x3eea <log+0x1c>
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	40 e8       	ldi	r20, 0x80	; 128
    3efa:	5f eb       	ldi	r21, 0xBF	; 191
    3efc:	9f e3       	ldi	r25, 0x3F	; 63
    3efe:	88 39       	cpi	r24, 0x98	; 152
    3f00:	20 f0       	brcs	.+8      	; 0x3f0a <log+0x3c>
    3f02:	80 3e       	cpi	r24, 0xE0	; 224
    3f04:	30 f0       	brcs	.+12     	; 0x3f12 <log+0x44>
    3f06:	21 96       	adiw	r28, 0x01	; 1
    3f08:	8f 77       	andi	r24, 0x7F	; 127
    3f0a:	a7 db       	rcall	.-2226   	; 0x365a <__addsf3>
    3f0c:	e5 e2       	ldi	r30, 0x25	; 37
    3f0e:	f3 e0       	ldi	r31, 0x03	; 3
    3f10:	03 c0       	rjmp	.+6      	; 0x3f18 <log+0x4a>
    3f12:	a3 db       	rcall	.-2234   	; 0x365a <__addsf3>
    3f14:	e2 e5       	ldi	r30, 0x52	; 82
    3f16:	f3 e0       	ldi	r31, 0x03	; 3
    3f18:	9d dd       	rcall	.-1222   	; 0x3a54 <__fp_powser>
    3f1a:	8b 01       	movw	r16, r22
    3f1c:	be 01       	movw	r22, r28
    3f1e:	ec 01       	movw	r28, r24
    3f20:	fb 2e       	mov	r15, r27
    3f22:	6f 57       	subi	r22, 0x7F	; 127
    3f24:	71 09       	sbc	r23, r1
    3f26:	75 95       	asr	r23
    3f28:	77 1f       	adc	r23, r23
    3f2a:	88 0b       	sbc	r24, r24
    3f2c:	99 0b       	sbc	r25, r25
    3f2e:	0f dd       	rcall	.-1506   	; 0x394e <__floatsisf>
    3f30:	28 e1       	ldi	r18, 0x18	; 24
    3f32:	32 e7       	ldi	r19, 0x72	; 114
    3f34:	41 e3       	ldi	r20, 0x31	; 49
    3f36:	5f e3       	ldi	r21, 0x3F	; 63
    3f38:	5b de       	rcall	.-842    	; 0x3bf0 <__mulsf3x>
    3f3a:	af 2d       	mov	r26, r15
    3f3c:	98 01       	movw	r18, r16
    3f3e:	ae 01       	movw	r20, r28
    3f40:	ff 90       	pop	r15
    3f42:	0f 91       	pop	r16
    3f44:	1f 91       	pop	r17
    3f46:	cf 91       	pop	r28
    3f48:	df 91       	pop	r29
    3f4a:	98 db       	rcall	.-2256   	; 0x367c <__addsf3x>
    3f4c:	ef cd       	rjmp	.-1058   	; 0x3b2c <__fp_round>

00003f4e <modf>:
    3f4e:	fa 01       	movw	r30, r20
    3f50:	dc 01       	movw	r26, r24
    3f52:	aa 0f       	add	r26, r26
    3f54:	bb 1f       	adc	r27, r27
    3f56:	9b 01       	movw	r18, r22
    3f58:	ac 01       	movw	r20, r24
    3f5a:	bf 57       	subi	r27, 0x7F	; 127
    3f5c:	28 f4       	brcc	.+10     	; 0x3f68 <modf+0x1a>
    3f5e:	22 27       	eor	r18, r18
    3f60:	33 27       	eor	r19, r19
    3f62:	44 27       	eor	r20, r20
    3f64:	50 78       	andi	r21, 0x80	; 128
    3f66:	1f c0       	rjmp	.+62     	; 0x3fa6 <modf+0x58>
    3f68:	b7 51       	subi	r27, 0x17	; 23
    3f6a:	88 f4       	brcc	.+34     	; 0x3f8e <modf+0x40>
    3f6c:	ab 2f       	mov	r26, r27
    3f6e:	00 24       	eor	r0, r0
    3f70:	46 95       	lsr	r20
    3f72:	37 95       	ror	r19
    3f74:	27 95       	ror	r18
    3f76:	01 1c       	adc	r0, r1
    3f78:	a3 95       	inc	r26
    3f7a:	d2 f3       	brmi	.-12     	; 0x3f70 <modf+0x22>
    3f7c:	00 20       	and	r0, r0
    3f7e:	69 f0       	breq	.+26     	; 0x3f9a <modf+0x4c>
    3f80:	22 0f       	add	r18, r18
    3f82:	33 1f       	adc	r19, r19
    3f84:	44 1f       	adc	r20, r20
    3f86:	b3 95       	inc	r27
    3f88:	da f3       	brmi	.-10     	; 0x3f80 <modf+0x32>
    3f8a:	0d d0       	rcall	.+26     	; 0x3fa6 <modf+0x58>
    3f8c:	65 cb       	rjmp	.-2358   	; 0x3658 <__subsf3>
    3f8e:	61 30       	cpi	r22, 0x01	; 1
    3f90:	71 05       	cpc	r23, r1
    3f92:	a0 e8       	ldi	r26, 0x80	; 128
    3f94:	8a 07       	cpc	r24, r26
    3f96:	b9 46       	sbci	r27, 0x69	; 105
    3f98:	30 f4       	brcc	.+12     	; 0x3fa6 <modf+0x58>
    3f9a:	9b 01       	movw	r18, r22
    3f9c:	ac 01       	movw	r20, r24
    3f9e:	66 27       	eor	r22, r22
    3fa0:	77 27       	eor	r23, r23
    3fa2:	88 27       	eor	r24, r24
    3fa4:	90 78       	andi	r25, 0x80	; 128
    3fa6:	30 96       	adiw	r30, 0x00	; 0
    3fa8:	21 f0       	breq	.+8      	; 0x3fb2 <modf+0x64>
    3faa:	20 83       	st	Z, r18
    3fac:	31 83       	std	Z+1, r19	; 0x01
    3fae:	42 83       	std	Z+2, r20	; 0x02
    3fb0:	53 83       	std	Z+3, r21	; 0x03
    3fb2:	08 95       	ret

00003fb4 <_ZN14HardwareSerial9availableEv>:
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	24 85       	ldd	r18, Z+12	; 0x0c
    3fb8:	35 85       	ldd	r19, Z+13	; 0x0d
    3fba:	f9 01       	movw	r30, r18
    3fbc:	e0 5c       	subi	r30, 0xC0	; 192
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	32 96       	adiw	r30, 0x02	; 2
    3fc6:	20 81       	ld	r18, Z
    3fc8:	31 81       	ldd	r19, Z+1	; 0x01
    3fca:	80 5c       	subi	r24, 0xC0	; 192
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	82 1b       	sub	r24, r18
    3fd0:	93 0b       	sbc	r25, r19
    3fd2:	8f 73       	andi	r24, 0x3F	; 63
    3fd4:	90 78       	andi	r25, 0x80	; 128
    3fd6:	99 23       	and	r25, r25
    3fd8:	24 f4       	brge	.+8      	; 0x3fe2 <_ZN14HardwareSerial9availableEv+0x2e>
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	80 6c       	ori	r24, 0xC0	; 192
    3fde:	9f 6f       	ori	r25, 0xFF	; 255
    3fe0:	01 96       	adiw	r24, 0x01	; 1
    3fe2:	08 95       	ret

00003fe4 <_ZN14HardwareSerial4peekEv>:
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	84 85       	ldd	r24, Z+12	; 0x0c
    3fe8:	95 85       	ldd	r25, Z+13	; 0x0d
    3fea:	fc 01       	movw	r30, r24
    3fec:	e0 5c       	subi	r30, 0xC0	; 192
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	40 81       	ld	r20, Z
    3ff2:	51 81       	ldd	r21, Z+1	; 0x01
    3ff4:	32 96       	adiw	r30, 0x02	; 2
    3ff6:	20 81       	ld	r18, Z
    3ff8:	31 81       	ldd	r19, Z+1	; 0x01
    3ffa:	42 17       	cp	r20, r18
    3ffc:	53 07       	cpc	r21, r19
    3ffe:	41 f0       	breq	.+16     	; 0x4010 <_ZN14HardwareSerial4peekEv+0x2c>
    4000:	20 81       	ld	r18, Z
    4002:	31 81       	ldd	r19, Z+1	; 0x01
    4004:	fc 01       	movw	r30, r24
    4006:	e2 0f       	add	r30, r18
    4008:	f3 1f       	adc	r31, r19
    400a:	80 81       	ld	r24, Z
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	08 95       	ret
    4010:	8f ef       	ldi	r24, 0xFF	; 255
    4012:	9f ef       	ldi	r25, 0xFF	; 255
    4014:	08 95       	ret

00004016 <_ZN14HardwareSerial4readEv>:
    4016:	fc 01       	movw	r30, r24
    4018:	84 85       	ldd	r24, Z+12	; 0x0c
    401a:	95 85       	ldd	r25, Z+13	; 0x0d
    401c:	fc 01       	movw	r30, r24
    401e:	e0 5c       	subi	r30, 0xC0	; 192
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	40 81       	ld	r20, Z
    4024:	51 81       	ldd	r21, Z+1	; 0x01
    4026:	32 96       	adiw	r30, 0x02	; 2
    4028:	20 81       	ld	r18, Z
    402a:	31 81       	ldd	r19, Z+1	; 0x01
    402c:	42 17       	cp	r20, r18
    402e:	53 07       	cpc	r21, r19
    4030:	81 f0       	breq	.+32     	; 0x4052 <_ZN14HardwareSerial4readEv+0x3c>
    4032:	20 81       	ld	r18, Z
    4034:	31 81       	ldd	r19, Z+1	; 0x01
    4036:	dc 01       	movw	r26, r24
    4038:	a2 0f       	add	r26, r18
    403a:	b3 1f       	adc	r27, r19
    403c:	8c 91       	ld	r24, X
    403e:	20 81       	ld	r18, Z
    4040:	31 81       	ldd	r19, Z+1	; 0x01
    4042:	2f 5f       	subi	r18, 0xFF	; 255
    4044:	3f 4f       	sbci	r19, 0xFF	; 255
    4046:	2f 73       	andi	r18, 0x3F	; 63
    4048:	33 27       	eor	r19, r19
    404a:	31 83       	std	Z+1, r19	; 0x01
    404c:	20 83       	st	Z, r18
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	08 95       	ret
    4052:	8f ef       	ldi	r24, 0xFF	; 255
    4054:	9f ef       	ldi	r25, 0xFF	; 255
    4056:	08 95       	ret

00004058 <_ZN14HardwareSerial5flushEv>:
    4058:	fc 01       	movw	r30, r24
    405a:	81 a1       	ldd	r24, Z+33	; 0x21
    405c:	88 23       	and	r24, r24
    405e:	29 f0       	breq	.+10     	; 0x406a <_ZN14HardwareSerial5flushEv+0x12>
    4060:	a4 89       	ldd	r26, Z+20	; 0x14
    4062:	b5 89       	ldd	r27, Z+21	; 0x15
    4064:	8c 91       	ld	r24, X
    4066:	86 ff       	sbrs	r24, 6
    4068:	fb cf       	rjmp	.-10     	; 0x4060 <_ZN14HardwareSerial5flushEv+0x8>
    406a:	11 a2       	std	Z+33, r1	; 0x21
    406c:	08 95       	ret

0000406e <_ZN14HardwareSerial5writeEh>:
    406e:	1f 93       	push	r17
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	ec 01       	movw	r28, r24
    4076:	8e 85       	ldd	r24, Y+14	; 0x0e
    4078:	9f 85       	ldd	r25, Y+15	; 0x0f
    407a:	fc 01       	movw	r30, r24
    407c:	e0 5c       	subi	r30, 0xC0	; 192
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	01 90       	ld	r0, Z+
    4082:	f0 81       	ld	r31, Z
    4084:	e0 2d       	mov	r30, r0
    4086:	31 96       	adiw	r30, 0x01	; 1
    4088:	ef 73       	andi	r30, 0x3F	; 63
    408a:	ff 27       	eor	r31, r31
    408c:	1e 2f       	mov	r17, r30
    408e:	7f 2f       	mov	r23, r31
    4090:	dc 01       	movw	r26, r24
    4092:	ae 5b       	subi	r26, 0xBE	; 190
    4094:	bf 4f       	sbci	r27, 0xFF	; 255
    4096:	21 2f       	mov	r18, r17
    4098:	37 2f       	mov	r19, r23
    409a:	4d 91       	ld	r20, X+
    409c:	5c 91       	ld	r21, X
    409e:	11 97       	sbiw	r26, 0x01	; 1
    40a0:	e4 17       	cp	r30, r20
    40a2:	f5 07       	cpc	r31, r21
    40a4:	c1 f3       	breq	.-16     	; 0x4096 <_ZN14HardwareSerial5writeEh+0x28>
    40a6:	fc 01       	movw	r30, r24
    40a8:	e0 5c       	subi	r30, 0xC0	; 192
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	40 81       	ld	r20, Z
    40ae:	51 81       	ldd	r21, Z+1	; 0x01
    40b0:	fc 01       	movw	r30, r24
    40b2:	e4 0f       	add	r30, r20
    40b4:	f5 1f       	adc	r31, r21
    40b6:	60 83       	st	Z, r22
    40b8:	ee 85       	ldd	r30, Y+14	; 0x0e
    40ba:	ff 85       	ldd	r31, Y+15	; 0x0f
    40bc:	e0 5c       	subi	r30, 0xC0	; 192
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	31 83       	std	Z+1, r19	; 0x01
    40c2:	20 83       	st	Z, r18
    40c4:	ee 89       	ldd	r30, Y+22	; 0x16
    40c6:	ff 89       	ldd	r31, Y+23	; 0x17
    40c8:	40 81       	ld	r20, Z
    40ca:	21 e0       	ldi	r18, 0x01	; 1
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	c9 01       	movw	r24, r18
    40d0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    40d2:	02 c0       	rjmp	.+4      	; 0x40d8 <_ZN14HardwareSerial5writeEh+0x6a>
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	0a 94       	dec	r0
    40da:	e2 f7       	brpl	.-8      	; 0x40d4 <_ZN14HardwareSerial5writeEh+0x66>
    40dc:	84 2b       	or	r24, r20
    40de:	80 83       	st	Z, r24
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	89 a3       	std	Y+33, r24	; 0x21
    40e4:	ec 89       	ldd	r30, Y+20	; 0x14
    40e6:	fd 89       	ldd	r31, Y+21	; 0x15
    40e8:	80 81       	ld	r24, Z
    40ea:	80 64       	ori	r24, 0x40	; 64
    40ec:	80 83       	st	Z, r24
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	08 95       	ret

000040fa <__vector_25>:
    40fa:	1f 92       	push	r1
    40fc:	0f 92       	push	r0
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	0f 92       	push	r0
    4102:	11 24       	eor	r1, r1
    4104:	0b b6       	in	r0, 0x3b	; 59
    4106:	0f 92       	push	r0
    4108:	2f 93       	push	r18
    410a:	3f 93       	push	r19
    410c:	4f 93       	push	r20
    410e:	8f 93       	push	r24
    4110:	9f 93       	push	r25
    4112:	af 93       	push	r26
    4114:	bf 93       	push	r27
    4116:	ef 93       	push	r30
    4118:	ff 93       	push	r31
    411a:	80 91 c0 00 	lds	r24, 0x00C0
    411e:	82 fd       	sbrc	r24, 2
    4120:	1a c0       	rjmp	.+52     	; 0x4156 <__vector_25+0x5c>
    4122:	40 91 c6 00 	lds	r20, 0x00C6
    4126:	80 91 eb 11 	lds	r24, 0x11EB
    412a:	90 91 ec 11 	lds	r25, 0x11EC
    412e:	01 96       	adiw	r24, 0x01	; 1
    4130:	8f 73       	andi	r24, 0x3F	; 63
    4132:	99 27       	eor	r25, r25
    4134:	20 91 ed 11 	lds	r18, 0x11ED
    4138:	30 91 ee 11 	lds	r19, 0x11EE
    413c:	82 17       	cp	r24, r18
    413e:	93 07       	cpc	r25, r19
    4140:	61 f0       	breq	.+24     	; 0x415a <__vector_25+0x60>
    4142:	eb ee       	ldi	r30, 0xEB	; 235
    4144:	f1 e1       	ldi	r31, 0x11	; 17
    4146:	a0 81       	ld	r26, Z
    4148:	b1 81       	ldd	r27, Z+1	; 0x01
    414a:	a5 55       	subi	r26, 0x55	; 85
    414c:	be 4e       	sbci	r27, 0xEE	; 238
    414e:	4c 93       	st	X, r20
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	80 83       	st	Z, r24
    4154:	02 c0       	rjmp	.+4      	; 0x415a <__vector_25+0x60>
    4156:	80 91 c6 00 	lds	r24, 0x00C6
    415a:	ff 91       	pop	r31
    415c:	ef 91       	pop	r30
    415e:	bf 91       	pop	r27
    4160:	af 91       	pop	r26
    4162:	9f 91       	pop	r25
    4164:	8f 91       	pop	r24
    4166:	4f 91       	pop	r20
    4168:	3f 91       	pop	r19
    416a:	2f 91       	pop	r18
    416c:	0f 90       	pop	r0
    416e:	0b be       	out	0x3b, r0	; 59
    4170:	0f 90       	pop	r0
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	0f 90       	pop	r0
    4176:	1f 90       	pop	r1
    4178:	18 95       	reti

0000417a <__vector_36>:
    417a:	1f 92       	push	r1
    417c:	0f 92       	push	r0
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	0f 92       	push	r0
    4182:	11 24       	eor	r1, r1
    4184:	0b b6       	in	r0, 0x3b	; 59
    4186:	0f 92       	push	r0
    4188:	2f 93       	push	r18
    418a:	3f 93       	push	r19
    418c:	4f 93       	push	r20
    418e:	8f 93       	push	r24
    4190:	9f 93       	push	r25
    4192:	af 93       	push	r26
    4194:	bf 93       	push	r27
    4196:	ef 93       	push	r30
    4198:	ff 93       	push	r31
    419a:	80 91 c8 00 	lds	r24, 0x00C8
    419e:	82 fd       	sbrc	r24, 2
    41a0:	1a c0       	rjmp	.+52     	; 0x41d6 <__vector_36+0x5c>
    41a2:	40 91 ce 00 	lds	r20, 0x00CE
    41a6:	80 91 63 11 	lds	r24, 0x1163
    41aa:	90 91 64 11 	lds	r25, 0x1164
    41ae:	01 96       	adiw	r24, 0x01	; 1
    41b0:	8f 73       	andi	r24, 0x3F	; 63
    41b2:	99 27       	eor	r25, r25
    41b4:	20 91 65 11 	lds	r18, 0x1165
    41b8:	30 91 66 11 	lds	r19, 0x1166
    41bc:	82 17       	cp	r24, r18
    41be:	93 07       	cpc	r25, r19
    41c0:	61 f0       	breq	.+24     	; 0x41da <__vector_36+0x60>
    41c2:	e3 e6       	ldi	r30, 0x63	; 99
    41c4:	f1 e1       	ldi	r31, 0x11	; 17
    41c6:	a0 81       	ld	r26, Z
    41c8:	b1 81       	ldd	r27, Z+1	; 0x01
    41ca:	ad 5d       	subi	r26, 0xDD	; 221
    41cc:	be 4e       	sbci	r27, 0xEE	; 238
    41ce:	4c 93       	st	X, r20
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <__vector_36+0x60>
    41d6:	80 91 ce 00 	lds	r24, 0x00CE
    41da:	ff 91       	pop	r31
    41dc:	ef 91       	pop	r30
    41de:	bf 91       	pop	r27
    41e0:	af 91       	pop	r26
    41e2:	9f 91       	pop	r25
    41e4:	8f 91       	pop	r24
    41e6:	4f 91       	pop	r20
    41e8:	3f 91       	pop	r19
    41ea:	2f 91       	pop	r18
    41ec:	0f 90       	pop	r0
    41ee:	0b be       	out	0x3b, r0	; 59
    41f0:	0f 90       	pop	r0
    41f2:	0f be       	out	0x3f, r0	; 63
    41f4:	0f 90       	pop	r0
    41f6:	1f 90       	pop	r1
    41f8:	18 95       	reti

000041fa <__vector_26>:
    41fa:	1f 92       	push	r1
    41fc:	0f 92       	push	r0
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	0f 92       	push	r0
    4202:	11 24       	eor	r1, r1
    4204:	0b b6       	in	r0, 0x3b	; 59
    4206:	0f 92       	push	r0
    4208:	2f 93       	push	r18
    420a:	3f 93       	push	r19
    420c:	8f 93       	push	r24
    420e:	9f 93       	push	r25
    4210:	af 93       	push	r26
    4212:	bf 93       	push	r27
    4214:	ef 93       	push	r30
    4216:	ff 93       	push	r31
    4218:	20 91 a7 11 	lds	r18, 0x11A7
    421c:	30 91 a8 11 	lds	r19, 0x11A8
    4220:	80 91 a9 11 	lds	r24, 0x11A9
    4224:	90 91 aa 11 	lds	r25, 0x11AA
    4228:	28 17       	cp	r18, r24
    422a:	39 07       	cpc	r19, r25
    422c:	31 f4       	brne	.+12     	; 0x423a <__vector_26+0x40>
    422e:	e1 ec       	ldi	r30, 0xC1	; 193
    4230:	f0 e0       	ldi	r31, 0x00	; 0
    4232:	80 81       	ld	r24, Z
    4234:	8f 7d       	andi	r24, 0xDF	; 223
    4236:	80 83       	st	Z, r24
    4238:	10 c0       	rjmp	.+32     	; 0x425a <__vector_26+0x60>
    423a:	e9 ea       	ldi	r30, 0xA9	; 169
    423c:	f1 e1       	ldi	r31, 0x11	; 17
    423e:	a0 81       	ld	r26, Z
    4240:	b1 81       	ldd	r27, Z+1	; 0x01
    4242:	a9 59       	subi	r26, 0x99	; 153
    4244:	be 4e       	sbci	r27, 0xEE	; 238
    4246:	2c 91       	ld	r18, X
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	01 96       	adiw	r24, 0x01	; 1
    424e:	8f 73       	andi	r24, 0x3F	; 63
    4250:	99 27       	eor	r25, r25
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	80 83       	st	Z, r24
    4256:	20 93 c6 00 	sts	0x00C6, r18
    425a:	ff 91       	pop	r31
    425c:	ef 91       	pop	r30
    425e:	bf 91       	pop	r27
    4260:	af 91       	pop	r26
    4262:	9f 91       	pop	r25
    4264:	8f 91       	pop	r24
    4266:	3f 91       	pop	r19
    4268:	2f 91       	pop	r18
    426a:	0f 90       	pop	r0
    426c:	0b be       	out	0x3b, r0	; 59
    426e:	0f 90       	pop	r0
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	0f 90       	pop	r0
    4274:	1f 90       	pop	r1
    4276:	18 95       	reti

00004278 <__vector_37>:
    4278:	1f 92       	push	r1
    427a:	0f 92       	push	r0
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	0f 92       	push	r0
    4280:	11 24       	eor	r1, r1
    4282:	0b b6       	in	r0, 0x3b	; 59
    4284:	0f 92       	push	r0
    4286:	2f 93       	push	r18
    4288:	3f 93       	push	r19
    428a:	8f 93       	push	r24
    428c:	9f 93       	push	r25
    428e:	af 93       	push	r26
    4290:	bf 93       	push	r27
    4292:	ef 93       	push	r30
    4294:	ff 93       	push	r31
    4296:	20 91 1f 11 	lds	r18, 0x111F
    429a:	30 91 20 11 	lds	r19, 0x1120
    429e:	80 91 21 11 	lds	r24, 0x1121
    42a2:	90 91 22 11 	lds	r25, 0x1122
    42a6:	28 17       	cp	r18, r24
    42a8:	39 07       	cpc	r19, r25
    42aa:	31 f4       	brne	.+12     	; 0x42b8 <__vector_37+0x40>
    42ac:	e9 ec       	ldi	r30, 0xC9	; 201
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	80 81       	ld	r24, Z
    42b2:	8f 7d       	andi	r24, 0xDF	; 223
    42b4:	80 83       	st	Z, r24
    42b6:	10 c0       	rjmp	.+32     	; 0x42d8 <__vector_37+0x60>
    42b8:	e1 e2       	ldi	r30, 0x21	; 33
    42ba:	f1 e1       	ldi	r31, 0x11	; 17
    42bc:	a0 81       	ld	r26, Z
    42be:	b1 81       	ldd	r27, Z+1	; 0x01
    42c0:	a1 52       	subi	r26, 0x21	; 33
    42c2:	bf 4e       	sbci	r27, 0xEF	; 239
    42c4:	2c 91       	ld	r18, X
    42c6:	80 81       	ld	r24, Z
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	01 96       	adiw	r24, 0x01	; 1
    42cc:	8f 73       	andi	r24, 0x3F	; 63
    42ce:	99 27       	eor	r25, r25
    42d0:	91 83       	std	Z+1, r25	; 0x01
    42d2:	80 83       	st	Z, r24
    42d4:	20 93 ce 00 	sts	0x00CE, r18
    42d8:	ff 91       	pop	r31
    42da:	ef 91       	pop	r30
    42dc:	bf 91       	pop	r27
    42de:	af 91       	pop	r26
    42e0:	9f 91       	pop	r25
    42e2:	8f 91       	pop	r24
    42e4:	3f 91       	pop	r19
    42e6:	2f 91       	pop	r18
    42e8:	0f 90       	pop	r0
    42ea:	0b be       	out	0x3b, r0	; 59
    42ec:	0f 90       	pop	r0
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	0f 90       	pop	r0
    42f2:	1f 90       	pop	r1
    42f4:	18 95       	reti

000042f6 <__vector_52>:
    42f6:	1f 92       	push	r1
    42f8:	0f 92       	push	r0
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	0f 92       	push	r0
    42fe:	11 24       	eor	r1, r1
    4300:	0b b6       	in	r0, 0x3b	; 59
    4302:	0f 92       	push	r0
    4304:	2f 93       	push	r18
    4306:	3f 93       	push	r19
    4308:	8f 93       	push	r24
    430a:	9f 93       	push	r25
    430c:	af 93       	push	r26
    430e:	bf 93       	push	r27
    4310:	ef 93       	push	r30
    4312:	ff 93       	push	r31
    4314:	20 91 97 10 	lds	r18, 0x1097
    4318:	30 91 98 10 	lds	r19, 0x1098
    431c:	80 91 99 10 	lds	r24, 0x1099
    4320:	90 91 9a 10 	lds	r25, 0x109A
    4324:	28 17       	cp	r18, r24
    4326:	39 07       	cpc	r19, r25
    4328:	31 f4       	brne	.+12     	; 0x4336 <__vector_52+0x40>
    432a:	e1 ed       	ldi	r30, 0xD1	; 209
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	80 81       	ld	r24, Z
    4330:	8f 7d       	andi	r24, 0xDF	; 223
    4332:	80 83       	st	Z, r24
    4334:	10 c0       	rjmp	.+32     	; 0x4356 <__vector_52+0x60>
    4336:	e9 e9       	ldi	r30, 0x99	; 153
    4338:	f0 e1       	ldi	r31, 0x10	; 16
    433a:	a0 81       	ld	r26, Z
    433c:	b1 81       	ldd	r27, Z+1	; 0x01
    433e:	a9 5a       	subi	r26, 0xA9	; 169
    4340:	bf 4e       	sbci	r27, 0xEF	; 239
    4342:	2c 91       	ld	r18, X
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	01 96       	adiw	r24, 0x01	; 1
    434a:	8f 73       	andi	r24, 0x3F	; 63
    434c:	99 27       	eor	r25, r25
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	80 83       	st	Z, r24
    4352:	20 93 d6 00 	sts	0x00D6, r18
    4356:	ff 91       	pop	r31
    4358:	ef 91       	pop	r30
    435a:	bf 91       	pop	r27
    435c:	af 91       	pop	r26
    435e:	9f 91       	pop	r25
    4360:	8f 91       	pop	r24
    4362:	3f 91       	pop	r19
    4364:	2f 91       	pop	r18
    4366:	0f 90       	pop	r0
    4368:	0b be       	out	0x3b, r0	; 59
    436a:	0f 90       	pop	r0
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	0f 90       	pop	r0
    4370:	1f 90       	pop	r1
    4372:	18 95       	reti

00004374 <__vector_55>:
    4374:	1f 92       	push	r1
    4376:	0f 92       	push	r0
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	0f 92       	push	r0
    437c:	11 24       	eor	r1, r1
    437e:	0b b6       	in	r0, 0x3b	; 59
    4380:	0f 92       	push	r0
    4382:	2f 93       	push	r18
    4384:	3f 93       	push	r19
    4386:	8f 93       	push	r24
    4388:	9f 93       	push	r25
    438a:	af 93       	push	r26
    438c:	bf 93       	push	r27
    438e:	ef 93       	push	r30
    4390:	ff 93       	push	r31
    4392:	20 91 0f 10 	lds	r18, 0x100F
    4396:	30 91 10 10 	lds	r19, 0x1010
    439a:	80 91 11 10 	lds	r24, 0x1011
    439e:	90 91 12 10 	lds	r25, 0x1012
    43a2:	28 17       	cp	r18, r24
    43a4:	39 07       	cpc	r19, r25
    43a6:	31 f4       	brne	.+12     	; 0x43b4 <__vector_55+0x40>
    43a8:	e1 e3       	ldi	r30, 0x31	; 49
    43aa:	f1 e0       	ldi	r31, 0x01	; 1
    43ac:	80 81       	ld	r24, Z
    43ae:	8f 7d       	andi	r24, 0xDF	; 223
    43b0:	80 83       	st	Z, r24
    43b2:	10 c0       	rjmp	.+32     	; 0x43d4 <__vector_55+0x60>
    43b4:	e1 e1       	ldi	r30, 0x11	; 17
    43b6:	f0 e1       	ldi	r31, 0x10	; 16
    43b8:	a0 81       	ld	r26, Z
    43ba:	b1 81       	ldd	r27, Z+1	; 0x01
    43bc:	a1 53       	subi	r26, 0x31	; 49
    43be:	b0 4f       	sbci	r27, 0xF0	; 240
    43c0:	2c 91       	ld	r18, X
    43c2:	80 81       	ld	r24, Z
    43c4:	91 81       	ldd	r25, Z+1	; 0x01
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	8f 73       	andi	r24, 0x3F	; 63
    43ca:	99 27       	eor	r25, r25
    43cc:	91 83       	std	Z+1, r25	; 0x01
    43ce:	80 83       	st	Z, r24
    43d0:	20 93 36 01 	sts	0x0136, r18
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	3f 91       	pop	r19
    43e2:	2f 91       	pop	r18
    43e4:	0f 90       	pop	r0
    43e6:	0b be       	out	0x3b, r0	; 59
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    43f2:	8f 92       	push	r8
    43f4:	9f 92       	push	r9
    43f6:	af 92       	push	r10
    43f8:	bf 92       	push	r11
    43fa:	cf 92       	push	r12
    43fc:	df 92       	push	r13
    43fe:	ef 92       	push	r14
    4400:	ff 92       	push	r15
    4402:	0f 93       	push	r16
    4404:	1f 93       	push	r17
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	fc 01       	movw	r30, r24
    4410:	13 82       	std	Z+3, r1	; 0x03
    4412:	12 82       	std	Z+2, r1	; 0x02
    4414:	88 ee       	ldi	r24, 0xE8	; 232
    4416:	93 e0       	ldi	r25, 0x03	; 3
    4418:	a0 e0       	ldi	r26, 0x00	; 0
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	84 83       	std	Z+4, r24	; 0x04
    441e:	95 83       	std	Z+5, r25	; 0x05
    4420:	a6 83       	std	Z+6, r26	; 0x06
    4422:	b7 83       	std	Z+7, r27	; 0x07
    4424:	84 ed       	ldi	r24, 0xD4	; 212
    4426:	92 e0       	ldi	r25, 0x02	; 2
    4428:	91 83       	std	Z+1, r25	; 0x01
    442a:	80 83       	st	Z, r24
    442c:	75 87       	std	Z+13, r23	; 0x0d
    442e:	64 87       	std	Z+12, r22	; 0x0c
    4430:	57 87       	std	Z+15, r21	; 0x0f
    4432:	46 87       	std	Z+14, r20	; 0x0e
    4434:	31 8b       	std	Z+17, r19	; 0x11
    4436:	20 8b       	std	Z+16, r18	; 0x10
    4438:	13 8b       	std	Z+19, r17	; 0x13
    443a:	02 8b       	std	Z+18, r16	; 0x12
    443c:	f5 8a       	std	Z+21, r15	; 0x15
    443e:	e4 8a       	std	Z+20, r14	; 0x14
    4440:	d7 8a       	std	Z+23, r13	; 0x17
    4442:	c6 8a       	std	Z+22, r12	; 0x16
    4444:	b1 8e       	std	Z+25, r11	; 0x19
    4446:	a0 8e       	std	Z+24, r10	; 0x18
    4448:	93 8e       	std	Z+27, r9	; 0x1b
    444a:	82 8e       	std	Z+26, r8	; 0x1a
    444c:	88 89       	ldd	r24, Y+16	; 0x10
    444e:	84 8f       	std	Z+28, r24	; 0x1c
    4450:	89 89       	ldd	r24, Y+17	; 0x11
    4452:	85 8f       	std	Z+29, r24	; 0x1d
    4454:	8a 89       	ldd	r24, Y+18	; 0x12
    4456:	86 8f       	std	Z+30, r24	; 0x1e
    4458:	8b 89       	ldd	r24, Y+19	; 0x13
    445a:	87 8f       	std	Z+31, r24	; 0x1f
    445c:	8c 89       	ldd	r24, Y+20	; 0x14
    445e:	80 a3       	std	Z+32, r24	; 0x20
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	1f 91       	pop	r17
    4466:	0f 91       	pop	r16
    4468:	ff 90       	pop	r15
    446a:	ef 90       	pop	r14
    446c:	df 90       	pop	r13
    446e:	cf 90       	pop	r12
    4470:	bf 90       	pop	r11
    4472:	af 90       	pop	r10
    4474:	9f 90       	pop	r9
    4476:	8f 90       	pop	r8
    4478:	08 95       	ret

0000447a <_ZN14HardwareSerial5beginEm>:
    447a:	cf 92       	push	r12
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	ec 01       	movw	r28, r24
    4488:	6a 01       	movw	r12, r20
    448a:	7b 01       	movw	r14, r22
    448c:	41 15       	cp	r20, r1
    448e:	81 ee       	ldi	r24, 0xE1	; 225
    4490:	58 07       	cpc	r21, r24
    4492:	61 05       	cpc	r22, r1
    4494:	71 05       	cpc	r23, r1
    4496:	01 f1       	breq	.+64     	; 0x44d8 <_ZN14HardwareSerial5beginEm+0x5e>
    4498:	ec 89       	ldd	r30, Y+20	; 0x14
    449a:	fd 89       	ldd	r31, Y+21	; 0x15
    449c:	81 e0       	ldi	r24, 0x01	; 1
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	08 a0       	ldd	r0, Y+32	; 0x20
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <_ZN14HardwareSerial5beginEm+0x2e>
    44a4:	88 0f       	add	r24, r24
    44a6:	99 1f       	adc	r25, r25
    44a8:	0a 94       	dec	r0
    44aa:	e2 f7       	brpl	.-8      	; 0x44a4 <_ZN14HardwareSerial5beginEm+0x2a>
    44ac:	80 83       	st	Z, r24
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	79 e0       	ldi	r23, 0x09	; 9
    44b2:	8d e3       	ldi	r24, 0x3D	; 61
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	a7 01       	movw	r20, r14
    44b8:	96 01       	movw	r18, r12
    44ba:	9e d3       	rcall	.+1852   	; 0x4bf8 <__udivmodsi4>
    44bc:	ba 01       	movw	r22, r20
    44be:	a9 01       	movw	r20, r18
    44c0:	41 50       	subi	r20, 0x01	; 1
    44c2:	51 09       	sbc	r21, r1
    44c4:	61 09       	sbc	r22, r1
    44c6:	71 09       	sbc	r23, r1
    44c8:	76 95       	lsr	r23
    44ca:	67 95       	ror	r22
    44cc:	57 95       	ror	r21
    44ce:	47 95       	ror	r20
    44d0:	41 15       	cp	r20, r1
    44d2:	80 e1       	ldi	r24, 0x10	; 16
    44d4:	58 07       	cpc	r21, r24
    44d6:	a0 f0       	brcs	.+40     	; 0x4500 <_ZN14HardwareSerial5beginEm+0x86>
    44d8:	ec 89       	ldd	r30, Y+20	; 0x14
    44da:	fd 89       	ldd	r31, Y+21	; 0x15
    44dc:	10 82       	st	Z, r1
    44de:	60 e8       	ldi	r22, 0x80	; 128
    44e0:	74 e8       	ldi	r23, 0x84	; 132
    44e2:	8e e1       	ldi	r24, 0x1E	; 30
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	a7 01       	movw	r20, r14
    44e8:	96 01       	movw	r18, r12
    44ea:	86 d3       	rcall	.+1804   	; 0x4bf8 <__udivmodsi4>
    44ec:	ba 01       	movw	r22, r20
    44ee:	a9 01       	movw	r20, r18
    44f0:	41 50       	subi	r20, 0x01	; 1
    44f2:	51 09       	sbc	r21, r1
    44f4:	61 09       	sbc	r22, r1
    44f6:	71 09       	sbc	r23, r1
    44f8:	76 95       	lsr	r23
    44fa:	67 95       	ror	r22
    44fc:	57 95       	ror	r21
    44fe:	47 95       	ror	r20
    4500:	e8 89       	ldd	r30, Y+16	; 0x10
    4502:	f9 89       	ldd	r31, Y+17	; 0x11
    4504:	50 83       	st	Z, r21
    4506:	ea 89       	ldd	r30, Y+18	; 0x12
    4508:	fb 89       	ldd	r31, Y+19	; 0x13
    450a:	40 83       	st	Z, r20
    450c:	19 a2       	std	Y+33, r1	; 0x21
    450e:	ee 89       	ldd	r30, Y+22	; 0x16
    4510:	ff 89       	ldd	r31, Y+23	; 0x17
    4512:	40 81       	ld	r20, Z
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	9c 01       	movw	r18, r24
    451a:	0c 8c       	ldd	r0, Y+28	; 0x1c
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <_ZN14HardwareSerial5beginEm+0xa8>
    451e:	22 0f       	add	r18, r18
    4520:	33 1f       	adc	r19, r19
    4522:	0a 94       	dec	r0
    4524:	e2 f7       	brpl	.-8      	; 0x451e <_ZN14HardwareSerial5beginEm+0xa4>
    4526:	24 2b       	or	r18, r20
    4528:	20 83       	st	Z, r18
    452a:	ee 89       	ldd	r30, Y+22	; 0x16
    452c:	ff 89       	ldd	r31, Y+23	; 0x17
    452e:	40 81       	ld	r20, Z
    4530:	9c 01       	movw	r18, r24
    4532:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4534:	02 c0       	rjmp	.+4      	; 0x453a <_ZN14HardwareSerial5beginEm+0xc0>
    4536:	22 0f       	add	r18, r18
    4538:	33 1f       	adc	r19, r19
    453a:	0a 94       	dec	r0
    453c:	e2 f7       	brpl	.-8      	; 0x4536 <_ZN14HardwareSerial5beginEm+0xbc>
    453e:	24 2b       	or	r18, r20
    4540:	20 83       	st	Z, r18
    4542:	ee 89       	ldd	r30, Y+22	; 0x16
    4544:	ff 89       	ldd	r31, Y+23	; 0x17
    4546:	40 81       	ld	r20, Z
    4548:	9c 01       	movw	r18, r24
    454a:	0e 8c       	ldd	r0, Y+30	; 0x1e
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <_ZN14HardwareSerial5beginEm+0xd8>
    454e:	22 0f       	add	r18, r18
    4550:	33 1f       	adc	r19, r19
    4552:	0a 94       	dec	r0
    4554:	e2 f7       	brpl	.-8      	; 0x454e <_ZN14HardwareSerial5beginEm+0xd4>
    4556:	24 2b       	or	r18, r20
    4558:	20 83       	st	Z, r18
    455a:	ee 89       	ldd	r30, Y+22	; 0x16
    455c:	ff 89       	ldd	r31, Y+23	; 0x17
    455e:	20 81       	ld	r18, Z
    4560:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <_ZN14HardwareSerial5beginEm+0xee>
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	0a 94       	dec	r0
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <_ZN14HardwareSerial5beginEm+0xea>
    456c:	80 95       	com	r24
    456e:	82 23       	and	r24, r18
    4570:	80 83       	st	Z, r24
    4572:	df 91       	pop	r29
    4574:	cf 91       	pop	r28
    4576:	ff 90       	pop	r15
    4578:	ef 90       	pop	r14
    457a:	df 90       	pop	r13
    457c:	cf 90       	pop	r12
    457e:	08 95       	ret

00004580 <_GLOBAL__sub_I_rx_buffer>:
    4580:	5f 92       	push	r5
    4582:	6f 92       	push	r6
    4584:	7f 92       	push	r7
    4586:	8f 92       	push	r8
    4588:	9f 92       	push	r9
    458a:	af 92       	push	r10
    458c:	bf 92       	push	r11
    458e:	cf 92       	push	r12
    4590:	df 92       	push	r13
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	cf 93       	push	r28
    459c:	df 93       	push	r29
    459e:	55 24       	eor	r5, r5
    45a0:	53 94       	inc	r5
    45a2:	5f 92       	push	r5
    45a4:	0f 2e       	mov	r0, r31
    45a6:	f5 e0       	ldi	r31, 0x05	; 5
    45a8:	6f 2e       	mov	r6, r31
    45aa:	f0 2d       	mov	r31, r0
    45ac:	6f 92       	push	r6
    45ae:	0f 2e       	mov	r0, r31
    45b0:	f7 e0       	ldi	r31, 0x07	; 7
    45b2:	7f 2e       	mov	r7, r31
    45b4:	f0 2d       	mov	r31, r0
    45b6:	7f 92       	push	r7
    45b8:	d3 e0       	ldi	r29, 0x03	; 3
    45ba:	df 93       	push	r29
    45bc:	c4 e0       	ldi	r28, 0x04	; 4
    45be:	cf 93       	push	r28
    45c0:	0f 2e       	mov	r0, r31
    45c2:	f6 ec       	ldi	r31, 0xC6	; 198
    45c4:	8f 2e       	mov	r8, r31
    45c6:	91 2c       	mov	r9, r1
    45c8:	f0 2d       	mov	r31, r0
    45ca:	0f 2e       	mov	r0, r31
    45cc:	f2 ec       	ldi	r31, 0xC2	; 194
    45ce:	af 2e       	mov	r10, r31
    45d0:	b1 2c       	mov	r11, r1
    45d2:	f0 2d       	mov	r31, r0
    45d4:	0f 2e       	mov	r0, r31
    45d6:	f1 ec       	ldi	r31, 0xC1	; 193
    45d8:	cf 2e       	mov	r12, r31
    45da:	d1 2c       	mov	r13, r1
    45dc:	f0 2d       	mov	r31, r0
    45de:	0f 2e       	mov	r0, r31
    45e0:	f0 ec       	ldi	r31, 0xC0	; 192
    45e2:	ef 2e       	mov	r14, r31
    45e4:	f1 2c       	mov	r15, r1
    45e6:	f0 2d       	mov	r31, r0
    45e8:	04 ec       	ldi	r16, 0xC4	; 196
    45ea:	10 e0       	ldi	r17, 0x00	; 0
    45ec:	25 ec       	ldi	r18, 0xC5	; 197
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	47 e6       	ldi	r20, 0x67	; 103
    45f2:	51 e1       	ldi	r21, 0x11	; 17
    45f4:	6b ea       	ldi	r22, 0xAB	; 171
    45f6:	71 e1       	ldi	r23, 0x11	; 17
    45f8:	8d ea       	ldi	r24, 0xAD	; 173
    45fa:	9f e0       	ldi	r25, 0x0F	; 15
    45fc:	fa de       	rcall	.-524    	; 0x43f2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    45fe:	5f 92       	push	r5
    4600:	6f 92       	push	r6
    4602:	7f 92       	push	r7
    4604:	df 93       	push	r29
    4606:	cf 93       	push	r28
    4608:	0f 2e       	mov	r0, r31
    460a:	fe ec       	ldi	r31, 0xCE	; 206
    460c:	8f 2e       	mov	r8, r31
    460e:	91 2c       	mov	r9, r1
    4610:	f0 2d       	mov	r31, r0
    4612:	0f 2e       	mov	r0, r31
    4614:	fa ec       	ldi	r31, 0xCA	; 202
    4616:	af 2e       	mov	r10, r31
    4618:	b1 2c       	mov	r11, r1
    461a:	f0 2d       	mov	r31, r0
    461c:	0f 2e       	mov	r0, r31
    461e:	f9 ec       	ldi	r31, 0xC9	; 201
    4620:	cf 2e       	mov	r12, r31
    4622:	d1 2c       	mov	r13, r1
    4624:	f0 2d       	mov	r31, r0
    4626:	0f 2e       	mov	r0, r31
    4628:	f8 ec       	ldi	r31, 0xC8	; 200
    462a:	ef 2e       	mov	r14, r31
    462c:	f1 2c       	mov	r15, r1
    462e:	f0 2d       	mov	r31, r0
    4630:	0c ec       	ldi	r16, 0xCC	; 204
    4632:	10 e0       	ldi	r17, 0x00	; 0
    4634:	2d ec       	ldi	r18, 0xCD	; 205
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	4f ed       	ldi	r20, 0xDF	; 223
    463a:	50 e1       	ldi	r21, 0x10	; 16
    463c:	63 e2       	ldi	r22, 0x23	; 35
    463e:	71 e1       	ldi	r23, 0x11	; 17
    4640:	8b e8       	ldi	r24, 0x8B	; 139
    4642:	9f e0       	ldi	r25, 0x0F	; 15
    4644:	d6 de       	rcall	.-596    	; 0x43f2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    4646:	5f 92       	push	r5
    4648:	6f 92       	push	r6
    464a:	7f 92       	push	r7
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	0f 2e       	mov	r0, r31
    4652:	f6 ed       	ldi	r31, 0xD6	; 214
    4654:	8f 2e       	mov	r8, r31
    4656:	91 2c       	mov	r9, r1
    4658:	f0 2d       	mov	r31, r0
    465a:	0f 2e       	mov	r0, r31
    465c:	f2 ed       	ldi	r31, 0xD2	; 210
    465e:	af 2e       	mov	r10, r31
    4660:	b1 2c       	mov	r11, r1
    4662:	f0 2d       	mov	r31, r0
    4664:	0f 2e       	mov	r0, r31
    4666:	f1 ed       	ldi	r31, 0xD1	; 209
    4668:	cf 2e       	mov	r12, r31
    466a:	d1 2c       	mov	r13, r1
    466c:	f0 2d       	mov	r31, r0
    466e:	0f 2e       	mov	r0, r31
    4670:	f0 ed       	ldi	r31, 0xD0	; 208
    4672:	ef 2e       	mov	r14, r31
    4674:	f1 2c       	mov	r15, r1
    4676:	f0 2d       	mov	r31, r0
    4678:	04 ed       	ldi	r16, 0xD4	; 212
    467a:	10 e0       	ldi	r17, 0x00	; 0
    467c:	25 ed       	ldi	r18, 0xD5	; 213
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	47 e5       	ldi	r20, 0x57	; 87
    4682:	50 e1       	ldi	r21, 0x10	; 16
    4684:	6b e9       	ldi	r22, 0x9B	; 155
    4686:	70 e1       	ldi	r23, 0x10	; 16
    4688:	89 e6       	ldi	r24, 0x69	; 105
    468a:	9f e0       	ldi	r25, 0x0F	; 15
    468c:	b2 de       	rcall	.-668    	; 0x43f2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    468e:	5f 92       	push	r5
    4690:	6f 92       	push	r6
    4692:	7f 92       	push	r7
    4694:	df 93       	push	r29
    4696:	cf 93       	push	r28
    4698:	0f 2e       	mov	r0, r31
    469a:	f6 e3       	ldi	r31, 0x36	; 54
    469c:	8f 2e       	mov	r8, r31
    469e:	99 24       	eor	r9, r9
    46a0:	93 94       	inc	r9
    46a2:	f0 2d       	mov	r31, r0
    46a4:	0f 2e       	mov	r0, r31
    46a6:	f2 e3       	ldi	r31, 0x32	; 50
    46a8:	af 2e       	mov	r10, r31
    46aa:	bb 24       	eor	r11, r11
    46ac:	b3 94       	inc	r11
    46ae:	f0 2d       	mov	r31, r0
    46b0:	0f 2e       	mov	r0, r31
    46b2:	f1 e3       	ldi	r31, 0x31	; 49
    46b4:	cf 2e       	mov	r12, r31
    46b6:	dd 24       	eor	r13, r13
    46b8:	d3 94       	inc	r13
    46ba:	f0 2d       	mov	r31, r0
    46bc:	0f 2e       	mov	r0, r31
    46be:	f0 e3       	ldi	r31, 0x30	; 48
    46c0:	ef 2e       	mov	r14, r31
    46c2:	ff 24       	eor	r15, r15
    46c4:	f3 94       	inc	r15
    46c6:	f0 2d       	mov	r31, r0
    46c8:	04 e3       	ldi	r16, 0x34	; 52
    46ca:	11 e0       	ldi	r17, 0x01	; 1
    46cc:	25 e3       	ldi	r18, 0x35	; 53
    46ce:	31 e0       	ldi	r19, 0x01	; 1
    46d0:	4f ec       	ldi	r20, 0xCF	; 207
    46d2:	5f e0       	ldi	r21, 0x0F	; 15
    46d4:	63 e1       	ldi	r22, 0x13	; 19
    46d6:	70 e1       	ldi	r23, 0x10	; 16
    46d8:	87 e4       	ldi	r24, 0x47	; 71
    46da:	9f e0       	ldi	r25, 0x0F	; 15
    46dc:	8a de       	rcall	.-748    	; 0x43f2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    46de:	8d b7       	in	r24, 0x3d	; 61
    46e0:	9e b7       	in	r25, 0x3e	; 62
    46e2:	44 96       	adiw	r24, 0x14	; 20
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	9e bf       	out	0x3e, r25	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	8d bf       	out	0x3d, r24	; 61
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	1f 91       	pop	r17
    46f4:	0f 91       	pop	r16
    46f6:	ff 90       	pop	r15
    46f8:	ef 90       	pop	r14
    46fa:	df 90       	pop	r13
    46fc:	cf 90       	pop	r12
    46fe:	bf 90       	pop	r11
    4700:	af 90       	pop	r10
    4702:	9f 90       	pop	r9
    4704:	8f 90       	pop	r8
    4706:	7f 90       	pop	r7
    4708:	6f 90       	pop	r6
    470a:	5f 90       	pop	r5
    470c:	08 95       	ret

0000470e <_ZN5Print5writeEPKhj>:
    470e:	cf 92       	push	r12
    4710:	df 92       	push	r13
    4712:	ef 92       	push	r14
    4714:	ff 92       	push	r15
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
    471e:	6c 01       	movw	r12, r24
    4720:	41 15       	cp	r20, r1
    4722:	51 05       	cpc	r21, r1
    4724:	b1 f0       	breq	.+44     	; 0x4752 <_ZN5Print5writeEPKhj+0x44>
    4726:	06 2f       	mov	r16, r22
    4728:	17 2f       	mov	r17, r23
    472a:	ea 01       	movw	r28, r20
    472c:	e1 2c       	mov	r14, r1
    472e:	f1 2c       	mov	r15, r1
    4730:	d8 01       	movw	r26, r16
    4732:	6d 91       	ld	r22, X+
    4734:	8d 01       	movw	r16, r26
    4736:	d6 01       	movw	r26, r12
    4738:	ed 91       	ld	r30, X+
    473a:	fc 91       	ld	r31, X
    473c:	01 90       	ld	r0, Z+
    473e:	f0 81       	ld	r31, Z
    4740:	e0 2d       	mov	r30, r0
    4742:	c6 01       	movw	r24, r12
    4744:	19 95       	eicall
    4746:	e8 0e       	add	r14, r24
    4748:	f9 1e       	adc	r15, r25
    474a:	21 97       	sbiw	r28, 0x01	; 1
    474c:	20 97       	sbiw	r28, 0x00	; 0
    474e:	81 f7       	brne	.-32     	; 0x4730 <_ZN5Print5writeEPKhj+0x22>
    4750:	02 c0       	rjmp	.+4      	; 0x4756 <_ZN5Print5writeEPKhj+0x48>
    4752:	e1 2c       	mov	r14, r1
    4754:	f1 2c       	mov	r15, r1
    4756:	c7 01       	movw	r24, r14
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	1f 91       	pop	r17
    475e:	0f 91       	pop	r16
    4760:	ff 90       	pop	r15
    4762:	ef 90       	pop	r14
    4764:	df 90       	pop	r13
    4766:	cf 90       	pop	r12
    4768:	08 95       	ret

0000476a <_ZN5Print5printEPKc>:
    476a:	61 15       	cp	r22, r1
    476c:	71 05       	cpc	r23, r1
    476e:	81 f0       	breq	.+32     	; 0x4790 <_ZN5Print5printEPKc+0x26>
    4770:	fb 01       	movw	r30, r22
    4772:	01 90       	ld	r0, Z+
    4774:	00 20       	and	r0, r0
    4776:	e9 f7       	brne	.-6      	; 0x4772 <_ZN5Print5printEPKc+0x8>
    4778:	31 97       	sbiw	r30, 0x01	; 1
    477a:	af 01       	movw	r20, r30
    477c:	46 1b       	sub	r20, r22
    477e:	57 0b       	sbc	r21, r23
    4780:	dc 01       	movw	r26, r24
    4782:	ed 91       	ld	r30, X+
    4784:	fc 91       	ld	r31, X
    4786:	02 80       	ldd	r0, Z+2	; 0x02
    4788:	f3 81       	ldd	r31, Z+3	; 0x03
    478a:	e0 2d       	mov	r30, r0
    478c:	19 95       	eicall
    478e:	08 95       	ret
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	08 95       	ret

00004796 <_ZN5Print5printEc>:
    4796:	dc 01       	movw	r26, r24
    4798:	ed 91       	ld	r30, X+
    479a:	fc 91       	ld	r31, X
    479c:	01 90       	ld	r0, Z+
    479e:	f0 81       	ld	r31, Z
    47a0:	e0 2d       	mov	r30, r0
    47a2:	19 95       	eicall
    47a4:	08 95       	ret

000047a6 <_ZN5Print7printlnEv>:
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	ec 01       	movw	r28, r24
    47b0:	6d e0       	ldi	r22, 0x0D	; 13
    47b2:	f1 df       	rcall	.-30     	; 0x4796 <_ZN5Print5printEc>
    47b4:	8c 01       	movw	r16, r24
    47b6:	6a e0       	ldi	r22, 0x0A	; 10
    47b8:	ce 01       	movw	r24, r28
    47ba:	ed df       	rcall	.-38     	; 0x4796 <_ZN5Print5printEc>
    47bc:	80 0f       	add	r24, r16
    47be:	91 1f       	adc	r25, r17
    47c0:	df 91       	pop	r29
    47c2:	cf 91       	pop	r28
    47c4:	1f 91       	pop	r17
    47c6:	0f 91       	pop	r16
    47c8:	08 95       	ret

000047ca <_ZN5Print7printlnEPKc>:
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	ec 01       	movw	r28, r24
    47d4:	ca df       	rcall	.-108    	; 0x476a <_ZN5Print5printEPKc>
    47d6:	8c 01       	movw	r16, r24
    47d8:	ce 01       	movw	r24, r28
    47da:	e5 df       	rcall	.-54     	; 0x47a6 <_ZN5Print7printlnEv>
    47dc:	80 0f       	add	r24, r16
    47de:	91 1f       	adc	r25, r17
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	08 95       	ret

000047ea <__vector_23>:
    47ea:	1f 92       	push	r1
    47ec:	0f 92       	push	r0
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	0f 92       	push	r0
    47f2:	11 24       	eor	r1, r1
    47f4:	2f 93       	push	r18
    47f6:	3f 93       	push	r19
    47f8:	8f 93       	push	r24
    47fa:	9f 93       	push	r25
    47fc:	af 93       	push	r26
    47fe:	bf 93       	push	r27
    4800:	80 91 f0 11 	lds	r24, 0x11F0
    4804:	90 91 f1 11 	lds	r25, 0x11F1
    4808:	a0 91 f2 11 	lds	r26, 0x11F2
    480c:	b0 91 f3 11 	lds	r27, 0x11F3
    4810:	30 91 ef 11 	lds	r19, 0x11EF
    4814:	23 e0       	ldi	r18, 0x03	; 3
    4816:	23 0f       	add	r18, r19
    4818:	2d 37       	cpi	r18, 0x7D	; 125
    481a:	20 f4       	brcc	.+8      	; 0x4824 <__vector_23+0x3a>
    481c:	01 96       	adiw	r24, 0x01	; 1
    481e:	a1 1d       	adc	r26, r1
    4820:	b1 1d       	adc	r27, r1
    4822:	05 c0       	rjmp	.+10     	; 0x482e <__vector_23+0x44>
    4824:	26 e8       	ldi	r18, 0x86	; 134
    4826:	23 0f       	add	r18, r19
    4828:	02 96       	adiw	r24, 0x02	; 2
    482a:	a1 1d       	adc	r26, r1
    482c:	b1 1d       	adc	r27, r1
    482e:	20 93 ef 11 	sts	0x11EF, r18
    4832:	80 93 f0 11 	sts	0x11F0, r24
    4836:	90 93 f1 11 	sts	0x11F1, r25
    483a:	a0 93 f2 11 	sts	0x11F2, r26
    483e:	b0 93 f3 11 	sts	0x11F3, r27
    4842:	80 91 f4 11 	lds	r24, 0x11F4
    4846:	90 91 f5 11 	lds	r25, 0x11F5
    484a:	a0 91 f6 11 	lds	r26, 0x11F6
    484e:	b0 91 f7 11 	lds	r27, 0x11F7
    4852:	01 96       	adiw	r24, 0x01	; 1
    4854:	a1 1d       	adc	r26, r1
    4856:	b1 1d       	adc	r27, r1
    4858:	80 93 f4 11 	sts	0x11F4, r24
    485c:	90 93 f5 11 	sts	0x11F5, r25
    4860:	a0 93 f6 11 	sts	0x11F6, r26
    4864:	b0 93 f7 11 	sts	0x11F7, r27
    4868:	bf 91       	pop	r27
    486a:	af 91       	pop	r26
    486c:	9f 91       	pop	r25
    486e:	8f 91       	pop	r24
    4870:	3f 91       	pop	r19
    4872:	2f 91       	pop	r18
    4874:	0f 90       	pop	r0
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	0f 90       	pop	r0
    487a:	1f 90       	pop	r1
    487c:	18 95       	reti

0000487e <millis>:
    487e:	2f b7       	in	r18, 0x3f	; 63
    4880:	f8 94       	cli
    4882:	60 91 f0 11 	lds	r22, 0x11F0
    4886:	70 91 f1 11 	lds	r23, 0x11F1
    488a:	80 91 f2 11 	lds	r24, 0x11F2
    488e:	90 91 f3 11 	lds	r25, 0x11F3
    4892:	2f bf       	out	0x3f, r18	; 63
    4894:	08 95       	ret

00004896 <micros>:
    4896:	3f b7       	in	r19, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	80 91 f4 11 	lds	r24, 0x11F4
    489e:	90 91 f5 11 	lds	r25, 0x11F5
    48a2:	a0 91 f6 11 	lds	r26, 0x11F6
    48a6:	b0 91 f7 11 	lds	r27, 0x11F7
    48aa:	26 b5       	in	r18, 0x26	; 38
    48ac:	a8 9b       	sbis	0x15, 0	; 21
    48ae:	05 c0       	rjmp	.+10     	; 0x48ba <micros+0x24>
    48b0:	2f 3f       	cpi	r18, 0xFF	; 255
    48b2:	19 f0       	breq	.+6      	; 0x48ba <micros+0x24>
    48b4:	01 96       	adiw	r24, 0x01	; 1
    48b6:	a1 1d       	adc	r26, r1
    48b8:	b1 1d       	adc	r27, r1
    48ba:	3f bf       	out	0x3f, r19	; 63
    48bc:	ba 2f       	mov	r27, r26
    48be:	a9 2f       	mov	r26, r25
    48c0:	98 2f       	mov	r25, r24
    48c2:	88 27       	eor	r24, r24
    48c4:	82 0f       	add	r24, r18
    48c6:	91 1d       	adc	r25, r1
    48c8:	a1 1d       	adc	r26, r1
    48ca:	b1 1d       	adc	r27, r1
    48cc:	bc 01       	movw	r22, r24
    48ce:	cd 01       	movw	r24, r26
    48d0:	66 0f       	add	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	99 1f       	adc	r25, r25
    48d8:	66 0f       	add	r22, r22
    48da:	77 1f       	adc	r23, r23
    48dc:	88 1f       	adc	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	08 95       	ret

000048e2 <delay>:
    48e2:	cf 92       	push	r12
    48e4:	df 92       	push	r13
    48e6:	ef 92       	push	r14
    48e8:	ff 92       	push	r15
    48ea:	cf 93       	push	r28
    48ec:	df 93       	push	r29
    48ee:	6b 01       	movw	r12, r22
    48f0:	7c 01       	movw	r14, r24
    48f2:	d1 df       	rcall	.-94     	; 0x4896 <micros>
    48f4:	eb 01       	movw	r28, r22
    48f6:	c1 14       	cp	r12, r1
    48f8:	d1 04       	cpc	r13, r1
    48fa:	e1 04       	cpc	r14, r1
    48fc:	f1 04       	cpc	r15, r1
    48fe:	91 f0       	breq	.+36     	; 0x4924 <delay+0x42>
    4900:	ca df       	rcall	.-108    	; 0x4896 <micros>
    4902:	6c 1b       	sub	r22, r28
    4904:	7d 0b       	sbc	r23, r29
    4906:	68 3e       	cpi	r22, 0xE8	; 232
    4908:	73 40       	sbci	r23, 0x03	; 3
    490a:	38 f0       	brcs	.+14     	; 0x491a <delay+0x38>
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	c8 1a       	sub	r12, r24
    4910:	d1 08       	sbc	r13, r1
    4912:	e1 08       	sbc	r14, r1
    4914:	f1 08       	sbc	r15, r1
    4916:	c8 51       	subi	r28, 0x18	; 24
    4918:	dc 4f       	sbci	r29, 0xFC	; 252
    491a:	c1 14       	cp	r12, r1
    491c:	d1 04       	cpc	r13, r1
    491e:	e1 04       	cpc	r14, r1
    4920:	f1 04       	cpc	r15, r1
    4922:	71 f7       	brne	.-36     	; 0x4900 <delay+0x1e>
    4924:	df 91       	pop	r29
    4926:	cf 91       	pop	r28
    4928:	ff 90       	pop	r15
    492a:	ef 90       	pop	r14
    492c:	df 90       	pop	r13
    492e:	cf 90       	pop	r12
    4930:	08 95       	ret

00004932 <init>:
    4932:	78 94       	sei
    4934:	84 b5       	in	r24, 0x24	; 36
    4936:	82 60       	ori	r24, 0x02	; 2
    4938:	84 bd       	out	0x24, r24	; 36
    493a:	84 b5       	in	r24, 0x24	; 36
    493c:	81 60       	ori	r24, 0x01	; 1
    493e:	84 bd       	out	0x24, r24	; 36
    4940:	85 b5       	in	r24, 0x25	; 37
    4942:	82 60       	ori	r24, 0x02	; 2
    4944:	85 bd       	out	0x25, r24	; 37
    4946:	85 b5       	in	r24, 0x25	; 37
    4948:	81 60       	ori	r24, 0x01	; 1
    494a:	85 bd       	out	0x25, r24	; 37
    494c:	ee e6       	ldi	r30, 0x6E	; 110
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	81 60       	ori	r24, 0x01	; 1
    4954:	80 83       	st	Z, r24
    4956:	e1 e8       	ldi	r30, 0x81	; 129
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	10 82       	st	Z, r1
    495c:	80 81       	ld	r24, Z
    495e:	82 60       	ori	r24, 0x02	; 2
    4960:	80 83       	st	Z, r24
    4962:	80 81       	ld	r24, Z
    4964:	81 60       	ori	r24, 0x01	; 1
    4966:	80 83       	st	Z, r24
    4968:	e0 e8       	ldi	r30, 0x80	; 128
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	80 81       	ld	r24, Z
    496e:	81 60       	ori	r24, 0x01	; 1
    4970:	80 83       	st	Z, r24
    4972:	e1 eb       	ldi	r30, 0xB1	; 177
    4974:	f0 e0       	ldi	r31, 0x00	; 0
    4976:	80 81       	ld	r24, Z
    4978:	84 60       	ori	r24, 0x04	; 4
    497a:	80 83       	st	Z, r24
    497c:	e0 eb       	ldi	r30, 0xB0	; 176
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	81 60       	ori	r24, 0x01	; 1
    4984:	80 83       	st	Z, r24
    4986:	e1 e9       	ldi	r30, 0x91	; 145
    4988:	f0 e0       	ldi	r31, 0x00	; 0
    498a:	80 81       	ld	r24, Z
    498c:	82 60       	ori	r24, 0x02	; 2
    498e:	80 83       	st	Z, r24
    4990:	80 81       	ld	r24, Z
    4992:	81 60       	ori	r24, 0x01	; 1
    4994:	80 83       	st	Z, r24
    4996:	e0 e9       	ldi	r30, 0x90	; 144
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	80 81       	ld	r24, Z
    499c:	81 60       	ori	r24, 0x01	; 1
    499e:	80 83       	st	Z, r24
    49a0:	e1 ea       	ldi	r30, 0xA1	; 161
    49a2:	f0 e0       	ldi	r31, 0x00	; 0
    49a4:	80 81       	ld	r24, Z
    49a6:	82 60       	ori	r24, 0x02	; 2
    49a8:	80 83       	st	Z, r24
    49aa:	80 81       	ld	r24, Z
    49ac:	81 60       	ori	r24, 0x01	; 1
    49ae:	80 83       	st	Z, r24
    49b0:	e0 ea       	ldi	r30, 0xA0	; 160
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	81 60       	ori	r24, 0x01	; 1
    49b8:	80 83       	st	Z, r24
    49ba:	e1 e2       	ldi	r30, 0x21	; 33
    49bc:	f1 e0       	ldi	r31, 0x01	; 1
    49be:	80 81       	ld	r24, Z
    49c0:	82 60       	ori	r24, 0x02	; 2
    49c2:	80 83       	st	Z, r24
    49c4:	80 81       	ld	r24, Z
    49c6:	81 60       	ori	r24, 0x01	; 1
    49c8:	80 83       	st	Z, r24
    49ca:	e0 e2       	ldi	r30, 0x20	; 32
    49cc:	f1 e0       	ldi	r31, 0x01	; 1
    49ce:	80 81       	ld	r24, Z
    49d0:	81 60       	ori	r24, 0x01	; 1
    49d2:	80 83       	st	Z, r24
    49d4:	ea e7       	ldi	r30, 0x7A	; 122
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	80 81       	ld	r24, Z
    49da:	84 60       	ori	r24, 0x04	; 4
    49dc:	80 83       	st	Z, r24
    49de:	80 81       	ld	r24, Z
    49e0:	82 60       	ori	r24, 0x02	; 2
    49e2:	80 83       	st	Z, r24
    49e4:	80 81       	ld	r24, Z
    49e6:	81 60       	ori	r24, 0x01	; 1
    49e8:	80 83       	st	Z, r24
    49ea:	80 81       	ld	r24, Z
    49ec:	80 68       	ori	r24, 0x80	; 128
    49ee:	80 83       	st	Z, r24
    49f0:	10 92 c1 00 	sts	0x00C1, r1
    49f4:	08 95       	ret

000049f6 <analogRead>:
    49f6:	86 33       	cpi	r24, 0x36	; 54
    49f8:	08 f0       	brcs	.+2      	; 0x49fc <analogRead+0x6>
    49fa:	86 53       	subi	r24, 0x36	; 54
    49fc:	eb e7       	ldi	r30, 0x7B	; 123
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	90 81       	ld	r25, Z
    4a02:	28 2f       	mov	r18, r24
    4a04:	28 70       	andi	r18, 0x08	; 8
    4a06:	97 7f       	andi	r25, 0xF7	; 247
    4a08:	92 2b       	or	r25, r18
    4a0a:	90 83       	st	Z, r25
    4a0c:	87 70       	andi	r24, 0x07	; 7
    4a0e:	20 91 60 02 	lds	r18, 0x0260
    4a12:	90 e4       	ldi	r25, 0x40	; 64
    4a14:	29 9f       	mul	r18, r25
    4a16:	90 01       	movw	r18, r0
    4a18:	11 24       	eor	r1, r1
    4a1a:	28 2b       	or	r18, r24
    4a1c:	20 93 7c 00 	sts	0x007C, r18
    4a20:	ea e7       	ldi	r30, 0x7A	; 122
    4a22:	f0 e0       	ldi	r31, 0x00	; 0
    4a24:	80 81       	ld	r24, Z
    4a26:	80 64       	ori	r24, 0x40	; 64
    4a28:	80 83       	st	Z, r24
    4a2a:	80 81       	ld	r24, Z
    4a2c:	86 fd       	sbrc	r24, 6
    4a2e:	fd cf       	rjmp	.-6      	; 0x4a2a <analogRead+0x34>
    4a30:	80 91 78 00 	lds	r24, 0x0078
    4a34:	20 91 79 00 	lds	r18, 0x0079
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	92 2b       	or	r25, r18
    4a3c:	08 95       	ret

00004a3e <turnOffPWM>:
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	fc 01       	movw	r30, r24
    4a42:	31 97       	sbiw	r30, 0x01	; 1
    4a44:	e1 31       	cpi	r30, 0x11	; 17
    4a46:	f1 05       	cpc	r31, r1
    4a48:	08 f0       	brcs	.+2      	; 0x4a4c <turnOffPWM+0xe>
    4a4a:	58 c0       	rjmp	.+176    	; 0x4afc <turnOffPWM+0xbe>
    4a4c:	e0 54       	subi	r30, 0x40	; 64
    4a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a50:	f5 c0       	rjmp	.+490    	; 0x4c3c <__tablejump2__>
    4a52:	e0 e8       	ldi	r30, 0x80	; 128
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	80 81       	ld	r24, Z
    4a58:	8f 77       	andi	r24, 0x7F	; 127
    4a5a:	80 83       	st	Z, r24
    4a5c:	08 95       	ret
    4a5e:	e0 e8       	ldi	r30, 0x80	; 128
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	80 81       	ld	r24, Z
    4a64:	8f 7d       	andi	r24, 0xDF	; 223
    4a66:	80 83       	st	Z, r24
    4a68:	08 95       	ret
    4a6a:	84 b5       	in	r24, 0x24	; 36
    4a6c:	8f 77       	andi	r24, 0x7F	; 127
    4a6e:	84 bd       	out	0x24, r24	; 36
    4a70:	08 95       	ret
    4a72:	84 b5       	in	r24, 0x24	; 36
    4a74:	8f 7d       	andi	r24, 0xDF	; 223
    4a76:	84 bd       	out	0x24, r24	; 36
    4a78:	08 95       	ret
    4a7a:	e0 eb       	ldi	r30, 0xB0	; 176
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	80 81       	ld	r24, Z
    4a80:	8f 77       	andi	r24, 0x7F	; 127
    4a82:	80 83       	st	Z, r24
    4a84:	08 95       	ret
    4a86:	e0 eb       	ldi	r30, 0xB0	; 176
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	80 81       	ld	r24, Z
    4a8c:	8f 7d       	andi	r24, 0xDF	; 223
    4a8e:	80 83       	st	Z, r24
    4a90:	08 95       	ret
    4a92:	e0 e9       	ldi	r30, 0x90	; 144
    4a94:	f0 e0       	ldi	r31, 0x00	; 0
    4a96:	80 81       	ld	r24, Z
    4a98:	8f 77       	andi	r24, 0x7F	; 127
    4a9a:	80 83       	st	Z, r24
    4a9c:	08 95       	ret
    4a9e:	e0 e9       	ldi	r30, 0x90	; 144
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	80 81       	ld	r24, Z
    4aa4:	8f 7d       	andi	r24, 0xDF	; 223
    4aa6:	80 83       	st	Z, r24
    4aa8:	08 95       	ret
    4aaa:	e0 e9       	ldi	r30, 0x90	; 144
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	80 81       	ld	r24, Z
    4ab0:	87 7f       	andi	r24, 0xF7	; 247
    4ab2:	80 83       	st	Z, r24
    4ab4:	08 95       	ret
    4ab6:	e0 ea       	ldi	r30, 0xA0	; 160
    4ab8:	f0 e0       	ldi	r31, 0x00	; 0
    4aba:	80 81       	ld	r24, Z
    4abc:	8f 77       	andi	r24, 0x7F	; 127
    4abe:	80 83       	st	Z, r24
    4ac0:	08 95       	ret
    4ac2:	e0 ea       	ldi	r30, 0xA0	; 160
    4ac4:	f0 e0       	ldi	r31, 0x00	; 0
    4ac6:	80 81       	ld	r24, Z
    4ac8:	8f 7d       	andi	r24, 0xDF	; 223
    4aca:	80 83       	st	Z, r24
    4acc:	08 95       	ret
    4ace:	e0 ea       	ldi	r30, 0xA0	; 160
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	87 7f       	andi	r24, 0xF7	; 247
    4ad6:	80 83       	st	Z, r24
    4ad8:	08 95       	ret
    4ada:	e0 e2       	ldi	r30, 0x20	; 32
    4adc:	f1 e0       	ldi	r31, 0x01	; 1
    4ade:	80 81       	ld	r24, Z
    4ae0:	8f 77       	andi	r24, 0x7F	; 127
    4ae2:	80 83       	st	Z, r24
    4ae4:	08 95       	ret
    4ae6:	e0 e2       	ldi	r30, 0x20	; 32
    4ae8:	f1 e0       	ldi	r31, 0x01	; 1
    4aea:	80 81       	ld	r24, Z
    4aec:	8f 7d       	andi	r24, 0xDF	; 223
    4aee:	80 83       	st	Z, r24
    4af0:	08 95       	ret
    4af2:	e0 e2       	ldi	r30, 0x20	; 32
    4af4:	f1 e0       	ldi	r31, 0x01	; 1
    4af6:	80 81       	ld	r24, Z
    4af8:	87 7f       	andi	r24, 0xF7	; 247
    4afa:	80 83       	st	Z, r24
    4afc:	08 95       	ret

00004afe <pinMode>:
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	fc 01       	movw	r30, r24
    4b06:	e8 51       	subi	r30, 0x18	; 24
    4b08:	fc 4f       	sbci	r31, 0xFC	; 252
    4b0a:	24 91       	lpm	r18, Z
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	e2 5d       	subi	r30, 0xD2	; 210
    4b10:	fb 4f       	sbci	r31, 0xFB	; 251
    4b12:	84 91       	lpm	r24, Z
    4b14:	88 23       	and	r24, r24
    4b16:	71 f1       	breq	.+92     	; 0x4b74 <pinMode+0x76>
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	fc 01       	movw	r30, r24
    4b20:	e8 55       	subi	r30, 0x58	; 88
    4b22:	fb 4f       	sbci	r31, 0xFB	; 251
    4b24:	a5 91       	lpm	r26, Z+
    4b26:	b4 91       	lpm	r27, Z
    4b28:	82 57       	subi	r24, 0x72	; 114
    4b2a:	9b 4f       	sbci	r25, 0xFB	; 251
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	c5 91       	lpm	r28, Z+
    4b30:	d4 91       	lpm	r29, Z
    4b32:	61 11       	cpse	r22, r1
    4b34:	0b c0       	rjmp	.+22     	; 0x4b4c <pinMode+0x4e>
    4b36:	8f b7       	in	r24, 0x3f	; 63
    4b38:	f8 94       	cli
    4b3a:	9c 91       	ld	r25, X
    4b3c:	20 95       	com	r18
    4b3e:	92 23       	and	r25, r18
    4b40:	9c 93       	st	X, r25
    4b42:	e8 81       	ld	r30, Y
    4b44:	2e 23       	and	r18, r30
    4b46:	28 83       	st	Y, r18
    4b48:	8f bf       	out	0x3f, r24	; 63
    4b4a:	14 c0       	rjmp	.+40     	; 0x4b74 <pinMode+0x76>
    4b4c:	62 30       	cpi	r22, 0x02	; 2
    4b4e:	61 f4       	brne	.+24     	; 0x4b68 <pinMode+0x6a>
    4b50:	8f b7       	in	r24, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	3c 91       	ld	r19, X
    4b56:	92 2f       	mov	r25, r18
    4b58:	90 95       	com	r25
    4b5a:	93 23       	and	r25, r19
    4b5c:	9c 93       	st	X, r25
    4b5e:	e8 81       	ld	r30, Y
    4b60:	2e 2b       	or	r18, r30
    4b62:	28 83       	st	Y, r18
    4b64:	8f bf       	out	0x3f, r24	; 63
    4b66:	06 c0       	rjmp	.+12     	; 0x4b74 <pinMode+0x76>
    4b68:	8f b7       	in	r24, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	ec 91       	ld	r30, X
    4b6e:	2e 2b       	or	r18, r30
    4b70:	2c 93       	st	X, r18
    4b72:	8f bf       	out	0x3f, r24	; 63
    4b74:	df 91       	pop	r29
    4b76:	cf 91       	pop	r28
    4b78:	08 95       	ret

00004b7a <digitalWrite>:
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	c6 2f       	mov	r28, r22
    4b82:	28 2f       	mov	r18, r24
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	f9 01       	movw	r30, r18
    4b88:	ee 55       	subi	r30, 0x5E	; 94
    4b8a:	fc 4f       	sbci	r31, 0xFC	; 252
    4b8c:	84 91       	lpm	r24, Z
    4b8e:	f9 01       	movw	r30, r18
    4b90:	e8 51       	subi	r30, 0x18	; 24
    4b92:	fc 4f       	sbci	r31, 0xFC	; 252
    4b94:	14 91       	lpm	r17, Z
    4b96:	f9 01       	movw	r30, r18
    4b98:	e2 5d       	subi	r30, 0xD2	; 210
    4b9a:	fb 4f       	sbci	r31, 0xFB	; 251
    4b9c:	d4 91       	lpm	r29, Z
    4b9e:	dd 23       	and	r29, r29
    4ba0:	c1 f0       	breq	.+48     	; 0x4bd2 <digitalWrite+0x58>
    4ba2:	81 11       	cpse	r24, r1
    4ba4:	4c df       	rcall	.-360    	; 0x4a3e <turnOffPWM>
    4ba6:	2d 2f       	mov	r18, r29
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	f9 01       	movw	r30, r18
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	e2 57       	subi	r30, 0x72	; 114
    4bb2:	fb 4f       	sbci	r31, 0xFB	; 251
    4bb4:	a5 91       	lpm	r26, Z+
    4bb6:	b4 91       	lpm	r27, Z
    4bb8:	8f b7       	in	r24, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	c1 11       	cpse	r28, r1
    4bbe:	05 c0       	rjmp	.+10     	; 0x4bca <digitalWrite+0x50>
    4bc0:	ec 91       	ld	r30, X
    4bc2:	10 95       	com	r17
    4bc4:	1e 23       	and	r17, r30
    4bc6:	1c 93       	st	X, r17
    4bc8:	03 c0       	rjmp	.+6      	; 0x4bd0 <digitalWrite+0x56>
    4bca:	ec 91       	ld	r30, X
    4bcc:	1e 2b       	or	r17, r30
    4bce:	1c 93       	st	X, r17
    4bd0:	8f bf       	out	0x3f, r24	; 63
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	08 95       	ret

00004bda <__mulsi3>:
    4bda:	db 01       	movw	r26, r22
    4bdc:	8f 93       	push	r24
    4bde:	9f 93       	push	r25
    4be0:	42 d0       	rcall	.+132    	; 0x4c66 <__muluhisi3>
    4be2:	bf 91       	pop	r27
    4be4:	af 91       	pop	r26
    4be6:	a2 9f       	mul	r26, r18
    4be8:	80 0d       	add	r24, r0
    4bea:	91 1d       	adc	r25, r1
    4bec:	a3 9f       	mul	r26, r19
    4bee:	90 0d       	add	r25, r0
    4bf0:	b2 9f       	mul	r27, r18
    4bf2:	90 0d       	add	r25, r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	08 95       	ret

00004bf8 <__udivmodsi4>:
    4bf8:	a1 e2       	ldi	r26, 0x21	; 33
    4bfa:	1a 2e       	mov	r1, r26
    4bfc:	aa 1b       	sub	r26, r26
    4bfe:	bb 1b       	sub	r27, r27
    4c00:	fd 01       	movw	r30, r26
    4c02:	0d c0       	rjmp	.+26     	; 0x4c1e <__udivmodsi4_ep>

00004c04 <__udivmodsi4_loop>:
    4c04:	aa 1f       	adc	r26, r26
    4c06:	bb 1f       	adc	r27, r27
    4c08:	ee 1f       	adc	r30, r30
    4c0a:	ff 1f       	adc	r31, r31
    4c0c:	a2 17       	cp	r26, r18
    4c0e:	b3 07       	cpc	r27, r19
    4c10:	e4 07       	cpc	r30, r20
    4c12:	f5 07       	cpc	r31, r21
    4c14:	20 f0       	brcs	.+8      	; 0x4c1e <__udivmodsi4_ep>
    4c16:	a2 1b       	sub	r26, r18
    4c18:	b3 0b       	sbc	r27, r19
    4c1a:	e4 0b       	sbc	r30, r20
    4c1c:	f5 0b       	sbc	r31, r21

00004c1e <__udivmodsi4_ep>:
    4c1e:	66 1f       	adc	r22, r22
    4c20:	77 1f       	adc	r23, r23
    4c22:	88 1f       	adc	r24, r24
    4c24:	99 1f       	adc	r25, r25
    4c26:	1a 94       	dec	r1
    4c28:	69 f7       	brne	.-38     	; 0x4c04 <__udivmodsi4_loop>
    4c2a:	60 95       	com	r22
    4c2c:	70 95       	com	r23
    4c2e:	80 95       	com	r24
    4c30:	90 95       	com	r25
    4c32:	9b 01       	movw	r18, r22
    4c34:	ac 01       	movw	r20, r24
    4c36:	bd 01       	movw	r22, r26
    4c38:	cf 01       	movw	r24, r30
    4c3a:	08 95       	ret

00004c3c <__tablejump2__>:
    4c3c:	ee 0f       	add	r30, r30
    4c3e:	ff 1f       	adc	r31, r31

00004c40 <__tablejump__>:
    4c40:	05 90       	lpm	r0, Z+
    4c42:	f4 91       	lpm	r31, Z
    4c44:	e0 2d       	mov	r30, r0
    4c46:	19 94       	eijmp

00004c48 <__umulhisi3>:
    4c48:	a2 9f       	mul	r26, r18
    4c4a:	b0 01       	movw	r22, r0
    4c4c:	b3 9f       	mul	r27, r19
    4c4e:	c0 01       	movw	r24, r0
    4c50:	a3 9f       	mul	r26, r19
    4c52:	70 0d       	add	r23, r0
    4c54:	81 1d       	adc	r24, r1
    4c56:	11 24       	eor	r1, r1
    4c58:	91 1d       	adc	r25, r1
    4c5a:	b2 9f       	mul	r27, r18
    4c5c:	70 0d       	add	r23, r0
    4c5e:	81 1d       	adc	r24, r1
    4c60:	11 24       	eor	r1, r1
    4c62:	91 1d       	adc	r25, r1
    4c64:	08 95       	ret

00004c66 <__muluhisi3>:
    4c66:	f0 df       	rcall	.-32     	; 0x4c48 <__umulhisi3>
    4c68:	a5 9f       	mul	r26, r21
    4c6a:	90 0d       	add	r25, r0
    4c6c:	b4 9f       	mul	r27, r20
    4c6e:	90 0d       	add	r25, r0
    4c70:	a4 9f       	mul	r26, r20
    4c72:	80 0d       	add	r24, r0
    4c74:	91 1d       	adc	r25, r1
    4c76:	11 24       	eor	r1, r1
    4c78:	08 95       	ret

00004c7a <__tablejump_elpm__>:
    4c7a:	07 90       	elpm	r0, Z+
    4c7c:	f6 91       	elpm	r31, Z
    4c7e:	e0 2d       	mov	r30, r0
    4c80:	19 94       	eijmp

00004c82 <vsprintf>:
    4c82:	0f 93       	push	r16
    4c84:	1f 93       	push	r17
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	cd b7       	in	r28, 0x3d	; 61
    4c8c:	de b7       	in	r29, 0x3e	; 62
    4c8e:	2e 97       	sbiw	r28, 0x0e	; 14
    4c90:	0f b6       	in	r0, 0x3f	; 63
    4c92:	f8 94       	cli
    4c94:	de bf       	out	0x3e, r29	; 62
    4c96:	0f be       	out	0x3f, r0	; 63
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	8c 01       	movw	r16, r24
    4c9c:	86 e0       	ldi	r24, 0x06	; 6
    4c9e:	8c 83       	std	Y+4, r24	; 0x04
    4ca0:	1a 83       	std	Y+2, r17	; 0x02
    4ca2:	09 83       	std	Y+1, r16	; 0x01
    4ca4:	8f ef       	ldi	r24, 0xFF	; 255
    4ca6:	9f e7       	ldi	r25, 0x7F	; 127
    4ca8:	9e 83       	std	Y+6, r25	; 0x06
    4caa:	8d 83       	std	Y+5, r24	; 0x05
    4cac:	ce 01       	movw	r24, r28
    4cae:	01 96       	adiw	r24, 0x01	; 1
    4cb0:	10 d0       	rcall	.+32     	; 0x4cd2 <vfprintf>
    4cb2:	ef 81       	ldd	r30, Y+7	; 0x07
    4cb4:	f8 85       	ldd	r31, Y+8	; 0x08
    4cb6:	e0 0f       	add	r30, r16
    4cb8:	f1 1f       	adc	r31, r17
    4cba:	10 82       	st	Z, r1
    4cbc:	2e 96       	adiw	r28, 0x0e	; 14
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
    4cc8:	df 91       	pop	r29
    4cca:	cf 91       	pop	r28
    4ccc:	1f 91       	pop	r17
    4cce:	0f 91       	pop	r16
    4cd0:	08 95       	ret

00004cd2 <vfprintf>:
    4cd2:	2f 92       	push	r2
    4cd4:	3f 92       	push	r3
    4cd6:	4f 92       	push	r4
    4cd8:	5f 92       	push	r5
    4cda:	6f 92       	push	r6
    4cdc:	7f 92       	push	r7
    4cde:	8f 92       	push	r8
    4ce0:	9f 92       	push	r9
    4ce2:	af 92       	push	r10
    4ce4:	bf 92       	push	r11
    4ce6:	cf 92       	push	r12
    4ce8:	df 92       	push	r13
    4cea:	ef 92       	push	r14
    4cec:	ff 92       	push	r15
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	2c 97       	sbiw	r28, 0x0c	; 12
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	7c 01       	movw	r14, r24
    4d08:	6b 01       	movw	r12, r22
    4d0a:	8a 01       	movw	r16, r20
    4d0c:	fc 01       	movw	r30, r24
    4d0e:	17 82       	std	Z+7, r1	; 0x07
    4d10:	16 82       	std	Z+6, r1	; 0x06
    4d12:	83 81       	ldd	r24, Z+3	; 0x03
    4d14:	81 ff       	sbrs	r24, 1
    4d16:	b0 c1       	rjmp	.+864    	; 0x5078 <vfprintf+0x3a6>
    4d18:	ce 01       	movw	r24, r28
    4d1a:	01 96       	adiw	r24, 0x01	; 1
    4d1c:	4c 01       	movw	r8, r24
    4d1e:	f7 01       	movw	r30, r14
    4d20:	93 81       	ldd	r25, Z+3	; 0x03
    4d22:	f6 01       	movw	r30, r12
    4d24:	93 fd       	sbrc	r25, 3
    4d26:	85 91       	lpm	r24, Z+
    4d28:	93 ff       	sbrs	r25, 3
    4d2a:	81 91       	ld	r24, Z+
    4d2c:	6f 01       	movw	r12, r30
    4d2e:	88 23       	and	r24, r24
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <vfprintf+0x62>
    4d32:	9e c1       	rjmp	.+828    	; 0x5070 <vfprintf+0x39e>
    4d34:	85 32       	cpi	r24, 0x25	; 37
    4d36:	39 f4       	brne	.+14     	; 0x4d46 <vfprintf+0x74>
    4d38:	93 fd       	sbrc	r25, 3
    4d3a:	85 91       	lpm	r24, Z+
    4d3c:	93 ff       	sbrs	r25, 3
    4d3e:	81 91       	ld	r24, Z+
    4d40:	6f 01       	movw	r12, r30
    4d42:	85 32       	cpi	r24, 0x25	; 37
    4d44:	21 f4       	brne	.+8      	; 0x4d4e <vfprintf+0x7c>
    4d46:	b7 01       	movw	r22, r14
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	c7 d1       	rcall	.+910    	; 0x50da <fputc>
    4d4c:	e8 cf       	rjmp	.-48     	; 0x4d1e <vfprintf+0x4c>
    4d4e:	51 2c       	mov	r5, r1
    4d50:	31 2c       	mov	r3, r1
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	20 32       	cpi	r18, 0x20	; 32
    4d56:	a0 f4       	brcc	.+40     	; 0x4d80 <vfprintf+0xae>
    4d58:	8b 32       	cpi	r24, 0x2B	; 43
    4d5a:	69 f0       	breq	.+26     	; 0x4d76 <vfprintf+0xa4>
    4d5c:	30 f4       	brcc	.+12     	; 0x4d6a <vfprintf+0x98>
    4d5e:	80 32       	cpi	r24, 0x20	; 32
    4d60:	59 f0       	breq	.+22     	; 0x4d78 <vfprintf+0xa6>
    4d62:	83 32       	cpi	r24, 0x23	; 35
    4d64:	69 f4       	brne	.+26     	; 0x4d80 <vfprintf+0xae>
    4d66:	20 61       	ori	r18, 0x10	; 16
    4d68:	2c c0       	rjmp	.+88     	; 0x4dc2 <vfprintf+0xf0>
    4d6a:	8d 32       	cpi	r24, 0x2D	; 45
    4d6c:	39 f0       	breq	.+14     	; 0x4d7c <vfprintf+0xaa>
    4d6e:	80 33       	cpi	r24, 0x30	; 48
    4d70:	39 f4       	brne	.+14     	; 0x4d80 <vfprintf+0xae>
    4d72:	21 60       	ori	r18, 0x01	; 1
    4d74:	26 c0       	rjmp	.+76     	; 0x4dc2 <vfprintf+0xf0>
    4d76:	22 60       	ori	r18, 0x02	; 2
    4d78:	24 60       	ori	r18, 0x04	; 4
    4d7a:	23 c0       	rjmp	.+70     	; 0x4dc2 <vfprintf+0xf0>
    4d7c:	28 60       	ori	r18, 0x08	; 8
    4d7e:	21 c0       	rjmp	.+66     	; 0x4dc2 <vfprintf+0xf0>
    4d80:	27 fd       	sbrc	r18, 7
    4d82:	27 c0       	rjmp	.+78     	; 0x4dd2 <vfprintf+0x100>
    4d84:	30 ed       	ldi	r19, 0xD0	; 208
    4d86:	38 0f       	add	r19, r24
    4d88:	3a 30       	cpi	r19, 0x0A	; 10
    4d8a:	78 f4       	brcc	.+30     	; 0x4daa <vfprintf+0xd8>
    4d8c:	26 ff       	sbrs	r18, 6
    4d8e:	06 c0       	rjmp	.+12     	; 0x4d9c <vfprintf+0xca>
    4d90:	fa e0       	ldi	r31, 0x0A	; 10
    4d92:	5f 9e       	mul	r5, r31
    4d94:	30 0d       	add	r19, r0
    4d96:	11 24       	eor	r1, r1
    4d98:	53 2e       	mov	r5, r19
    4d9a:	13 c0       	rjmp	.+38     	; 0x4dc2 <vfprintf+0xf0>
    4d9c:	8a e0       	ldi	r24, 0x0A	; 10
    4d9e:	38 9e       	mul	r3, r24
    4da0:	30 0d       	add	r19, r0
    4da2:	11 24       	eor	r1, r1
    4da4:	33 2e       	mov	r3, r19
    4da6:	20 62       	ori	r18, 0x20	; 32
    4da8:	0c c0       	rjmp	.+24     	; 0x4dc2 <vfprintf+0xf0>
    4daa:	8e 32       	cpi	r24, 0x2E	; 46
    4dac:	21 f4       	brne	.+8      	; 0x4db6 <vfprintf+0xe4>
    4dae:	26 fd       	sbrc	r18, 6
    4db0:	5f c1       	rjmp	.+702    	; 0x5070 <vfprintf+0x39e>
    4db2:	20 64       	ori	r18, 0x40	; 64
    4db4:	06 c0       	rjmp	.+12     	; 0x4dc2 <vfprintf+0xf0>
    4db6:	8c 36       	cpi	r24, 0x6C	; 108
    4db8:	11 f4       	brne	.+4      	; 0x4dbe <vfprintf+0xec>
    4dba:	20 68       	ori	r18, 0x80	; 128
    4dbc:	02 c0       	rjmp	.+4      	; 0x4dc2 <vfprintf+0xf0>
    4dbe:	88 36       	cpi	r24, 0x68	; 104
    4dc0:	41 f4       	brne	.+16     	; 0x4dd2 <vfprintf+0x100>
    4dc2:	f6 01       	movw	r30, r12
    4dc4:	93 fd       	sbrc	r25, 3
    4dc6:	85 91       	lpm	r24, Z+
    4dc8:	93 ff       	sbrs	r25, 3
    4dca:	81 91       	ld	r24, Z+
    4dcc:	6f 01       	movw	r12, r30
    4dce:	81 11       	cpse	r24, r1
    4dd0:	c1 cf       	rjmp	.-126    	; 0x4d54 <vfprintf+0x82>
    4dd2:	98 2f       	mov	r25, r24
    4dd4:	9f 7d       	andi	r25, 0xDF	; 223
    4dd6:	95 54       	subi	r25, 0x45	; 69
    4dd8:	93 30       	cpi	r25, 0x03	; 3
    4dda:	28 f4       	brcc	.+10     	; 0x4de6 <vfprintf+0x114>
    4ddc:	0c 5f       	subi	r16, 0xFC	; 252
    4dde:	1f 4f       	sbci	r17, 0xFF	; 255
    4de0:	ff e3       	ldi	r31, 0x3F	; 63
    4de2:	f9 83       	std	Y+1, r31	; 0x01
    4de4:	0d c0       	rjmp	.+26     	; 0x4e00 <vfprintf+0x12e>
    4de6:	83 36       	cpi	r24, 0x63	; 99
    4de8:	31 f0       	breq	.+12     	; 0x4df6 <vfprintf+0x124>
    4dea:	83 37       	cpi	r24, 0x73	; 115
    4dec:	71 f0       	breq	.+28     	; 0x4e0a <vfprintf+0x138>
    4dee:	83 35       	cpi	r24, 0x53	; 83
    4df0:	09 f0       	breq	.+2      	; 0x4df4 <vfprintf+0x122>
    4df2:	57 c0       	rjmp	.+174    	; 0x4ea2 <vfprintf+0x1d0>
    4df4:	21 c0       	rjmp	.+66     	; 0x4e38 <vfprintf+0x166>
    4df6:	f8 01       	movw	r30, r16
    4df8:	80 81       	ld	r24, Z
    4dfa:	89 83       	std	Y+1, r24	; 0x01
    4dfc:	0e 5f       	subi	r16, 0xFE	; 254
    4dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    4e00:	44 24       	eor	r4, r4
    4e02:	43 94       	inc	r4
    4e04:	51 2c       	mov	r5, r1
    4e06:	54 01       	movw	r10, r8
    4e08:	14 c0       	rjmp	.+40     	; 0x4e32 <vfprintf+0x160>
    4e0a:	38 01       	movw	r6, r16
    4e0c:	f2 e0       	ldi	r31, 0x02	; 2
    4e0e:	6f 0e       	add	r6, r31
    4e10:	71 1c       	adc	r7, r1
    4e12:	f8 01       	movw	r30, r16
    4e14:	a0 80       	ld	r10, Z
    4e16:	b1 80       	ldd	r11, Z+1	; 0x01
    4e18:	26 ff       	sbrs	r18, 6
    4e1a:	03 c0       	rjmp	.+6      	; 0x4e22 <vfprintf+0x150>
    4e1c:	65 2d       	mov	r22, r5
    4e1e:	70 e0       	ldi	r23, 0x00	; 0
    4e20:	02 c0       	rjmp	.+4      	; 0x4e26 <vfprintf+0x154>
    4e22:	6f ef       	ldi	r22, 0xFF	; 255
    4e24:	7f ef       	ldi	r23, 0xFF	; 255
    4e26:	c5 01       	movw	r24, r10
    4e28:	2c 87       	std	Y+12, r18	; 0x0c
    4e2a:	4c d1       	rcall	.+664    	; 0x50c4 <strnlen>
    4e2c:	2c 01       	movw	r4, r24
    4e2e:	83 01       	movw	r16, r6
    4e30:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e32:	2f 77       	andi	r18, 0x7F	; 127
    4e34:	22 2e       	mov	r2, r18
    4e36:	16 c0       	rjmp	.+44     	; 0x4e64 <vfprintf+0x192>
    4e38:	38 01       	movw	r6, r16
    4e3a:	f2 e0       	ldi	r31, 0x02	; 2
    4e3c:	6f 0e       	add	r6, r31
    4e3e:	71 1c       	adc	r7, r1
    4e40:	f8 01       	movw	r30, r16
    4e42:	a0 80       	ld	r10, Z
    4e44:	b1 80       	ldd	r11, Z+1	; 0x01
    4e46:	26 ff       	sbrs	r18, 6
    4e48:	03 c0       	rjmp	.+6      	; 0x4e50 <vfprintf+0x17e>
    4e4a:	65 2d       	mov	r22, r5
    4e4c:	70 e0       	ldi	r23, 0x00	; 0
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <vfprintf+0x182>
    4e50:	6f ef       	ldi	r22, 0xFF	; 255
    4e52:	7f ef       	ldi	r23, 0xFF	; 255
    4e54:	c5 01       	movw	r24, r10
    4e56:	2c 87       	std	Y+12, r18	; 0x0c
    4e58:	2a d1       	rcall	.+596    	; 0x50ae <strnlen_P>
    4e5a:	2c 01       	movw	r4, r24
    4e5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e5e:	20 68       	ori	r18, 0x80	; 128
    4e60:	22 2e       	mov	r2, r18
    4e62:	83 01       	movw	r16, r6
    4e64:	23 fc       	sbrc	r2, 3
    4e66:	19 c0       	rjmp	.+50     	; 0x4e9a <vfprintf+0x1c8>
    4e68:	83 2d       	mov	r24, r3
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	48 16       	cp	r4, r24
    4e6e:	59 06       	cpc	r5, r25
    4e70:	a0 f4       	brcc	.+40     	; 0x4e9a <vfprintf+0x1c8>
    4e72:	b7 01       	movw	r22, r14
    4e74:	80 e2       	ldi	r24, 0x20	; 32
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	30 d1       	rcall	.+608    	; 0x50da <fputc>
    4e7a:	3a 94       	dec	r3
    4e7c:	f5 cf       	rjmp	.-22     	; 0x4e68 <vfprintf+0x196>
    4e7e:	f5 01       	movw	r30, r10
    4e80:	27 fc       	sbrc	r2, 7
    4e82:	85 91       	lpm	r24, Z+
    4e84:	27 fe       	sbrs	r2, 7
    4e86:	81 91       	ld	r24, Z+
    4e88:	5f 01       	movw	r10, r30
    4e8a:	b7 01       	movw	r22, r14
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	25 d1       	rcall	.+586    	; 0x50da <fputc>
    4e90:	31 10       	cpse	r3, r1
    4e92:	3a 94       	dec	r3
    4e94:	f1 e0       	ldi	r31, 0x01	; 1
    4e96:	4f 1a       	sub	r4, r31
    4e98:	51 08       	sbc	r5, r1
    4e9a:	41 14       	cp	r4, r1
    4e9c:	51 04       	cpc	r5, r1
    4e9e:	79 f7       	brne	.-34     	; 0x4e7e <vfprintf+0x1ac>
    4ea0:	de c0       	rjmp	.+444    	; 0x505e <vfprintf+0x38c>
    4ea2:	84 36       	cpi	r24, 0x64	; 100
    4ea4:	11 f0       	breq	.+4      	; 0x4eaa <vfprintf+0x1d8>
    4ea6:	89 36       	cpi	r24, 0x69	; 105
    4ea8:	31 f5       	brne	.+76     	; 0x4ef6 <vfprintf+0x224>
    4eaa:	f8 01       	movw	r30, r16
    4eac:	27 ff       	sbrs	r18, 7
    4eae:	07 c0       	rjmp	.+14     	; 0x4ebe <vfprintf+0x1ec>
    4eb0:	60 81       	ld	r22, Z
    4eb2:	71 81       	ldd	r23, Z+1	; 0x01
    4eb4:	82 81       	ldd	r24, Z+2	; 0x02
    4eb6:	93 81       	ldd	r25, Z+3	; 0x03
    4eb8:	0c 5f       	subi	r16, 0xFC	; 252
    4eba:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebc:	08 c0       	rjmp	.+16     	; 0x4ece <vfprintf+0x1fc>
    4ebe:	60 81       	ld	r22, Z
    4ec0:	71 81       	ldd	r23, Z+1	; 0x01
    4ec2:	88 27       	eor	r24, r24
    4ec4:	77 fd       	sbrc	r23, 7
    4ec6:	80 95       	com	r24
    4ec8:	98 2f       	mov	r25, r24
    4eca:	0e 5f       	subi	r16, 0xFE	; 254
    4ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ece:	2f 76       	andi	r18, 0x6F	; 111
    4ed0:	b2 2e       	mov	r11, r18
    4ed2:	97 ff       	sbrs	r25, 7
    4ed4:	09 c0       	rjmp	.+18     	; 0x4ee8 <vfprintf+0x216>
    4ed6:	90 95       	com	r25
    4ed8:	80 95       	com	r24
    4eda:	70 95       	com	r23
    4edc:	61 95       	neg	r22
    4ede:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee4:	20 68       	ori	r18, 0x80	; 128
    4ee6:	b2 2e       	mov	r11, r18
    4ee8:	2a e0       	ldi	r18, 0x0A	; 10
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	a4 01       	movw	r20, r8
    4eee:	27 d1       	rcall	.+590    	; 0x513e <__ultoa_invert>
    4ef0:	a8 2e       	mov	r10, r24
    4ef2:	a8 18       	sub	r10, r8
    4ef4:	43 c0       	rjmp	.+134    	; 0x4f7c <vfprintf+0x2aa>
    4ef6:	85 37       	cpi	r24, 0x75	; 117
    4ef8:	29 f4       	brne	.+10     	; 0x4f04 <vfprintf+0x232>
    4efa:	2f 7e       	andi	r18, 0xEF	; 239
    4efc:	b2 2e       	mov	r11, r18
    4efe:	2a e0       	ldi	r18, 0x0A	; 10
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	25 c0       	rjmp	.+74     	; 0x4f4e <vfprintf+0x27c>
    4f04:	f2 2f       	mov	r31, r18
    4f06:	f9 7f       	andi	r31, 0xF9	; 249
    4f08:	bf 2e       	mov	r11, r31
    4f0a:	8f 36       	cpi	r24, 0x6F	; 111
    4f0c:	c1 f0       	breq	.+48     	; 0x4f3e <vfprintf+0x26c>
    4f0e:	18 f4       	brcc	.+6      	; 0x4f16 <vfprintf+0x244>
    4f10:	88 35       	cpi	r24, 0x58	; 88
    4f12:	79 f0       	breq	.+30     	; 0x4f32 <vfprintf+0x260>
    4f14:	ad c0       	rjmp	.+346    	; 0x5070 <vfprintf+0x39e>
    4f16:	80 37       	cpi	r24, 0x70	; 112
    4f18:	19 f0       	breq	.+6      	; 0x4f20 <vfprintf+0x24e>
    4f1a:	88 37       	cpi	r24, 0x78	; 120
    4f1c:	21 f0       	breq	.+8      	; 0x4f26 <vfprintf+0x254>
    4f1e:	a8 c0       	rjmp	.+336    	; 0x5070 <vfprintf+0x39e>
    4f20:	2f 2f       	mov	r18, r31
    4f22:	20 61       	ori	r18, 0x10	; 16
    4f24:	b2 2e       	mov	r11, r18
    4f26:	b4 fe       	sbrs	r11, 4
    4f28:	0d c0       	rjmp	.+26     	; 0x4f44 <vfprintf+0x272>
    4f2a:	8b 2d       	mov	r24, r11
    4f2c:	84 60       	ori	r24, 0x04	; 4
    4f2e:	b8 2e       	mov	r11, r24
    4f30:	09 c0       	rjmp	.+18     	; 0x4f44 <vfprintf+0x272>
    4f32:	24 ff       	sbrs	r18, 4
    4f34:	0a c0       	rjmp	.+20     	; 0x4f4a <vfprintf+0x278>
    4f36:	9f 2f       	mov	r25, r31
    4f38:	96 60       	ori	r25, 0x06	; 6
    4f3a:	b9 2e       	mov	r11, r25
    4f3c:	06 c0       	rjmp	.+12     	; 0x4f4a <vfprintf+0x278>
    4f3e:	28 e0       	ldi	r18, 0x08	; 8
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	05 c0       	rjmp	.+10     	; 0x4f4e <vfprintf+0x27c>
    4f44:	20 e1       	ldi	r18, 0x10	; 16
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	02 c0       	rjmp	.+4      	; 0x4f4e <vfprintf+0x27c>
    4f4a:	20 e1       	ldi	r18, 0x10	; 16
    4f4c:	32 e0       	ldi	r19, 0x02	; 2
    4f4e:	f8 01       	movw	r30, r16
    4f50:	b7 fe       	sbrs	r11, 7
    4f52:	07 c0       	rjmp	.+14     	; 0x4f62 <vfprintf+0x290>
    4f54:	60 81       	ld	r22, Z
    4f56:	71 81       	ldd	r23, Z+1	; 0x01
    4f58:	82 81       	ldd	r24, Z+2	; 0x02
    4f5a:	93 81       	ldd	r25, Z+3	; 0x03
    4f5c:	0c 5f       	subi	r16, 0xFC	; 252
    4f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f60:	06 c0       	rjmp	.+12     	; 0x4f6e <vfprintf+0x29c>
    4f62:	60 81       	ld	r22, Z
    4f64:	71 81       	ldd	r23, Z+1	; 0x01
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	0e 5f       	subi	r16, 0xFE	; 254
    4f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f6e:	a4 01       	movw	r20, r8
    4f70:	e6 d0       	rcall	.+460    	; 0x513e <__ultoa_invert>
    4f72:	a8 2e       	mov	r10, r24
    4f74:	a8 18       	sub	r10, r8
    4f76:	fb 2d       	mov	r31, r11
    4f78:	ff 77       	andi	r31, 0x7F	; 127
    4f7a:	bf 2e       	mov	r11, r31
    4f7c:	b6 fe       	sbrs	r11, 6
    4f7e:	0b c0       	rjmp	.+22     	; 0x4f96 <vfprintf+0x2c4>
    4f80:	2b 2d       	mov	r18, r11
    4f82:	2e 7f       	andi	r18, 0xFE	; 254
    4f84:	a5 14       	cp	r10, r5
    4f86:	50 f4       	brcc	.+20     	; 0x4f9c <vfprintf+0x2ca>
    4f88:	b4 fe       	sbrs	r11, 4
    4f8a:	0a c0       	rjmp	.+20     	; 0x4fa0 <vfprintf+0x2ce>
    4f8c:	b2 fc       	sbrc	r11, 2
    4f8e:	08 c0       	rjmp	.+16     	; 0x4fa0 <vfprintf+0x2ce>
    4f90:	2b 2d       	mov	r18, r11
    4f92:	2e 7e       	andi	r18, 0xEE	; 238
    4f94:	05 c0       	rjmp	.+10     	; 0x4fa0 <vfprintf+0x2ce>
    4f96:	7a 2c       	mov	r7, r10
    4f98:	2b 2d       	mov	r18, r11
    4f9a:	03 c0       	rjmp	.+6      	; 0x4fa2 <vfprintf+0x2d0>
    4f9c:	7a 2c       	mov	r7, r10
    4f9e:	01 c0       	rjmp	.+2      	; 0x4fa2 <vfprintf+0x2d0>
    4fa0:	75 2c       	mov	r7, r5
    4fa2:	24 ff       	sbrs	r18, 4
    4fa4:	0d c0       	rjmp	.+26     	; 0x4fc0 <vfprintf+0x2ee>
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	ea 0d       	add	r30, r10
    4faa:	f1 1d       	adc	r31, r1
    4fac:	80 81       	ld	r24, Z
    4fae:	80 33       	cpi	r24, 0x30	; 48
    4fb0:	11 f4       	brne	.+4      	; 0x4fb6 <vfprintf+0x2e4>
    4fb2:	29 7e       	andi	r18, 0xE9	; 233
    4fb4:	09 c0       	rjmp	.+18     	; 0x4fc8 <vfprintf+0x2f6>
    4fb6:	22 ff       	sbrs	r18, 2
    4fb8:	06 c0       	rjmp	.+12     	; 0x4fc6 <vfprintf+0x2f4>
    4fba:	73 94       	inc	r7
    4fbc:	73 94       	inc	r7
    4fbe:	04 c0       	rjmp	.+8      	; 0x4fc8 <vfprintf+0x2f6>
    4fc0:	82 2f       	mov	r24, r18
    4fc2:	86 78       	andi	r24, 0x86	; 134
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <vfprintf+0x2f6>
    4fc6:	73 94       	inc	r7
    4fc8:	23 fd       	sbrc	r18, 3
    4fca:	12 c0       	rjmp	.+36     	; 0x4ff0 <vfprintf+0x31e>
    4fcc:	20 ff       	sbrs	r18, 0
    4fce:	06 c0       	rjmp	.+12     	; 0x4fdc <vfprintf+0x30a>
    4fd0:	5a 2c       	mov	r5, r10
    4fd2:	73 14       	cp	r7, r3
    4fd4:	18 f4       	brcc	.+6      	; 0x4fdc <vfprintf+0x30a>
    4fd6:	53 0c       	add	r5, r3
    4fd8:	57 18       	sub	r5, r7
    4fda:	73 2c       	mov	r7, r3
    4fdc:	73 14       	cp	r7, r3
    4fde:	60 f4       	brcc	.+24     	; 0x4ff8 <vfprintf+0x326>
    4fe0:	b7 01       	movw	r22, r14
    4fe2:	80 e2       	ldi	r24, 0x20	; 32
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	2c 87       	std	Y+12, r18	; 0x0c
    4fe8:	78 d0       	rcall	.+240    	; 0x50da <fputc>
    4fea:	73 94       	inc	r7
    4fec:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fee:	f6 cf       	rjmp	.-20     	; 0x4fdc <vfprintf+0x30a>
    4ff0:	73 14       	cp	r7, r3
    4ff2:	10 f4       	brcc	.+4      	; 0x4ff8 <vfprintf+0x326>
    4ff4:	37 18       	sub	r3, r7
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <vfprintf+0x328>
    4ff8:	31 2c       	mov	r3, r1
    4ffa:	24 ff       	sbrs	r18, 4
    4ffc:	11 c0       	rjmp	.+34     	; 0x5020 <vfprintf+0x34e>
    4ffe:	b7 01       	movw	r22, r14
    5000:	80 e3       	ldi	r24, 0x30	; 48
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	2c 87       	std	Y+12, r18	; 0x0c
    5006:	69 d0       	rcall	.+210    	; 0x50da <fputc>
    5008:	2c 85       	ldd	r18, Y+12	; 0x0c
    500a:	22 ff       	sbrs	r18, 2
    500c:	16 c0       	rjmp	.+44     	; 0x503a <vfprintf+0x368>
    500e:	21 ff       	sbrs	r18, 1
    5010:	03 c0       	rjmp	.+6      	; 0x5018 <vfprintf+0x346>
    5012:	88 e5       	ldi	r24, 0x58	; 88
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	02 c0       	rjmp	.+4      	; 0x501c <vfprintf+0x34a>
    5018:	88 e7       	ldi	r24, 0x78	; 120
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	b7 01       	movw	r22, r14
    501e:	0c c0       	rjmp	.+24     	; 0x5038 <vfprintf+0x366>
    5020:	82 2f       	mov	r24, r18
    5022:	86 78       	andi	r24, 0x86	; 134
    5024:	51 f0       	breq	.+20     	; 0x503a <vfprintf+0x368>
    5026:	21 fd       	sbrc	r18, 1
    5028:	02 c0       	rjmp	.+4      	; 0x502e <vfprintf+0x35c>
    502a:	80 e2       	ldi	r24, 0x20	; 32
    502c:	01 c0       	rjmp	.+2      	; 0x5030 <vfprintf+0x35e>
    502e:	8b e2       	ldi	r24, 0x2B	; 43
    5030:	27 fd       	sbrc	r18, 7
    5032:	8d e2       	ldi	r24, 0x2D	; 45
    5034:	b7 01       	movw	r22, r14
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	50 d0       	rcall	.+160    	; 0x50da <fputc>
    503a:	a5 14       	cp	r10, r5
    503c:	30 f4       	brcc	.+12     	; 0x504a <vfprintf+0x378>
    503e:	b7 01       	movw	r22, r14
    5040:	80 e3       	ldi	r24, 0x30	; 48
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	4a d0       	rcall	.+148    	; 0x50da <fputc>
    5046:	5a 94       	dec	r5
    5048:	f8 cf       	rjmp	.-16     	; 0x503a <vfprintf+0x368>
    504a:	aa 94       	dec	r10
    504c:	f4 01       	movw	r30, r8
    504e:	ea 0d       	add	r30, r10
    5050:	f1 1d       	adc	r31, r1
    5052:	80 81       	ld	r24, Z
    5054:	b7 01       	movw	r22, r14
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	40 d0       	rcall	.+128    	; 0x50da <fputc>
    505a:	a1 10       	cpse	r10, r1
    505c:	f6 cf       	rjmp	.-20     	; 0x504a <vfprintf+0x378>
    505e:	33 20       	and	r3, r3
    5060:	09 f4       	brne	.+2      	; 0x5064 <vfprintf+0x392>
    5062:	5d ce       	rjmp	.-838    	; 0x4d1e <vfprintf+0x4c>
    5064:	b7 01       	movw	r22, r14
    5066:	80 e2       	ldi	r24, 0x20	; 32
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	37 d0       	rcall	.+110    	; 0x50da <fputc>
    506c:	3a 94       	dec	r3
    506e:	f7 cf       	rjmp	.-18     	; 0x505e <vfprintf+0x38c>
    5070:	f7 01       	movw	r30, r14
    5072:	86 81       	ldd	r24, Z+6	; 0x06
    5074:	97 81       	ldd	r25, Z+7	; 0x07
    5076:	02 c0       	rjmp	.+4      	; 0x507c <vfprintf+0x3aa>
    5078:	8f ef       	ldi	r24, 0xFF	; 255
    507a:	9f ef       	ldi	r25, 0xFF	; 255
    507c:	2c 96       	adiw	r28, 0x0c	; 12
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	1f 91       	pop	r17
    508e:	0f 91       	pop	r16
    5090:	ff 90       	pop	r15
    5092:	ef 90       	pop	r14
    5094:	df 90       	pop	r13
    5096:	cf 90       	pop	r12
    5098:	bf 90       	pop	r11
    509a:	af 90       	pop	r10
    509c:	9f 90       	pop	r9
    509e:	8f 90       	pop	r8
    50a0:	7f 90       	pop	r7
    50a2:	6f 90       	pop	r6
    50a4:	5f 90       	pop	r5
    50a6:	4f 90       	pop	r4
    50a8:	3f 90       	pop	r3
    50aa:	2f 90       	pop	r2
    50ac:	08 95       	ret

000050ae <strnlen_P>:
    50ae:	fc 01       	movw	r30, r24
    50b0:	05 90       	lpm	r0, Z+
    50b2:	61 50       	subi	r22, 0x01	; 1
    50b4:	70 40       	sbci	r23, 0x00	; 0
    50b6:	01 10       	cpse	r0, r1
    50b8:	d8 f7       	brcc	.-10     	; 0x50b0 <strnlen_P+0x2>
    50ba:	80 95       	com	r24
    50bc:	90 95       	com	r25
    50be:	8e 0f       	add	r24, r30
    50c0:	9f 1f       	adc	r25, r31
    50c2:	08 95       	ret

000050c4 <strnlen>:
    50c4:	fc 01       	movw	r30, r24
    50c6:	61 50       	subi	r22, 0x01	; 1
    50c8:	70 40       	sbci	r23, 0x00	; 0
    50ca:	01 90       	ld	r0, Z+
    50cc:	01 10       	cpse	r0, r1
    50ce:	d8 f7       	brcc	.-10     	; 0x50c6 <strnlen+0x2>
    50d0:	80 95       	com	r24
    50d2:	90 95       	com	r25
    50d4:	8e 0f       	add	r24, r30
    50d6:	9f 1f       	adc	r25, r31
    50d8:	08 95       	ret

000050da <fputc>:
    50da:	0f 93       	push	r16
    50dc:	1f 93       	push	r17
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	18 2f       	mov	r17, r24
    50e4:	09 2f       	mov	r16, r25
    50e6:	eb 01       	movw	r28, r22
    50e8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ea:	81 fd       	sbrc	r24, 1
    50ec:	03 c0       	rjmp	.+6      	; 0x50f4 <fputc+0x1a>
    50ee:	8f ef       	ldi	r24, 0xFF	; 255
    50f0:	9f ef       	ldi	r25, 0xFF	; 255
    50f2:	20 c0       	rjmp	.+64     	; 0x5134 <fputc+0x5a>
    50f4:	82 ff       	sbrs	r24, 2
    50f6:	10 c0       	rjmp	.+32     	; 0x5118 <fputc+0x3e>
    50f8:	4e 81       	ldd	r20, Y+6	; 0x06
    50fa:	5f 81       	ldd	r21, Y+7	; 0x07
    50fc:	2c 81       	ldd	r18, Y+4	; 0x04
    50fe:	3d 81       	ldd	r19, Y+5	; 0x05
    5100:	42 17       	cp	r20, r18
    5102:	53 07       	cpc	r21, r19
    5104:	7c f4       	brge	.+30     	; 0x5124 <fputc+0x4a>
    5106:	e8 81       	ld	r30, Y
    5108:	f9 81       	ldd	r31, Y+1	; 0x01
    510a:	9f 01       	movw	r18, r30
    510c:	2f 5f       	subi	r18, 0xFF	; 255
    510e:	3f 4f       	sbci	r19, 0xFF	; 255
    5110:	39 83       	std	Y+1, r19	; 0x01
    5112:	28 83       	st	Y, r18
    5114:	10 83       	st	Z, r17
    5116:	06 c0       	rjmp	.+12     	; 0x5124 <fputc+0x4a>
    5118:	e8 85       	ldd	r30, Y+8	; 0x08
    511a:	f9 85       	ldd	r31, Y+9	; 0x09
    511c:	81 2f       	mov	r24, r17
    511e:	19 95       	eicall
    5120:	89 2b       	or	r24, r25
    5122:	29 f7       	brne	.-54     	; 0x50ee <fputc+0x14>
    5124:	2e 81       	ldd	r18, Y+6	; 0x06
    5126:	3f 81       	ldd	r19, Y+7	; 0x07
    5128:	2f 5f       	subi	r18, 0xFF	; 255
    512a:	3f 4f       	sbci	r19, 0xFF	; 255
    512c:	3f 83       	std	Y+7, r19	; 0x07
    512e:	2e 83       	std	Y+6, r18	; 0x06
    5130:	81 2f       	mov	r24, r17
    5132:	90 2f       	mov	r25, r16
    5134:	df 91       	pop	r29
    5136:	cf 91       	pop	r28
    5138:	1f 91       	pop	r17
    513a:	0f 91       	pop	r16
    513c:	08 95       	ret

0000513e <__ultoa_invert>:
    513e:	fa 01       	movw	r30, r20
    5140:	aa 27       	eor	r26, r26
    5142:	28 30       	cpi	r18, 0x08	; 8
    5144:	51 f1       	breq	.+84     	; 0x519a <__ultoa_invert+0x5c>
    5146:	20 31       	cpi	r18, 0x10	; 16
    5148:	81 f1       	breq	.+96     	; 0x51aa <__ultoa_invert+0x6c>
    514a:	e8 94       	clt
    514c:	6f 93       	push	r22
    514e:	6e 7f       	andi	r22, 0xFE	; 254
    5150:	6e 5f       	subi	r22, 0xFE	; 254
    5152:	7f 4f       	sbci	r23, 0xFF	; 255
    5154:	8f 4f       	sbci	r24, 0xFF	; 255
    5156:	9f 4f       	sbci	r25, 0xFF	; 255
    5158:	af 4f       	sbci	r26, 0xFF	; 255
    515a:	b1 e0       	ldi	r27, 0x01	; 1
    515c:	3e d0       	rcall	.+124    	; 0x51da <__ultoa_invert+0x9c>
    515e:	b4 e0       	ldi	r27, 0x04	; 4
    5160:	3c d0       	rcall	.+120    	; 0x51da <__ultoa_invert+0x9c>
    5162:	67 0f       	add	r22, r23
    5164:	78 1f       	adc	r23, r24
    5166:	89 1f       	adc	r24, r25
    5168:	9a 1f       	adc	r25, r26
    516a:	a1 1d       	adc	r26, r1
    516c:	68 0f       	add	r22, r24
    516e:	79 1f       	adc	r23, r25
    5170:	8a 1f       	adc	r24, r26
    5172:	91 1d       	adc	r25, r1
    5174:	a1 1d       	adc	r26, r1
    5176:	6a 0f       	add	r22, r26
    5178:	71 1d       	adc	r23, r1
    517a:	81 1d       	adc	r24, r1
    517c:	91 1d       	adc	r25, r1
    517e:	a1 1d       	adc	r26, r1
    5180:	20 d0       	rcall	.+64     	; 0x51c2 <__ultoa_invert+0x84>
    5182:	09 f4       	brne	.+2      	; 0x5186 <__ultoa_invert+0x48>
    5184:	68 94       	set
    5186:	3f 91       	pop	r19
    5188:	2a e0       	ldi	r18, 0x0A	; 10
    518a:	26 9f       	mul	r18, r22
    518c:	11 24       	eor	r1, r1
    518e:	30 19       	sub	r19, r0
    5190:	30 5d       	subi	r19, 0xD0	; 208
    5192:	31 93       	st	Z+, r19
    5194:	de f6       	brtc	.-74     	; 0x514c <__ultoa_invert+0xe>
    5196:	cf 01       	movw	r24, r30
    5198:	08 95       	ret
    519a:	46 2f       	mov	r20, r22
    519c:	47 70       	andi	r20, 0x07	; 7
    519e:	40 5d       	subi	r20, 0xD0	; 208
    51a0:	41 93       	st	Z+, r20
    51a2:	b3 e0       	ldi	r27, 0x03	; 3
    51a4:	0f d0       	rcall	.+30     	; 0x51c4 <__ultoa_invert+0x86>
    51a6:	c9 f7       	brne	.-14     	; 0x519a <__ultoa_invert+0x5c>
    51a8:	f6 cf       	rjmp	.-20     	; 0x5196 <__ultoa_invert+0x58>
    51aa:	46 2f       	mov	r20, r22
    51ac:	4f 70       	andi	r20, 0x0F	; 15
    51ae:	40 5d       	subi	r20, 0xD0	; 208
    51b0:	4a 33       	cpi	r20, 0x3A	; 58
    51b2:	18 f0       	brcs	.+6      	; 0x51ba <__ultoa_invert+0x7c>
    51b4:	49 5d       	subi	r20, 0xD9	; 217
    51b6:	31 fd       	sbrc	r19, 1
    51b8:	40 52       	subi	r20, 0x20	; 32
    51ba:	41 93       	st	Z+, r20
    51bc:	02 d0       	rcall	.+4      	; 0x51c2 <__ultoa_invert+0x84>
    51be:	a9 f7       	brne	.-22     	; 0x51aa <__ultoa_invert+0x6c>
    51c0:	ea cf       	rjmp	.-44     	; 0x5196 <__ultoa_invert+0x58>
    51c2:	b4 e0       	ldi	r27, 0x04	; 4
    51c4:	a6 95       	lsr	r26
    51c6:	97 95       	ror	r25
    51c8:	87 95       	ror	r24
    51ca:	77 95       	ror	r23
    51cc:	67 95       	ror	r22
    51ce:	ba 95       	dec	r27
    51d0:	c9 f7       	brne	.-14     	; 0x51c4 <__ultoa_invert+0x86>
    51d2:	00 97       	sbiw	r24, 0x00	; 0
    51d4:	61 05       	cpc	r22, r1
    51d6:	71 05       	cpc	r23, r1
    51d8:	08 95       	ret
    51da:	9b 01       	movw	r18, r22
    51dc:	ac 01       	movw	r20, r24
    51de:	0a 2e       	mov	r0, r26
    51e0:	06 94       	lsr	r0
    51e2:	57 95       	ror	r21
    51e4:	47 95       	ror	r20
    51e6:	37 95       	ror	r19
    51e8:	27 95       	ror	r18
    51ea:	ba 95       	dec	r27
    51ec:	c9 f7       	brne	.-14     	; 0x51e0 <__ultoa_invert+0xa2>
    51ee:	62 0f       	add	r22, r18
    51f0:	73 1f       	adc	r23, r19
    51f2:	84 1f       	adc	r24, r20
    51f4:	95 1f       	adc	r25, r21
    51f6:	a0 1d       	adc	r26, r0
    51f8:	08 95       	ret

000051fa <_exit>:
    51fa:	f8 94       	cli

000051fc <__stop_program>:
    51fc:	ff cf       	rjmp	.-2      	; 0x51fc <__stop_program>
